/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Square from "../index";

/**
 * This model gives the details of a cash drawer shift.
 * The cash_payment_money, cash_refund_money, cash_paid_in_money,
 * and cash_paid_out_money fields are all computed by summing their respective
 * event types.
 */
export interface CashDrawerShift {
    /** The shift unique ID. */
    id?: string;
    /**
     * The shift current state.
     * See [CashDrawerShiftState](#type-cashdrawershiftstate) for possible values
     */
    state?: Square.CashDrawerShiftState;
    /** The time when the shift began, in ISO 8601 format. */
    openedAt?: string | null;
    /** The time when the shift ended, in ISO 8601 format. */
    endedAt?: string | null;
    /** The time when the shift was closed, in ISO 8601 format. */
    closedAt?: string | null;
    /** The free-form text description of a cash drawer by an employee. */
    description?: string | null;
    /**
     * The amount of money in the cash drawer at the start of the shift.
     * The amount must be greater than or equal to zero.
     */
    openedCashMoney?: Square.Money;
    /**
     * The amount of money added to the cash drawer from cash payments.
     * This is computed by summing all events with the types CASH_TENDER_PAYMENT and
     * CASH_TENDER_CANCELED_PAYMENT. The amount is always greater than or equal to
     * zero.
     */
    cashPaymentMoney?: Square.Money;
    /**
     * The amount of money removed from the cash drawer from cash refunds.
     * It is computed by summing the events of type CASH_TENDER_REFUND. The amount
     * is always greater than or equal to zero.
     */
    cashRefundsMoney?: Square.Money;
    /**
     * The amount of money added to the cash drawer for reasons other than cash
     * payments. It is computed by summing the events of type PAID_IN. The amount is
     * always greater than or equal to zero.
     */
    cashPaidInMoney?: Square.Money;
    /**
     * The amount of money removed from the cash drawer for reasons other than
     * cash refunds. It is computed by summing the events of type PAID_OUT. The amount
     * is always greater than or equal to zero.
     */
    cashPaidOutMoney?: Square.Money;
    /**
     * The amount of money that should be in the cash drawer at the end of the
     * shift, based on the shift's other money amounts.
     * This can be negative if employees have not correctly recorded all the events
     * on the cash drawer.
     * cash_paid_out_money is a summation of amounts from cash_payment_money (zero
     * or positive), cash_refunds_money (zero or negative), cash_paid_in_money (zero
     * or positive), and cash_paid_out_money (zero or negative) event types.
     */
    expectedCashMoney?: Square.Money;
    /**
     * The amount of money found in the cash drawer at the end of the shift
     * by an auditing employee. The amount should be positive.
     */
    closedCashMoney?: Square.Money;
    /** The device running Square Point of Sale that was connected to the cash drawer. */
    device?: Square.CashDrawerDevice;
    /** The shift start time in RFC 3339 format. */
    createdAt?: string;
    /** The shift updated at time in RFC 3339 format. */
    updatedAt?: string;
    /** The ID of the location the cash drawer shift belongs to. */
    locationId?: string;
    /**
     * The IDs of all team members that were logged into Square Point of Sale at any
     * point while the cash drawer shift was open.
     */
    teamMemberIds?: string[];
    /** The ID of the team member that started the cash drawer shift. */
    openingTeamMemberId?: string;
    /** The ID of the team member that ended the cash drawer shift. */
    endingTeamMemberId?: string;
    /**
     * The ID of the team member that closed the cash drawer shift by auditing
     * the cash drawer contents.
     */
    closingTeamMemberId?: string;
}
