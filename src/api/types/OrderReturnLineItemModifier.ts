/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Square from "../index.js";

/**
 * A line item modifier being returned.
 */
export interface OrderReturnLineItemModifier {
    /** A unique ID that identifies the return modifier only within this order. */
    uid?: string | null;
    /**
     * The modifier `uid` from the order's line item that contains the
     * original sale of this line item modifier.
     */
    source_modifier_uid?: string | null;
    /** The catalog object ID referencing [CatalogModifier](entity:CatalogModifier). */
    catalog_object_id?: string | null;
    /** The version of the catalog object that this line item modifier references. */
    catalog_version?: (number | bigint) | null;
    /** The name of the item modifier. */
    name?: string | null;
    /**
     * The base price for the modifier.
     *
     * `base_price_money` is required for ad hoc modifiers.
     * If both `catalog_object_id` and `base_price_money` are set, `base_price_money` overrides the predefined [CatalogModifier](entity:CatalogModifier) price.
     */
    base_price_money?: Square.Money;
    /**
     * The total price of the item modifier for its line item.
     * This is the modifier's `base_price_money` multiplied by the line item's quantity.
     */
    total_price_money?: Square.Money;
    /**
     * The quantity of the line item modifier. The modifier quantity can be 0 or more.
     * For example, suppose a restaurant offers a cheeseburger on the menu. When a buyer orders
     * this item, the restaurant records the purchase by creating an `Order` object with a line item
     * for a burger. The line item includes a line item modifier: the name is cheese and the quantity
     * is 1. The buyer has the option to order extra cheese (or no cheese). If the buyer chooses
     * the extra cheese option, the modifier quantity increases to 2. If the buyer does not want
     * any cheese, the modifier quantity is set to 0.
     */
    quantity?: string | null;
}
