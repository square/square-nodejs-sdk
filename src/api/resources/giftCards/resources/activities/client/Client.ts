/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as Square from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Activities {
    export interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-07-16";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-07-16";
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Activities {
    protected readonly _options: Activities.Options;

    constructor(_options: Activities.Options = {}) {
        this._options = _options;
    }

    /**
     * Lists gift card activities. By default, you get gift card activities for all
     * gift cards in the seller's account. You can optionally specify query parameters to
     * filter the list. For example, you can get a list of gift card activities for a gift card,
     * for all gift cards in a specific region, or for activities within a time window.
     *
     * @param {Square.giftCards.ListActivitiesRequest} request
     * @param {Activities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.giftCards.activities.list()
     */
    public async list(
        request: Square.giftCards.ListActivitiesRequest = {},
        requestOptions?: Activities.RequestOptions,
    ): Promise<core.Page<Square.GiftCardActivity>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Square.giftCards.ListActivitiesRequest,
            ): Promise<core.WithRawResponse<Square.ListGiftCardActivitiesResponse>> => {
                const {
                    gift_card_id: giftCardId,
                    type: type_,
                    location_id: locationId,
                    begin_time: beginTime,
                    end_time: endTime,
                    limit,
                    cursor,
                    sort_order: sortOrder,
                } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (giftCardId !== undefined) {
                    _queryParams["gift_card_id"] = giftCardId;
                }
                if (type_ !== undefined) {
                    _queryParams["type"] = type_;
                }
                if (locationId !== undefined) {
                    _queryParams["location_id"] = locationId;
                }
                if (beginTime !== undefined) {
                    _queryParams["begin_time"] = beginTime;
                }
                if (endTime !== undefined) {
                    _queryParams["end_time"] = endTime;
                }
                if (limit !== undefined) {
                    _queryParams["limit"] = limit?.toString() ?? null;
                }
                if (cursor !== undefined) {
                    _queryParams["cursor"] = cursor;
                }
                if (sortOrder !== undefined) {
                    _queryParams["sort_order"] = sortOrder;
                }
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SquareEnvironment.Production,
                        "v2/gift-cards/activities",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "Square-Version": requestOptions?.version ?? "2025-07-16",
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as Square.ListGiftCardActivitiesResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SquareError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SquareError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SquareTimeoutError(
                            "Timeout exceeded when calling GET /v2/gift-cards/activities.",
                        );
                    case "unknown":
                        throw new errors.SquareError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Square.ListGiftCardActivitiesResponse, Square.GiftCardActivity>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.cursor != null && !(typeof response?.cursor === "string" && response?.cursor === ""),
            getItems: (response) => response?.gift_card_activities ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "cursor", response?.cursor));
            },
        });
    }

    /**
     * Creates a gift card activity to manage the balance or state of a [gift card](entity:GiftCard).
     * For example, create an `ACTIVATE` activity to activate a gift card with an initial balance before first use.
     *
     * @param {Square.giftCards.CreateGiftCardActivityRequest} request
     * @param {Activities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.giftCards.activities.create({
     *         idempotency_key: "U16kfr-kA70er-q4Rsym-7U7NnY",
     *         gift_card_activity: {
     *             type: "ACTIVATE",
     *             location_id: "81FN9BNFZTKS4",
     *             gift_card_id: "gftc:6d55a72470d940c6ba09c0ab8ad08d20",
     *             activate_activity_details: {
     *                 order_id: "jJNGHm4gLI6XkFbwtiSLqK72KkAZY",
     *                 line_item_uid: "eIWl7X0nMuO9Ewbh0ChIx"
     *             }
     *         }
     *     })
     */
    public create(
        request: Square.giftCards.CreateGiftCardActivityRequest,
        requestOptions?: Activities.RequestOptions,
    ): core.HttpResponsePromise<Square.CreateGiftCardActivityResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Square.giftCards.CreateGiftCardActivityRequest,
        requestOptions?: Activities.RequestOptions,
    ): Promise<core.WithRawResponse<Square.CreateGiftCardActivityResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/gift-cards/activities",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-07-16",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Square.CreateGiftCardActivityResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/gift-cards/activities.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SQUARE_TOKEN"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
