/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
import * as serializers from "../../../../serialization/index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers";
import * as errors from "../../../../errors/index";

export declare namespace Payments {
    export interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-08-20";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-08-20";
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Payments {
    protected readonly _options: Payments.Options;

    constructor(_options: Payments.Options = {}) {
        this._options = _options;
    }

    /**
     * Retrieves a list of payments taken by the account making the request.
     *
     * Results are eventually consistent, and new payments or changes to payments might take several
     * seconds to appear.
     *
     * The maximum results per page is 100.
     *
     * @param {Square.ListPaymentsRequest} request
     * @param {Payments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.payments.list()
     */
    public async list(
        request: Square.ListPaymentsRequest = {},
        requestOptions?: Payments.RequestOptions,
    ): Promise<core.Page<Square.Payment>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (request: Square.ListPaymentsRequest): Promise<core.WithRawResponse<Square.ListPaymentsResponse>> => {
                const {
                    beginTime,
                    endTime,
                    sortOrder,
                    cursor,
                    locationId,
                    total,
                    last4,
                    cardBrand,
                    limit,
                    isOfflinePayment,
                    offlineBeginTime,
                    offlineEndTime,
                    updatedAtBeginTime,
                    updatedAtEndTime,
                    sortField,
                } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (beginTime !== undefined) {
                    _queryParams["begin_time"] = beginTime;
                }
                if (endTime !== undefined) {
                    _queryParams["end_time"] = endTime;
                }
                if (sortOrder !== undefined) {
                    _queryParams["sort_order"] = sortOrder;
                }
                if (cursor !== undefined) {
                    _queryParams["cursor"] = cursor;
                }
                if (locationId !== undefined) {
                    _queryParams["location_id"] = locationId;
                }
                if (total !== undefined) {
                    _queryParams["total"] = total?.toString() ?? null;
                }
                if (last4 !== undefined) {
                    _queryParams["last_4"] = last4;
                }
                if (cardBrand !== undefined) {
                    _queryParams["card_brand"] = cardBrand;
                }
                if (limit !== undefined) {
                    _queryParams["limit"] = limit?.toString() ?? null;
                }
                if (isOfflinePayment !== undefined) {
                    _queryParams["is_offline_payment"] = isOfflinePayment?.toString() ?? null;
                }
                if (offlineBeginTime !== undefined) {
                    _queryParams["offline_begin_time"] = offlineBeginTime;
                }
                if (offlineEndTime !== undefined) {
                    _queryParams["offline_end_time"] = offlineEndTime;
                }
                if (updatedAtBeginTime !== undefined) {
                    _queryParams["updated_at_begin_time"] = updatedAtBeginTime;
                }
                if (updatedAtEndTime !== undefined) {
                    _queryParams["updated_at_end_time"] = updatedAtEndTime;
                }
                if (sortField !== undefined) {
                    _queryParams["sort_field"] = serializers.ListPaymentsRequestSortField.jsonOrThrow(sortField, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    });
                }
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SquareEnvironment.Production,
                        "v2/payments",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "Square-Version": requestOptions?.version ?? "2025-08-20",
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: serializers.ListPaymentsResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SquareError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SquareError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SquareTimeoutError("Timeout exceeded when calling GET /v2/payments.");
                    case "unknown":
                        throw new errors.SquareError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Square.ListPaymentsResponse, Square.Payment>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.cursor != null && !(typeof response?.cursor === "string" && response?.cursor === ""),
            getItems: (response) => response?.payments ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "cursor", response?.cursor));
            },
        });
    }

    /**
     * Creates a payment using the provided source. You can use this endpoint
     * to charge a card (credit/debit card or
     * Square gift card) or record a payment that the seller received outside of Square
     * (cash payment from a buyer or a payment that an external entity
     * processed on behalf of the seller).
     *
     * The endpoint creates a
     * `Payment` object and returns it in the response.
     *
     * @param {Square.CreatePaymentRequest} request
     * @param {Payments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.payments.create({
     *         sourceId: "ccof:GaJGNaZa8x4OgDJn4GB",
     *         idempotencyKey: "7b0f3ec5-086a-4871-8f13-3c81b3875218",
     *         amountMoney: {
     *             amount: BigInt("1000"),
     *             currency: "USD"
     *         },
     *         appFeeMoney: {
     *             amount: BigInt("10"),
     *             currency: "USD"
     *         },
     *         autocomplete: true,
     *         customerId: "W92WH6P11H4Z77CTET0RNTGFW8",
     *         locationId: "L88917AVBK2S5",
     *         referenceId: "123456",
     *         note: "Brief description"
     *     })
     */
    public create(
        request: Square.CreatePaymentRequest,
        requestOptions?: Payments.RequestOptions,
    ): core.HttpResponsePromise<Square.CreatePaymentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Square.CreatePaymentRequest,
        requestOptions?: Payments.RequestOptions,
    ): Promise<core.WithRawResponse<Square.CreatePaymentResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/payments",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.CreatePaymentRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.CreatePaymentResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/payments.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Cancels (voids) a payment identified by the idempotency key that is specified in the
     * request.
     *
     * Use this method when the status of a `CreatePayment` request is unknown (for example, after you send a
     * `CreatePayment` request, a network error occurs and you do not get a response). In this case, you can
     * direct Square to cancel the payment using this endpoint. In the request, you provide the same
     * idempotency key that you provided in your `CreatePayment` request that you want to cancel. After
     * canceling the payment, you can submit your `CreatePayment` request again.
     *
     * Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint
     * returns successfully.
     *
     * @param {Square.CancelPaymentByIdempotencyKeyRequest} request
     * @param {Payments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.payments.cancelByIdempotencyKey({
     *         idempotencyKey: "a7e36d40-d24b-11e8-b568-0800200c9a66"
     *     })
     */
    public cancelByIdempotencyKey(
        request: Square.CancelPaymentByIdempotencyKeyRequest,
        requestOptions?: Payments.RequestOptions,
    ): core.HttpResponsePromise<Square.CancelPaymentByIdempotencyKeyResponse> {
        return core.HttpResponsePromise.fromPromise(this.__cancelByIdempotencyKey(request, requestOptions));
    }

    private async __cancelByIdempotencyKey(
        request: Square.CancelPaymentByIdempotencyKeyRequest,
        requestOptions?: Payments.RequestOptions,
    ): Promise<core.WithRawResponse<Square.CancelPaymentByIdempotencyKeyResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/payments/cancel",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.CancelPaymentByIdempotencyKeyRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.CancelPaymentByIdempotencyKeyResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/payments/cancel.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves details for a specific payment.
     *
     * @param {Square.GetPaymentsRequest} request
     * @param {Payments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.payments.get({
     *         paymentId: "payment_id"
     *     })
     */
    public get(
        request: Square.GetPaymentsRequest,
        requestOptions?: Payments.RequestOptions,
    ): core.HttpResponsePromise<Square.GetPaymentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(request, requestOptions));
    }

    private async __get(
        request: Square.GetPaymentsRequest,
        requestOptions?: Payments.RequestOptions,
    ): Promise<core.WithRawResponse<Square.GetPaymentResponse>> {
        const { paymentId } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/payments/${encodeURIComponent(paymentId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetPaymentResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling GET /v2/payments/{payment_id}.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates a payment with the APPROVED status.
     * You can update the `amount_money` and `tip_money` using this endpoint.
     *
     * @param {Square.UpdatePaymentRequest} request
     * @param {Payments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.payments.update({
     *         paymentId: "payment_id",
     *         payment: {
     *             amountMoney: {
     *                 amount: BigInt("1000"),
     *                 currency: "USD"
     *             },
     *             tipMoney: {
     *                 amount: BigInt("100"),
     *                 currency: "USD"
     *             },
     *             versionToken: "ODhwVQ35xwlzRuoZEwKXucfu7583sPTzK48c5zoGd0g6o"
     *         },
     *         idempotencyKey: "956f8b13-e4ec-45d6-85e8-d1d95ef0c5de"
     *     })
     */
    public update(
        request: Square.UpdatePaymentRequest,
        requestOptions?: Payments.RequestOptions,
    ): core.HttpResponsePromise<Square.UpdatePaymentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(request, requestOptions));
    }

    private async __update(
        request: Square.UpdatePaymentRequest,
        requestOptions?: Payments.RequestOptions,
    ): Promise<core.WithRawResponse<Square.UpdatePaymentResponse>> {
        const { paymentId, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/payments/${encodeURIComponent(paymentId)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.UpdatePaymentRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.UpdatePaymentResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling PUT /v2/payments/{payment_id}.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Cancels (voids) a payment. You can use this endpoint to cancel a payment with
     * the APPROVED `status`.
     *
     * @param {Square.CancelPaymentsRequest} request
     * @param {Payments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.payments.cancel({
     *         paymentId: "payment_id"
     *     })
     */
    public cancel(
        request: Square.CancelPaymentsRequest,
        requestOptions?: Payments.RequestOptions,
    ): core.HttpResponsePromise<Square.CancelPaymentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__cancel(request, requestOptions));
    }

    private async __cancel(
        request: Square.CancelPaymentsRequest,
        requestOptions?: Payments.RequestOptions,
    ): Promise<core.WithRawResponse<Square.CancelPaymentResponse>> {
        const { paymentId } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/payments/${encodeURIComponent(paymentId)}/cancel`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.CancelPaymentResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling POST /v2/payments/{payment_id}/cancel.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Completes (captures) a payment.
     * By default, payments are set to complete immediately after they are created.
     *
     * You can use this endpoint to complete a payment with the APPROVED `status`.
     *
     * @param {Square.CompletePaymentRequest} request
     * @param {Payments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.payments.complete({
     *         paymentId: "payment_id"
     *     })
     */
    public complete(
        request: Square.CompletePaymentRequest,
        requestOptions?: Payments.RequestOptions,
    ): core.HttpResponsePromise<Square.CompletePaymentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__complete(request, requestOptions));
    }

    private async __complete(
        request: Square.CompletePaymentRequest,
        requestOptions?: Payments.RequestOptions,
    ): Promise<core.WithRawResponse<Square.CompletePaymentResponse>> {
        const { paymentId, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/payments/${encodeURIComponent(paymentId)}/complete`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.CompletePaymentRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.CompletePaymentResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling POST /v2/payments/{payment_id}/complete.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SQUARE_TOKEN"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
