/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
import * as serializers from "../../../../serialization/index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers";
import * as errors from "../../../../errors/index";

export declare namespace Channels {
    export interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-10-16";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-10-16";
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Channels {
    protected readonly _options: Channels.Options;

    constructor(_options: Channels.Options = {}) {
        this._options = _options;
    }

    /**
     *
     *
     * @param {Square.ListChannelsRequest} request
     * @param {Channels.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.channels.list({
     *         referenceType: "UNKNOWN_TYPE",
     *         referenceId: "reference_id",
     *         status: "ACTIVE",
     *         cursor: "cursor",
     *         limit: 1
     *     })
     */
    public async list(
        request: Square.ListChannelsRequest = {},
        requestOptions?: Channels.RequestOptions,
    ): Promise<core.Page<Square.Channel>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (request: Square.ListChannelsRequest): Promise<core.WithRawResponse<Square.ListChannelsResponse>> => {
                const { referenceType, referenceId, status, cursor, limit } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (referenceType !== undefined) {
                    _queryParams["reference_type"] = serializers.ReferenceType.jsonOrThrow(referenceType, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    });
                }
                if (referenceId !== undefined) {
                    _queryParams["reference_id"] = referenceId;
                }
                if (status !== undefined) {
                    _queryParams["status"] = serializers.ChannelStatus.jsonOrThrow(status, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    });
                }
                if (cursor !== undefined) {
                    _queryParams["cursor"] = cursor;
                }
                if (limit !== undefined) {
                    _queryParams["limit"] = limit?.toString() ?? null;
                }
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SquareEnvironment.Production,
                        "v2/channels",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "Square-Version": requestOptions?.version ?? "2025-10-16",
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: serializers.ListChannelsResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SquareError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SquareError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SquareTimeoutError("Timeout exceeded when calling GET /v2/channels.");
                    case "unknown":
                        throw new errors.SquareError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Square.ListChannelsResponse, Square.Channel>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.cursor != null && !(typeof response?.cursor === "string" && response?.cursor === ""),
            getItems: (response) => response?.channels ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "cursor", response?.cursor));
            },
        });
    }

    /**
     *
     *
     * @param {Square.BulkRetrieveChannelsRequest} request
     * @param {Channels.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.channels.bulkRetrieve({
     *         channelIds: ["CH_9C03D0B59", "CH_6X139B5MN", "NOT_EXISTING"]
     *     })
     */
    public bulkRetrieve(
        request: Square.BulkRetrieveChannelsRequest,
        requestOptions?: Channels.RequestOptions,
    ): core.HttpResponsePromise<Square.BulkRetrieveChannelsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__bulkRetrieve(request, requestOptions));
    }

    private async __bulkRetrieve(
        request: Square.BulkRetrieveChannelsRequest,
        requestOptions?: Channels.RequestOptions,
    ): Promise<core.WithRawResponse<Square.BulkRetrieveChannelsResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/channels/bulk-retrieve",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-10-16",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.BulkRetrieveChannelsRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.BulkRetrieveChannelsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/channels/bulk-retrieve.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     *
     *
     * @param {Square.GetChannelsRequest} request
     * @param {Channels.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.channels.get({
     *         channelId: "channel_id"
     *     })
     */
    public get(
        request: Square.GetChannelsRequest,
        requestOptions?: Channels.RequestOptions,
    ): core.HttpResponsePromise<Square.RetrieveChannelResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(request, requestOptions));
    }

    private async __get(
        request: Square.GetChannelsRequest,
        requestOptions?: Channels.RequestOptions,
    ): Promise<core.WithRawResponse<Square.RetrieveChannelResponse>> {
        const { channelId } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/channels/${encodeURIComponent(channelId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-10-16",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.RetrieveChannelResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling GET /v2/channels/{channel_id}.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SQUARE_TOKEN"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
