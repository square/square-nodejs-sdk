// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as environments from "../../../../../../environments";
import * as errors from "../../../../../../errors/index";
import * as serializers from "../../../../../../serialization/index";
import type * as Square from "../../../../../index";

export declare namespace WageSetting {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class WageSetting {
    protected readonly _options: WageSetting.Options;

    constructor(_options: WageSetting.Options = {}) {
        this._options = _options;
    }

    /**
     * Retrieves a `WageSetting` object for a team member specified
     * by `TeamMember.id`. For more information, see
     * [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrievewagesetting).
     *
     * Square recommends using [RetrieveTeamMember](api-endpoint:Team-RetrieveTeamMember) or [SearchTeamMembers](api-endpoint:Team-SearchTeamMembers)
     * to get this information directly from the `TeamMember.wage_setting` field.
     *
     * @param {Square.teamMembers.GetWageSettingRequest} request
     * @param {WageSetting.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.teamMembers.wageSetting.get({
     *         teamMemberId: "team_member_id"
     *     })
     */
    public get(
        request: Square.teamMembers.GetWageSettingRequest,
        requestOptions?: WageSetting.RequestOptions,
    ): core.HttpResponsePromise<Square.GetWageSettingResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(request, requestOptions));
    }

    private async __get(
        request: Square.teamMembers.GetWageSettingRequest,
        requestOptions?: WageSetting.RequestOptions,
    ): Promise<core.WithRawResponse<Square.GetWageSettingResponse>> {
        const { teamMemberId } = request;
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? "2025-10-16",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/team-members/${encodeURIComponent(teamMemberId)}/wage-setting`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetWageSettingResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling GET /v2/team-members/{team_member_id}/wage-setting.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates or updates a `WageSetting` object. The object is created if a
     * `WageSetting` with the specified `team_member_id` doesn't exist. Otherwise,
     * it fully replaces the `WageSetting` object for the team member.
     * The `WageSetting` is returned on a successful update. For more information, see
     * [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#create-or-update-a-wage-setting).
     *
     * Square recommends using [CreateTeamMember](api-endpoint:Team-CreateTeamMember) or [UpdateTeamMember](api-endpoint:Team-UpdateTeamMember)
     * to manage the `TeamMember.wage_setting` field directly.
     *
     * @param {Square.teamMembers.UpdateWageSettingRequest} request
     * @param {WageSetting.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.teamMembers.wageSetting.update({
     *         teamMemberId: "team_member_id",
     *         wageSetting: {
     *             jobAssignments: [{
     *                     jobTitle: "Manager",
     *                     payType: "SALARY",
     *                     annualRate: {
     *                         amount: BigInt("3000000"),
     *                         currency: "USD"
     *                     },
     *                     weeklyHours: 40
     *                 }, {
     *                     jobTitle: "Cashier",
     *                     payType: "HOURLY",
     *                     hourlyRate: {
     *                         amount: BigInt("2000"),
     *                         currency: "USD"
     *                     }
     *                 }],
     *             isOvertimeExempt: true
     *         }
     *     })
     */
    public update(
        request: Square.teamMembers.UpdateWageSettingRequest,
        requestOptions?: WageSetting.RequestOptions,
    ): core.HttpResponsePromise<Square.UpdateWageSettingResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(request, requestOptions));
    }

    private async __update(
        request: Square.teamMembers.UpdateWageSettingRequest,
        requestOptions?: WageSetting.RequestOptions,
    ): Promise<core.WithRawResponse<Square.UpdateWageSettingResponse>> {
        const { teamMemberId, ..._body } = request;
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? "2025-10-16",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/team-members/${encodeURIComponent(teamMemberId)}/wage-setting`,
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.teamMembers.UpdateWageSettingRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.UpdateWageSettingResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling PUT /v2/team-members/{team_member_id}/wage-setting.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env.SQUARE_TOKEN;
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
