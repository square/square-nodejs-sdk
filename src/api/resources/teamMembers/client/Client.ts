/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";
import { WageSetting } from "../resources/wageSetting/client/Client";

export declare namespace TeamMembers {
    export interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-01-23";
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-01-23";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class TeamMembers {
    protected _wageSetting: WageSetting | undefined;

    constructor(protected readonly _options: TeamMembers.Options = {}) {}

    public get wageSetting(): WageSetting {
        return (this._wageSetting ??= new WageSetting(this._options));
    }

    /**
     * Creates a single `TeamMember` object. The `TeamMember` object is returned on successful creates.
     * You must provide the following values in your request to this endpoint:
     * - `given_name`
     * - `family_name`
     *
     * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#createteammember).
     *
     * @param {Square.CreateTeamMemberRequest} request
     * @param {TeamMembers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.teamMembers.create({
     *         idempotencyKey: "idempotency-key-0",
     *         teamMember: {
     *             referenceId: "reference_id_1",
     *             status: "ACTIVE",
     *             givenName: "Joe",
     *             familyName: "Doe",
     *             emailAddress: "joe_doe@gmail.com",
     *             phoneNumber: "+14159283333",
     *             assignedLocations: {
     *                 assignmentType: "EXPLICIT_LOCATIONS",
     *                 locationIds: ["YSGH2WBKG94QZ", "GA2Y9HSJ8KRYT"]
     *             },
     *             wageSetting: {
     *                 jobAssignments: [{
     *                         payType: "SALARY",
     *                         annualRate: {
     *                             amount: 3000000,
     *                             currency: "USD"
     *                         },
     *                         weeklyHours: 40,
     *                         jobId: "FjS8x95cqHiMenw4f1NAUH4P"
     *                     }, {
     *                         payType: "HOURLY",
     *                         hourlyRate: {
     *                             amount: 2000,
     *                             currency: "USD"
     *                         },
     *                         jobId: "VDNpRv8da51NU8qZFC5zDWpF"
     *                     }],
     *                 isOvertimeExempt: true
     *             }
     *         }
     *     })
     */
    public async create(
        request: Square.CreateTeamMemberRequest,
        requestOptions?: TeamMembers.RequestOptions,
    ): Promise<Square.CreateTeamMemberResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/team-members",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? this._options?.version ?? "2025-01-23",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "square",
                "X-Fern-SDK-Version": "40.0.0",
                "User-Agent": "square/40.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.CreateTeamMemberRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.CreateTeamMemberResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/team-members.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Creates multiple `TeamMember` objects. The created `TeamMember` objects are returned on successful creates.
     * This process is non-transactional and processes as much of the request as possible. If one of the creates in
     * the request cannot be successfully processed, the request is not marked as failed, but the body of the response
     * contains explicit error information for the failed create.
     *
     * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-create-team-members).
     *
     * @param {Square.BatchCreateTeamMembersRequest} request
     * @param {TeamMembers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.teamMembers.batchCreate({
     *         teamMembers: {
     *             "idempotency-key-1": {
     *                 teamMember: {
     *                     referenceId: "reference_id_1",
     *                     givenName: "Joe",
     *                     familyName: "Doe",
     *                     emailAddress: "joe_doe@gmail.com",
     *                     phoneNumber: "+14159283333",
     *                     assignedLocations: {
     *                         assignmentType: "EXPLICIT_LOCATIONS",
     *                         locationIds: ["YSGH2WBKG94QZ", "GA2Y9HSJ8KRYT"]
     *                     }
     *                 }
     *             },
     *             "idempotency-key-2": {
     *                 teamMember: {
     *                     referenceId: "reference_id_2",
     *                     givenName: "Jane",
     *                     familyName: "Smith",
     *                     emailAddress: "jane_smith@gmail.com",
     *                     phoneNumber: "+14159223334",
     *                     assignedLocations: {
     *                         assignmentType: "ALL_CURRENT_AND_FUTURE_LOCATIONS"
     *                     }
     *                 }
     *             }
     *         }
     *     })
     */
    public async batchCreate(
        request: Square.BatchCreateTeamMembersRequest,
        requestOptions?: TeamMembers.RequestOptions,
    ): Promise<Square.BatchCreateTeamMembersResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/team-members/bulk-create",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? this._options?.version ?? "2025-01-23",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "square",
                "X-Fern-SDK-Version": "40.0.0",
                "User-Agent": "square/40.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.BatchCreateTeamMembersRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.BatchCreateTeamMembersResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/team-members/bulk-create.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates multiple `TeamMember` objects. The updated `TeamMember` objects are returned on successful updates.
     * This process is non-transactional and processes as much of the request as possible. If one of the updates in
     * the request cannot be successfully processed, the request is not marked as failed, but the body of the response
     * contains explicit error information for the failed update.
     * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-update-team-members).
     *
     * @param {Square.BatchUpdateTeamMembersRequest} request
     * @param {TeamMembers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.teamMembers.batchUpdate({
     *         teamMembers: {
     *             "AFMwA08kR-MIF-3Vs0OE": {
     *                 teamMember: {
     *                     referenceId: "reference_id_2",
     *                     isOwner: false,
     *                     status: "ACTIVE",
     *                     givenName: "Jane",
     *                     familyName: "Smith",
     *                     emailAddress: "jane_smith@gmail.com",
     *                     phoneNumber: "+14159223334",
     *                     assignedLocations: {
     *                         assignmentType: "ALL_CURRENT_AND_FUTURE_LOCATIONS"
     *                     }
     *                 }
     *             },
     *             "fpgteZNMaf0qOK-a4t6P": {
     *                 teamMember: {
     *                     referenceId: "reference_id_1",
     *                     isOwner: false,
     *                     status: "ACTIVE",
     *                     givenName: "Joe",
     *                     familyName: "Doe",
     *                     emailAddress: "joe_doe@gmail.com",
     *                     phoneNumber: "+14159283333",
     *                     assignedLocations: {
     *                         assignmentType: "EXPLICIT_LOCATIONS",
     *                         locationIds: ["YSGH2WBKG94QZ", "GA2Y9HSJ8KRYT"]
     *                     }
     *                 }
     *             }
     *         }
     *     })
     */
    public async batchUpdate(
        request: Square.BatchUpdateTeamMembersRequest,
        requestOptions?: TeamMembers.RequestOptions,
    ): Promise<Square.BatchUpdateTeamMembersResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/team-members/bulk-update",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? this._options?.version ?? "2025-01-23",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "square",
                "X-Fern-SDK-Version": "40.0.0",
                "User-Agent": "square/40.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.BatchUpdateTeamMembersRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.BatchUpdateTeamMembersResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/team-members/bulk-update.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Returns a paginated list of `TeamMember` objects for a business.
     * The list can be filtered by location IDs, `ACTIVE` or `INACTIVE` status, or whether
     * the team member is the Square account owner.
     *
     * @param {Square.SearchTeamMembersRequest} request
     * @param {TeamMembers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.teamMembers.search({
     *         query: {
     *             filter: {
     *                 locationIds: ["0G5P3VGACMMQZ"],
     *                 status: "ACTIVE"
     *             }
     *         },
     *         limit: 10
     *     })
     */
    public async search(
        request: Square.SearchTeamMembersRequest = {},
        requestOptions?: TeamMembers.RequestOptions,
    ): Promise<Square.SearchTeamMembersResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/team-members/search",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? this._options?.version ?? "2025-01-23",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "square",
                "X-Fern-SDK-Version": "40.0.0",
                "User-Agent": "square/40.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SearchTeamMembersRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.SearchTeamMembersResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/team-members/search.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieves a `TeamMember` object for the given `TeamMember.id`.
     * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrieve-a-team-member).
     *
     * @param {Square.TeamMembersGetRequest} request
     * @param {TeamMembers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.teamMembers.get({
     *         teamMemberId: "team_member_id"
     *     })
     */
    public async get(
        request: Square.TeamMembersGetRequest,
        requestOptions?: TeamMembers.RequestOptions,
    ): Promise<Square.GetTeamMemberResponse> {
        const { teamMemberId } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/team-members/${encodeURIComponent(teamMemberId)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? this._options?.version ?? "2025-01-23",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "square",
                "X-Fern-SDK-Version": "40.0.0",
                "User-Agent": "square/40.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.GetTeamMemberResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling GET /v2/team-members/{team_member_id}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates a single `TeamMember` object. The `TeamMember` object is returned on successful updates.
     * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#update-a-team-member).
     *
     * @param {Square.TeamMembersUpdateRequest} request
     * @param {TeamMembers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.teamMembers.update({
     *         teamMemberId: "team_member_id",
     *         body: {
     *             teamMember: {
     *                 referenceId: "reference_id_1",
     *                 status: "ACTIVE",
     *                 givenName: "Joe",
     *                 familyName: "Doe",
     *                 emailAddress: "joe_doe@gmail.com",
     *                 phoneNumber: "+14159283333",
     *                 assignedLocations: {
     *                     assignmentType: "EXPLICIT_LOCATIONS",
     *                     locationIds: ["YSGH2WBKG94QZ", "GA2Y9HSJ8KRYT"]
     *                 }
     *             }
     *         }
     *     })
     */
    public async update(
        request: Square.TeamMembersUpdateRequest,
        requestOptions?: TeamMembers.RequestOptions,
    ): Promise<Square.UpdateTeamMemberResponse> {
        const { teamMemberId, body: _body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/team-members/${encodeURIComponent(teamMemberId)}`,
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? this._options?.version ?? "2025-01-23",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "square",
                "X-Fern-SDK-Version": "40.0.0",
                "User-Agent": "square/40.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.UpdateTeamMemberRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.UpdateTeamMemberResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling PUT /v2/team-members/{team_member_id}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SQUARE_TOKEN"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
