// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient";
import * as core from "../../../../core";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers";
import * as environments from "../../../../environments";
import * as errors from "../../../../errors/index";
import * as serializers from "../../../../serialization/index";
import type * as Square from "../../../index";
import { WageSetting } from "../resources/wageSetting/client/Client";

export declare namespace TeamMembers {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class TeamMembers {
    protected readonly _options: TeamMembers.Options;
    protected _wageSetting: WageSetting | undefined;

    constructor(_options: TeamMembers.Options = {}) {
        this._options = _options;
    }

    public get wageSetting(): WageSetting {
        return (this._wageSetting ??= new WageSetting(this._options));
    }

    /**
     * Creates a single `TeamMember` object. The `TeamMember` object is returned on successful creates.
     * You must provide the following values in your request to this endpoint:
     * - `given_name`
     * - `family_name`
     *
     * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#createteammember).
     *
     * @param {Square.CreateTeamMemberRequest} request
     * @param {TeamMembers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.teamMembers.create({
     *         idempotencyKey: "idempotency-key-0",
     *         teamMember: {
     *             referenceId: "reference_id_1",
     *             status: "ACTIVE",
     *             givenName: "Joe",
     *             familyName: "Doe",
     *             emailAddress: "joe_doe@gmail.com",
     *             phoneNumber: "+14159283333",
     *             assignedLocations: {
     *                 assignmentType: "EXPLICIT_LOCATIONS",
     *                 locationIds: ["YSGH2WBKG94QZ", "GA2Y9HSJ8KRYT"]
     *             },
     *             wageSetting: {
     *                 jobAssignments: [{
     *                         payType: "SALARY",
     *                         annualRate: {
     *                             amount: BigInt("3000000"),
     *                             currency: "USD"
     *                         },
     *                         weeklyHours: 40,
     *                         jobId: "FjS8x95cqHiMenw4f1NAUH4P"
     *                     }, {
     *                         payType: "HOURLY",
     *                         hourlyRate: {
     *                             amount: BigInt("2000"),
     *                             currency: "USD"
     *                         },
     *                         jobId: "VDNpRv8da51NU8qZFC5zDWpF"
     *                     }],
     *                 isOvertimeExempt: true
     *             }
     *         }
     *     })
     */
    public create(
        request: Square.CreateTeamMemberRequest,
        requestOptions?: TeamMembers.RequestOptions,
    ): core.HttpResponsePromise<Square.CreateTeamMemberResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Square.CreateTeamMemberRequest,
        requestOptions?: TeamMembers.RequestOptions,
    ): Promise<core.WithRawResponse<Square.CreateTeamMemberResponse>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? "2025-10-16",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/team-members",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.CreateTeamMemberRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.CreateTeamMemberResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/team-members.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates multiple `TeamMember` objects. The created `TeamMember` objects are returned on successful creates.
     * This process is non-transactional and processes as much of the request as possible. If one of the creates in
     * the request cannot be successfully processed, the request is not marked as failed, but the body of the response
     * contains explicit error information for the failed create.
     *
     * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-create-team-members).
     *
     * @param {Square.BatchCreateTeamMembersRequest} request
     * @param {TeamMembers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.teamMembers.batchCreate({
     *         teamMembers: {
     *             "idempotency-key-1": {
     *                 teamMember: {
     *                     referenceId: "reference_id_1",
     *                     givenName: "Joe",
     *                     familyName: "Doe",
     *                     emailAddress: "joe_doe@gmail.com",
     *                     phoneNumber: "+14159283333",
     *                     assignedLocations: {
     *                         assignmentType: "EXPLICIT_LOCATIONS",
     *                         locationIds: ["YSGH2WBKG94QZ", "GA2Y9HSJ8KRYT"]
     *                     }
     *                 }
     *             },
     *             "idempotency-key-2": {
     *                 teamMember: {
     *                     referenceId: "reference_id_2",
     *                     givenName: "Jane",
     *                     familyName: "Smith",
     *                     emailAddress: "jane_smith@gmail.com",
     *                     phoneNumber: "+14159223334",
     *                     assignedLocations: {
     *                         assignmentType: "ALL_CURRENT_AND_FUTURE_LOCATIONS"
     *                     }
     *                 }
     *             }
     *         }
     *     })
     */
    public batchCreate(
        request: Square.BatchCreateTeamMembersRequest,
        requestOptions?: TeamMembers.RequestOptions,
    ): core.HttpResponsePromise<Square.BatchCreateTeamMembersResponse> {
        return core.HttpResponsePromise.fromPromise(this.__batchCreate(request, requestOptions));
    }

    private async __batchCreate(
        request: Square.BatchCreateTeamMembersRequest,
        requestOptions?: TeamMembers.RequestOptions,
    ): Promise<core.WithRawResponse<Square.BatchCreateTeamMembersResponse>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? "2025-10-16",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/team-members/bulk-create",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.BatchCreateTeamMembersRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.BatchCreateTeamMembersResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/team-members/bulk-create.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates multiple `TeamMember` objects. The updated `TeamMember` objects are returned on successful updates.
     * This process is non-transactional and processes as much of the request as possible. If one of the updates in
     * the request cannot be successfully processed, the request is not marked as failed, but the body of the response
     * contains explicit error information for the failed update.
     * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-update-team-members).
     *
     * @param {Square.BatchUpdateTeamMembersRequest} request
     * @param {TeamMembers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.teamMembers.batchUpdate({
     *         teamMembers: {
     *             "AFMwA08kR-MIF-3Vs0OE": {
     *                 teamMember: {
     *                     referenceId: "reference_id_2",
     *                     isOwner: false,
     *                     status: "ACTIVE",
     *                     givenName: "Jane",
     *                     familyName: "Smith",
     *                     emailAddress: "jane_smith@gmail.com",
     *                     phoneNumber: "+14159223334",
     *                     assignedLocations: {
     *                         assignmentType: "ALL_CURRENT_AND_FUTURE_LOCATIONS"
     *                     }
     *                 }
     *             },
     *             "fpgteZNMaf0qOK-a4t6P": {
     *                 teamMember: {
     *                     referenceId: "reference_id_1",
     *                     isOwner: false,
     *                     status: "ACTIVE",
     *                     givenName: "Joe",
     *                     familyName: "Doe",
     *                     emailAddress: "joe_doe@gmail.com",
     *                     phoneNumber: "+14159283333",
     *                     assignedLocations: {
     *                         assignmentType: "EXPLICIT_LOCATIONS",
     *                         locationIds: ["YSGH2WBKG94QZ", "GA2Y9HSJ8KRYT"]
     *                     }
     *                 }
     *             }
     *         }
     *     })
     */
    public batchUpdate(
        request: Square.BatchUpdateTeamMembersRequest,
        requestOptions?: TeamMembers.RequestOptions,
    ): core.HttpResponsePromise<Square.BatchUpdateTeamMembersResponse> {
        return core.HttpResponsePromise.fromPromise(this.__batchUpdate(request, requestOptions));
    }

    private async __batchUpdate(
        request: Square.BatchUpdateTeamMembersRequest,
        requestOptions?: TeamMembers.RequestOptions,
    ): Promise<core.WithRawResponse<Square.BatchUpdateTeamMembersResponse>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? "2025-10-16",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/team-members/bulk-update",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.BatchUpdateTeamMembersRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.BatchUpdateTeamMembersResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/team-members/bulk-update.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns a paginated list of `TeamMember` objects for a business.
     * The list can be filtered by location IDs, `ACTIVE` or `INACTIVE` status, or whether
     * the team member is the Square account owner.
     *
     * @param {Square.SearchTeamMembersRequest} request
     * @param {TeamMembers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.teamMembers.search({
     *         query: {
     *             filter: {
     *                 locationIds: ["0G5P3VGACMMQZ"],
     *                 status: "ACTIVE"
     *             }
     *         },
     *         limit: 10
     *     })
     */
    public search(
        request: Square.SearchTeamMembersRequest = {},
        requestOptions?: TeamMembers.RequestOptions,
    ): core.HttpResponsePromise<Square.SearchTeamMembersResponse> {
        return core.HttpResponsePromise.fromPromise(this.__search(request, requestOptions));
    }

    private async __search(
        request: Square.SearchTeamMembersRequest = {},
        requestOptions?: TeamMembers.RequestOptions,
    ): Promise<core.WithRawResponse<Square.SearchTeamMembersResponse>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? "2025-10-16",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/team-members/search",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.SearchTeamMembersRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.SearchTeamMembersResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/team-members/search.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves a `TeamMember` object for the given `TeamMember.id`.
     * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrieve-a-team-member).
     *
     * @param {Square.GetTeamMembersRequest} request
     * @param {TeamMembers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.teamMembers.get({
     *         teamMemberId: "team_member_id"
     *     })
     */
    public get(
        request: Square.GetTeamMembersRequest,
        requestOptions?: TeamMembers.RequestOptions,
    ): core.HttpResponsePromise<Square.GetTeamMemberResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(request, requestOptions));
    }

    private async __get(
        request: Square.GetTeamMembersRequest,
        requestOptions?: TeamMembers.RequestOptions,
    ): Promise<core.WithRawResponse<Square.GetTeamMemberResponse>> {
        const { teamMemberId } = request;
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? "2025-10-16",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/team-members/${encodeURIComponent(teamMemberId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetTeamMemberResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling GET /v2/team-members/{team_member_id}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates a single `TeamMember` object. The `TeamMember` object is returned on successful updates.
     * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#update-a-team-member).
     *
     * @param {Square.UpdateTeamMembersRequest} request
     * @param {TeamMembers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.teamMembers.update({
     *         teamMemberId: "team_member_id",
     *         body: {
     *             teamMember: {
     *                 referenceId: "reference_id_1",
     *                 status: "ACTIVE",
     *                 givenName: "Joe",
     *                 familyName: "Doe",
     *                 emailAddress: "joe_doe@gmail.com",
     *                 phoneNumber: "+14159283333",
     *                 assignedLocations: {
     *                     assignmentType: "EXPLICIT_LOCATIONS",
     *                     locationIds: ["YSGH2WBKG94QZ", "GA2Y9HSJ8KRYT"]
     *                 },
     *                 wageSetting: {
     *                     jobAssignments: [{
     *                             payType: "SALARY",
     *                             annualRate: {
     *                                 amount: BigInt("3000000"),
     *                                 currency: "USD"
     *                             },
     *                             weeklyHours: 40,
     *                             jobId: "FjS8x95cqHiMenw4f1NAUH4P"
     *                         }, {
     *                             payType: "HOURLY",
     *                             hourlyRate: {
     *                                 amount: BigInt("1200"),
     *                                 currency: "USD"
     *                             },
     *                             jobId: "VDNpRv8da51NU8qZFC5zDWpF"
     *                         }],
     *                     isOvertimeExempt: true
     *                 }
     *             }
     *         }
     *     })
     */
    public update(
        request: Square.UpdateTeamMembersRequest,
        requestOptions?: TeamMembers.RequestOptions,
    ): core.HttpResponsePromise<Square.UpdateTeamMemberResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(request, requestOptions));
    }

    private async __update(
        request: Square.UpdateTeamMembersRequest,
        requestOptions?: TeamMembers.RequestOptions,
    ): Promise<core.WithRawResponse<Square.UpdateTeamMemberResponse>> {
        const { teamMemberId, body: _body } = request;
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? "2025-10-16",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/team-members/${encodeURIComponent(teamMemberId)}`,
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.UpdateTeamMemberRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.UpdateTeamMemberResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling PUT /v2/team-members/{team_member_id}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env.SQUARE_TOKEN;
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
