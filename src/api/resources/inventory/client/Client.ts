/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Inventory {
    export interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-08-20";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-08-20";
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Inventory {
    protected readonly _options: Inventory.Options;

    constructor(_options: Inventory.Options = {}) {
        this._options = _options;
    }

    /**
     * Deprecated version of [RetrieveInventoryAdjustment](api-endpoint:Inventory-RetrieveInventoryAdjustment) after the endpoint URL
     * is updated to conform to the standard convention.
     *
     * @param {Square.DeprecatedGetAdjustmentInventoryRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.deprecatedGetAdjustment({
     *         adjustmentId: "adjustment_id"
     *     })
     */
    public deprecatedGetAdjustment(
        request: Square.DeprecatedGetAdjustmentInventoryRequest,
        requestOptions?: Inventory.RequestOptions,
    ): core.HttpResponsePromise<Square.GetInventoryAdjustmentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deprecatedGetAdjustment(request, requestOptions));
    }

    private async __deprecatedGetAdjustment(
        request: Square.DeprecatedGetAdjustmentInventoryRequest,
        requestOptions?: Inventory.RequestOptions,
    ): Promise<core.WithRawResponse<Square.GetInventoryAdjustmentResponse>> {
        const { adjustmentId } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/inventory/adjustment/${encodeURIComponent(adjustmentId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetInventoryAdjustmentResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling GET /v2/inventory/adjustment/{adjustment_id}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns the [InventoryAdjustment](entity:InventoryAdjustment) object
     * with the provided `adjustment_id`.
     *
     * @param {Square.GetAdjustmentInventoryRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.getAdjustment({
     *         adjustmentId: "adjustment_id"
     *     })
     */
    public getAdjustment(
        request: Square.GetAdjustmentInventoryRequest,
        requestOptions?: Inventory.RequestOptions,
    ): core.HttpResponsePromise<Square.GetInventoryAdjustmentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getAdjustment(request, requestOptions));
    }

    private async __getAdjustment(
        request: Square.GetAdjustmentInventoryRequest,
        requestOptions?: Inventory.RequestOptions,
    ): Promise<core.WithRawResponse<Square.GetInventoryAdjustmentResponse>> {
        const { adjustmentId } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/inventory/adjustments/${encodeURIComponent(adjustmentId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetInventoryAdjustmentResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling GET /v2/inventory/adjustments/{adjustment_id}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deprecated version of [BatchChangeInventory](api-endpoint:Inventory-BatchChangeInventory) after the endpoint URL
     * is updated to conform to the standard convention.
     *
     * @param {Square.BatchChangeInventoryRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.deprecatedBatchChange({
     *         idempotencyKey: "8fc6a5b0-9fe8-4b46-b46b-2ef95793abbe",
     *         changes: [{
     *                 type: "PHYSICAL_COUNT",
     *                 physicalCount: {
     *                     referenceId: "1536bfbf-efed-48bf-b17d-a197141b2a92",
     *                     catalogObjectId: "W62UWFY35CWMYGVWK6TWJDNI",
     *                     state: "IN_STOCK",
     *                     locationId: "C6W5YS5QM06F5",
     *                     quantity: "53",
     *                     teamMemberId: "LRK57NSQ5X7PUD05",
     *                     occurredAt: "2016-11-16T22:25:24.878Z"
     *                 }
     *             }],
     *         ignoreUnchangedCounts: true
     *     })
     */
    public deprecatedBatchChange(
        request: Square.BatchChangeInventoryRequest,
        requestOptions?: Inventory.RequestOptions,
    ): core.HttpResponsePromise<Square.BatchChangeInventoryResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deprecatedBatchChange(request, requestOptions));
    }

    private async __deprecatedBatchChange(
        request: Square.BatchChangeInventoryRequest,
        requestOptions?: Inventory.RequestOptions,
    ): Promise<core.WithRawResponse<Square.BatchChangeInventoryResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/inventory/batch-change",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.BatchChangeInventoryRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.BatchChangeInventoryResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/inventory/batch-change.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deprecated version of [BatchRetrieveInventoryChanges](api-endpoint:Inventory-BatchRetrieveInventoryChanges) after the endpoint URL
     * is updated to conform to the standard convention.
     *
     * @param {Square.BatchRetrieveInventoryChangesRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.deprecatedBatchGetChanges({
     *         catalogObjectIds: ["W62UWFY35CWMYGVWK6TWJDNI"],
     *         locationIds: ["C6W5YS5QM06F5"],
     *         types: ["PHYSICAL_COUNT"],
     *         states: ["IN_STOCK"],
     *         updatedAfter: "2016-11-01T00:00:00.000Z",
     *         updatedBefore: "2016-12-01T00:00:00.000Z"
     *     })
     */
    public deprecatedBatchGetChanges(
        request: Square.BatchRetrieveInventoryChangesRequest,
        requestOptions?: Inventory.RequestOptions,
    ): core.HttpResponsePromise<Square.BatchGetInventoryChangesResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deprecatedBatchGetChanges(request, requestOptions));
    }

    private async __deprecatedBatchGetChanges(
        request: Square.BatchRetrieveInventoryChangesRequest,
        requestOptions?: Inventory.RequestOptions,
    ): Promise<core.WithRawResponse<Square.BatchGetInventoryChangesResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/inventory/batch-retrieve-changes",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.BatchRetrieveInventoryChangesRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.BatchGetInventoryChangesResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling POST /v2/inventory/batch-retrieve-changes.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deprecated version of [BatchRetrieveInventoryCounts](api-endpoint:Inventory-BatchRetrieveInventoryCounts) after the endpoint URL
     * is updated to conform to the standard convention.
     *
     * @param {Square.BatchGetInventoryCountsRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.deprecatedBatchGetCounts({
     *         catalogObjectIds: ["W62UWFY35CWMYGVWK6TWJDNI"],
     *         locationIds: ["59TNP9SA8VGDA"],
     *         updatedAfter: "2016-11-16T00:00:00.000Z"
     *     })
     */
    public deprecatedBatchGetCounts(
        request: Square.BatchGetInventoryCountsRequest,
        requestOptions?: Inventory.RequestOptions,
    ): core.HttpResponsePromise<Square.BatchGetInventoryCountsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deprecatedBatchGetCounts(request, requestOptions));
    }

    private async __deprecatedBatchGetCounts(
        request: Square.BatchGetInventoryCountsRequest,
        requestOptions?: Inventory.RequestOptions,
    ): Promise<core.WithRawResponse<Square.BatchGetInventoryCountsResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/inventory/batch-retrieve-counts",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.BatchGetInventoryCountsRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.BatchGetInventoryCountsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling POST /v2/inventory/batch-retrieve-counts.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Applies adjustments and counts to the provided item quantities.
     *
     * On success: returns the current calculated counts for all objects
     * referenced in the request.
     * On failure: returns a list of related errors.
     *
     * @param {Square.BatchChangeInventoryRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.batchCreateChanges({
     *         idempotencyKey: "8fc6a5b0-9fe8-4b46-b46b-2ef95793abbe",
     *         changes: [{
     *                 type: "PHYSICAL_COUNT",
     *                 physicalCount: {
     *                     referenceId: "1536bfbf-efed-48bf-b17d-a197141b2a92",
     *                     catalogObjectId: "W62UWFY35CWMYGVWK6TWJDNI",
     *                     state: "IN_STOCK",
     *                     locationId: "C6W5YS5QM06F5",
     *                     quantity: "53",
     *                     teamMemberId: "LRK57NSQ5X7PUD05",
     *                     occurredAt: "2016-11-16T22:25:24.878Z"
     *                 }
     *             }],
     *         ignoreUnchangedCounts: true
     *     })
     */
    public batchCreateChanges(
        request: Square.BatchChangeInventoryRequest,
        requestOptions?: Inventory.RequestOptions,
    ): core.HttpResponsePromise<Square.BatchChangeInventoryResponse> {
        return core.HttpResponsePromise.fromPromise(this.__batchCreateChanges(request, requestOptions));
    }

    private async __batchCreateChanges(
        request: Square.BatchChangeInventoryRequest,
        requestOptions?: Inventory.RequestOptions,
    ): Promise<core.WithRawResponse<Square.BatchChangeInventoryResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/inventory/changes/batch-create",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.BatchChangeInventoryRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.BatchChangeInventoryResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling POST /v2/inventory/changes/batch-create.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns historical physical counts and adjustments based on the
     * provided filter criteria.
     *
     * Results are paginated and sorted in ascending order according their
     * `occurred_at` timestamp (oldest first).
     *
     * BatchRetrieveInventoryChanges is a catch-all query endpoint for queries
     * that cannot be handled by other, simpler endpoints.
     *
     * @param {Square.BatchRetrieveInventoryChangesRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.batchGetChanges({
     *         catalogObjectIds: ["W62UWFY35CWMYGVWK6TWJDNI"],
     *         locationIds: ["C6W5YS5QM06F5"],
     *         types: ["PHYSICAL_COUNT"],
     *         states: ["IN_STOCK"],
     *         updatedAfter: "2016-11-01T00:00:00.000Z",
     *         updatedBefore: "2016-12-01T00:00:00.000Z"
     *     })
     */
    public async batchGetChanges(
        request: Square.BatchRetrieveInventoryChangesRequest,
        requestOptions?: Inventory.RequestOptions,
    ): Promise<core.Page<Square.InventoryChange>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Square.BatchRetrieveInventoryChangesRequest,
            ): Promise<core.WithRawResponse<Square.BatchGetInventoryChangesResponse>> => {
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SquareEnvironment.Production,
                        "v2/inventory/changes/batch-retrieve",
                    ),
                    method: "POST",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "Square-Version": requestOptions?.version ?? "2025-08-20",
                        }),
                        requestOptions?.headers,
                    ),
                    contentType: "application/json",
                    requestType: "json",
                    body: serializers.BatchRetrieveInventoryChangesRequest.jsonOrThrow(request, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    }),
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: serializers.BatchGetInventoryChangesResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SquareError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SquareError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SquareTimeoutError(
                            "Timeout exceeded when calling POST /v2/inventory/changes/batch-retrieve.",
                        );
                    case "unknown":
                        throw new errors.SquareError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Square.BatchGetInventoryChangesResponse, Square.InventoryChange>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.cursor != null && !(typeof response?.cursor === "string" && response?.cursor === ""),
            getItems: (response) => response?.changes ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "cursor", response?.cursor));
            },
        });
    }

    /**
     * Returns current counts for the provided
     * [CatalogObject](entity:CatalogObject)s at the requested
     * [Location](entity:Location)s.
     *
     * Results are paginated and sorted in descending order according to their
     * `calculated_at` timestamp (newest first).
     *
     * When `updated_after` is specified, only counts that have changed since that
     * time (based on the server timestamp for the most recent change) are
     * returned. This allows clients to perform a "sync" operation, for example
     * in response to receiving a Webhook notification.
     *
     * @param {Square.BatchGetInventoryCountsRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.batchGetCounts({
     *         catalogObjectIds: ["W62UWFY35CWMYGVWK6TWJDNI"],
     *         locationIds: ["59TNP9SA8VGDA"],
     *         updatedAfter: "2016-11-16T00:00:00.000Z"
     *     })
     */
    public async batchGetCounts(
        request: Square.BatchGetInventoryCountsRequest,
        requestOptions?: Inventory.RequestOptions,
    ): Promise<core.Page<Square.InventoryCount>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Square.BatchGetInventoryCountsRequest,
            ): Promise<core.WithRawResponse<Square.BatchGetInventoryCountsResponse>> => {
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SquareEnvironment.Production,
                        "v2/inventory/counts/batch-retrieve",
                    ),
                    method: "POST",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "Square-Version": requestOptions?.version ?? "2025-08-20",
                        }),
                        requestOptions?.headers,
                    ),
                    contentType: "application/json",
                    requestType: "json",
                    body: serializers.BatchGetInventoryCountsRequest.jsonOrThrow(request, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    }),
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: serializers.BatchGetInventoryCountsResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SquareError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SquareError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SquareTimeoutError(
                            "Timeout exceeded when calling POST /v2/inventory/counts/batch-retrieve.",
                        );
                    case "unknown":
                        throw new errors.SquareError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Square.BatchGetInventoryCountsResponse, Square.InventoryCount>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.cursor != null && !(typeof response?.cursor === "string" && response?.cursor === ""),
            getItems: (response) => response?.counts ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "cursor", response?.cursor));
            },
        });
    }

    /**
     * Deprecated version of [RetrieveInventoryPhysicalCount](api-endpoint:Inventory-RetrieveInventoryPhysicalCount) after the endpoint URL
     * is updated to conform to the standard convention.
     *
     * @param {Square.DeprecatedGetPhysicalCountInventoryRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.deprecatedGetPhysicalCount({
     *         physicalCountId: "physical_count_id"
     *     })
     */
    public deprecatedGetPhysicalCount(
        request: Square.DeprecatedGetPhysicalCountInventoryRequest,
        requestOptions?: Inventory.RequestOptions,
    ): core.HttpResponsePromise<Square.GetInventoryPhysicalCountResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deprecatedGetPhysicalCount(request, requestOptions));
    }

    private async __deprecatedGetPhysicalCount(
        request: Square.DeprecatedGetPhysicalCountInventoryRequest,
        requestOptions?: Inventory.RequestOptions,
    ): Promise<core.WithRawResponse<Square.GetInventoryPhysicalCountResponse>> {
        const { physicalCountId } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/inventory/physical-count/${encodeURIComponent(physicalCountId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetInventoryPhysicalCountResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling GET /v2/inventory/physical-count/{physical_count_id}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns the [InventoryPhysicalCount](entity:InventoryPhysicalCount)
     * object with the provided `physical_count_id`.
     *
     * @param {Square.GetPhysicalCountInventoryRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.getPhysicalCount({
     *         physicalCountId: "physical_count_id"
     *     })
     */
    public getPhysicalCount(
        request: Square.GetPhysicalCountInventoryRequest,
        requestOptions?: Inventory.RequestOptions,
    ): core.HttpResponsePromise<Square.GetInventoryPhysicalCountResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getPhysicalCount(request, requestOptions));
    }

    private async __getPhysicalCount(
        request: Square.GetPhysicalCountInventoryRequest,
        requestOptions?: Inventory.RequestOptions,
    ): Promise<core.WithRawResponse<Square.GetInventoryPhysicalCountResponse>> {
        const { physicalCountId } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/inventory/physical-counts/${encodeURIComponent(physicalCountId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetInventoryPhysicalCountResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling GET /v2/inventory/physical-counts/{physical_count_id}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns the [InventoryTransfer](entity:InventoryTransfer) object
     * with the provided `transfer_id`.
     *
     * @param {Square.GetTransferInventoryRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.getTransfer({
     *         transferId: "transfer_id"
     *     })
     */
    public getTransfer(
        request: Square.GetTransferInventoryRequest,
        requestOptions?: Inventory.RequestOptions,
    ): core.HttpResponsePromise<Square.GetInventoryTransferResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getTransfer(request, requestOptions));
    }

    private async __getTransfer(
        request: Square.GetTransferInventoryRequest,
        requestOptions?: Inventory.RequestOptions,
    ): Promise<core.WithRawResponse<Square.GetInventoryTransferResponse>> {
        const { transferId } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/inventory/transfers/${encodeURIComponent(transferId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetInventoryTransferResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling GET /v2/inventory/transfers/{transfer_id}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves the current calculated stock count for a given
     * [CatalogObject](entity:CatalogObject) at a given set of
     * [Location](entity:Location)s. Responses are paginated and unsorted.
     * For more sophisticated queries, use a batch endpoint.
     *
     * @param {Square.GetInventoryRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.get({
     *         catalogObjectId: "catalog_object_id"
     *     })
     */
    public async get(
        request: Square.GetInventoryRequest,
        requestOptions?: Inventory.RequestOptions,
    ): Promise<core.Page<Square.InventoryCount>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Square.GetInventoryRequest,
            ): Promise<core.WithRawResponse<Square.GetInventoryCountResponse>> => {
                const { catalogObjectId, locationIds, cursor } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (locationIds !== undefined) {
                    _queryParams["location_ids"] = locationIds;
                }
                if (cursor !== undefined) {
                    _queryParams["cursor"] = cursor;
                }
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SquareEnvironment.Production,
                        `v2/inventory/${encodeURIComponent(catalogObjectId)}`,
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "Square-Version": requestOptions?.version ?? "2025-08-20",
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: serializers.GetInventoryCountResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SquareError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SquareError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SquareTimeoutError(
                            "Timeout exceeded when calling GET /v2/inventory/{catalog_object_id}.",
                        );
                    case "unknown":
                        throw new errors.SquareError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Square.GetInventoryCountResponse, Square.InventoryCount>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.cursor != null && !(typeof response?.cursor === "string" && response?.cursor === ""),
            getItems: (response) => response?.counts ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "cursor", response?.cursor));
            },
        });
    }

    /**
     * Returns a set of physical counts and inventory adjustments for the
     * provided [CatalogObject](entity:CatalogObject) at the requested
     * [Location](entity:Location)s.
     *
     * You can achieve the same result by calling [BatchRetrieveInventoryChanges](api-endpoint:Inventory-BatchRetrieveInventoryChanges)
     * and having the `catalog_object_ids` list contain a single element of the `CatalogObject` ID.
     *
     * Results are paginated and sorted in descending order according to their
     * `occurred_at` timestamp (newest first).
     *
     * There are no limits on how far back the caller can page. This endpoint can be
     * used to display recent changes for a specific item. For more
     * sophisticated queries, use a batch endpoint.
     *
     * @param {Square.ChangesInventoryRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.changes({
     *         catalogObjectId: "catalog_object_id"
     *     })
     */
    public async changes(
        request: Square.ChangesInventoryRequest,
        requestOptions?: Inventory.RequestOptions,
    ): Promise<core.Page<Square.InventoryChange>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Square.ChangesInventoryRequest,
            ): Promise<core.WithRawResponse<Square.GetInventoryChangesResponse>> => {
                const { catalogObjectId, locationIds, cursor } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (locationIds !== undefined) {
                    _queryParams["location_ids"] = locationIds;
                }
                if (cursor !== undefined) {
                    _queryParams["cursor"] = cursor;
                }
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SquareEnvironment.Production,
                        `v2/inventory/${encodeURIComponent(catalogObjectId)}/changes`,
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "Square-Version": requestOptions?.version ?? "2025-08-20",
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: serializers.GetInventoryChangesResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SquareError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SquareError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SquareTimeoutError(
                            "Timeout exceeded when calling GET /v2/inventory/{catalog_object_id}/changes.",
                        );
                    case "unknown":
                        throw new errors.SquareError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Square.GetInventoryChangesResponse, Square.InventoryChange>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.cursor != null && !(typeof response?.cursor === "string" && response?.cursor === ""),
            getItems: (response) => response?.changes ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "cursor", response?.cursor));
            },
        });
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SQUARE_TOKEN"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
