/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Vendors {
    export interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-08-20";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-08-20";
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Vendors {
    protected readonly _options: Vendors.Options;

    constructor(_options: Vendors.Options = {}) {
        this._options = _options;
    }

    /**
     * Creates one or more [Vendor](entity:Vendor) objects to represent suppliers to a seller.
     *
     * @param {Square.BatchCreateVendorsRequest} request
     * @param {Vendors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.vendors.batchCreate({
     *         vendors: {
     *             "8fc6a5b0-9fe8-4b46-b46b-2ef95793abbe": {
     *                 name: "Joe's Fresh Seafood",
     *                 address: {
     *                     addressLine1: "505 Electric Ave",
     *                     addressLine2: "Suite 600",
     *                     locality: "New York",
     *                     administrativeDistrictLevel1: "NY",
     *                     postalCode: "10003",
     *                     country: "US"
     *                 },
     *                 contacts: [{
     *                         name: "Joe Burrow",
     *                         emailAddress: "joe@joesfreshseafood.com",
     *                         phoneNumber: "1-212-555-4250",
     *                         ordinal: 1
     *                     }],
     *                 accountNumber: "4025391",
     *                 note: "a vendor"
     *             }
     *         }
     *     })
     */
    public batchCreate(
        request: Square.BatchCreateVendorsRequest,
        requestOptions?: Vendors.RequestOptions,
    ): core.HttpResponsePromise<Square.BatchCreateVendorsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__batchCreate(request, requestOptions));
    }

    private async __batchCreate(
        request: Square.BatchCreateVendorsRequest,
        requestOptions?: Vendors.RequestOptions,
    ): Promise<core.WithRawResponse<Square.BatchCreateVendorsResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/vendors/bulk-create",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.BatchCreateVendorsRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.BatchCreateVendorsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/vendors/bulk-create.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves one or more vendors of specified [Vendor](entity:Vendor) IDs.
     *
     * @param {Square.BatchGetVendorsRequest} request
     * @param {Vendors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.vendors.batchGet({
     *         vendorIds: ["INV_V_JDKYHBWT1D4F8MFH63DBMEN8Y4"]
     *     })
     */
    public batchGet(
        request: Square.BatchGetVendorsRequest = {},
        requestOptions?: Vendors.RequestOptions,
    ): core.HttpResponsePromise<Square.BatchGetVendorsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__batchGet(request, requestOptions));
    }

    private async __batchGet(
        request: Square.BatchGetVendorsRequest = {},
        requestOptions?: Vendors.RequestOptions,
    ): Promise<core.WithRawResponse<Square.BatchGetVendorsResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/vendors/bulk-retrieve",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.BatchGetVendorsRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.BatchGetVendorsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/vendors/bulk-retrieve.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates one or more of existing [Vendor](entity:Vendor) objects as suppliers to a seller.
     *
     * @param {Square.BatchUpdateVendorsRequest} request
     * @param {Vendors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.vendors.batchUpdate({
     *         vendors: {
     *             "FMCYHBWT1TPL8MFH52PBMEN92A": {
     *                 vendor: {}
     *             },
     *             "INV_V_JDKYHBWT1D4F8MFH63DBMEN8Y4": {
     *                 vendor: {}
     *             }
     *         }
     *     })
     */
    public batchUpdate(
        request: Square.BatchUpdateVendorsRequest,
        requestOptions?: Vendors.RequestOptions,
    ): core.HttpResponsePromise<Square.BatchUpdateVendorsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__batchUpdate(request, requestOptions));
    }

    private async __batchUpdate(
        request: Square.BatchUpdateVendorsRequest,
        requestOptions?: Vendors.RequestOptions,
    ): Promise<core.WithRawResponse<Square.BatchUpdateVendorsResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/vendors/bulk-update",
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.BatchUpdateVendorsRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.BatchUpdateVendorsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling PUT /v2/vendors/bulk-update.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a single [Vendor](entity:Vendor) object to represent a supplier to a seller.
     *
     * @param {Square.CreateVendorRequest} request
     * @param {Vendors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.vendors.create({
     *         idempotencyKey: "8fc6a5b0-9fe8-4b46-b46b-2ef95793abbe",
     *         vendor: {
     *             name: "Joe's Fresh Seafood",
     *             address: {
     *                 addressLine1: "505 Electric Ave",
     *                 addressLine2: "Suite 600",
     *                 locality: "New York",
     *                 administrativeDistrictLevel1: "NY",
     *                 postalCode: "10003",
     *                 country: "US"
     *             },
     *             contacts: [{
     *                     name: "Joe Burrow",
     *                     emailAddress: "joe@joesfreshseafood.com",
     *                     phoneNumber: "1-212-555-4250",
     *                     ordinal: 1
     *                 }],
     *             accountNumber: "4025391",
     *             note: "a vendor"
     *         }
     *     })
     */
    public create(
        request: Square.CreateVendorRequest,
        requestOptions?: Vendors.RequestOptions,
    ): core.HttpResponsePromise<Square.CreateVendorResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Square.CreateVendorRequest,
        requestOptions?: Vendors.RequestOptions,
    ): Promise<core.WithRawResponse<Square.CreateVendorResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/vendors/create",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.CreateVendorRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.CreateVendorResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/vendors/create.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Searches for vendors using a filter against supported [Vendor](entity:Vendor) properties and a supported sorter.
     *
     * @param {Square.SearchVendorsRequest} request
     * @param {Vendors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.vendors.search()
     */
    public search(
        request: Square.SearchVendorsRequest = {},
        requestOptions?: Vendors.RequestOptions,
    ): core.HttpResponsePromise<Square.SearchVendorsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__search(request, requestOptions));
    }

    private async __search(
        request: Square.SearchVendorsRequest = {},
        requestOptions?: Vendors.RequestOptions,
    ): Promise<core.WithRawResponse<Square.SearchVendorsResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/vendors/search",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.SearchVendorsRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.SearchVendorsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/vendors/search.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves the vendor of a specified [Vendor](entity:Vendor) ID.
     *
     * @param {Square.GetVendorsRequest} request
     * @param {Vendors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.vendors.get({
     *         vendorId: "vendor_id"
     *     })
     */
    public get(
        request: Square.GetVendorsRequest,
        requestOptions?: Vendors.RequestOptions,
    ): core.HttpResponsePromise<Square.GetVendorResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(request, requestOptions));
    }

    private async __get(
        request: Square.GetVendorsRequest,
        requestOptions?: Vendors.RequestOptions,
    ): Promise<core.WithRawResponse<Square.GetVendorResponse>> {
        const { vendorId } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/vendors/${encodeURIComponent(vendorId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetVendorResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling GET /v2/vendors/{vendor_id}.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates an existing [Vendor](entity:Vendor) object as a supplier to a seller.
     *
     * @param {Square.UpdateVendorsRequest} request
     * @param {Vendors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.vendors.update({
     *         vendorId: "vendor_id",
     *         body: {
     *             idempotencyKey: "8fc6a5b0-9fe8-4b46-b46b-2ef95793abbe",
     *             vendor: {
     *                 id: "INV_V_JDKYHBWT1D4F8MFH63DBMEN8Y4",
     *                 name: "Jack's Chicken Shack",
     *                 version: 1,
     *                 status: "ACTIVE"
     *             }
     *         }
     *     })
     */
    public update(
        request: Square.UpdateVendorsRequest,
        requestOptions?: Vendors.RequestOptions,
    ): core.HttpResponsePromise<Square.UpdateVendorResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(request, requestOptions));
    }

    private async __update(
        request: Square.UpdateVendorsRequest,
        requestOptions?: Vendors.RequestOptions,
    ): Promise<core.WithRawResponse<Square.UpdateVendorResponse>> {
        const { vendorId, body: _body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/vendors/${encodeURIComponent(vendorId)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-08-20",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.UpdateVendorRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.UpdateVendorResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling PUT /v2/vendors/{vendor_id}.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SQUARE_TOKEN"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
