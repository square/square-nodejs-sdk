/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
import * as serializers from "../../../../serialization/index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers";
import * as errors from "../../../../errors/index";

export declare namespace V1Transactions {
    export interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-07-16";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-07-16";
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class V1Transactions {
    protected readonly _options: V1Transactions.Options;

    constructor(_options: V1Transactions.Options = {}) {
        this._options = _options;
    }

    /**
     * Provides summary information for a merchant's online store orders.
     *
     * @param {Square.V1ListOrdersRequest} request
     * @param {V1Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.v1Transactions.v1ListOrders({
     *         locationId: "location_id"
     *     })
     */
    public v1ListOrders(
        request: Square.V1ListOrdersRequest,
        requestOptions?: V1Transactions.RequestOptions,
    ): core.HttpResponsePromise<Square.V1Order[]> {
        return core.HttpResponsePromise.fromPromise(this.__v1ListOrders(request, requestOptions));
    }

    private async __v1ListOrders(
        request: Square.V1ListOrdersRequest,
        requestOptions?: V1Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<Square.V1Order[]>> {
        const { locationId, order, limit, batchToken } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (order !== undefined) {
            _queryParams["order"] = serializers.SortOrder.jsonOrThrow(order, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            });
        }

        if (limit !== undefined) {
            _queryParams["limit"] = limit?.toString() ?? null;
        }

        if (batchToken !== undefined) {
            _queryParams["batch_token"] = batchToken;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v1/${encodeURIComponent(locationId)}/orders`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-07-16",
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.v1Transactions.v1ListOrders.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling GET /v1/{location_id}/orders.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Provides comprehensive information for a single online store order, including the order's history.
     *
     * @param {Square.V1RetrieveOrderRequest} request
     * @param {V1Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.v1Transactions.v1RetrieveOrder({
     *         locationId: "location_id",
     *         orderId: "order_id"
     *     })
     */
    public v1RetrieveOrder(
        request: Square.V1RetrieveOrderRequest,
        requestOptions?: V1Transactions.RequestOptions,
    ): core.HttpResponsePromise<Square.V1Order> {
        return core.HttpResponsePromise.fromPromise(this.__v1RetrieveOrder(request, requestOptions));
    }

    private async __v1RetrieveOrder(
        request: Square.V1RetrieveOrderRequest,
        requestOptions?: V1Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<Square.V1Order>> {
        const { locationId, orderId } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v1/${encodeURIComponent(locationId)}/orders/${encodeURIComponent(orderId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-07-16",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.V1Order.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling GET /v1/{location_id}/orders/{order_id}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
     *
     * @param {Square.V1UpdateOrderRequest} request
     * @param {V1Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.v1Transactions.v1UpdateOrder({
     *         locationId: "location_id",
     *         orderId: "order_id",
     *         action: "COMPLETE"
     *     })
     */
    public v1UpdateOrder(
        request: Square.V1UpdateOrderRequest,
        requestOptions?: V1Transactions.RequestOptions,
    ): core.HttpResponsePromise<Square.V1Order> {
        return core.HttpResponsePromise.fromPromise(this.__v1UpdateOrder(request, requestOptions));
    }

    private async __v1UpdateOrder(
        request: Square.V1UpdateOrderRequest,
        requestOptions?: V1Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<Square.V1Order>> {
        const { locationId, orderId, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v1/${encodeURIComponent(locationId)}/orders/${encodeURIComponent(orderId)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-07-16",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.V1UpdateOrderRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.V1Order.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling PUT /v1/{location_id}/orders/{order_id}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SQUARE_TOKEN"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
