/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Square from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";
import { PaymentLinks } from "../resources/paymentLinks/client/Client.js";

export declare namespace Checkout {
    export interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-07-16";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-07-16";
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Checkout {
    protected readonly _options: Checkout.Options;
    protected _paymentLinks: PaymentLinks | undefined;

    constructor(_options: Checkout.Options = {}) {
        this._options = _options;
    }

    public get paymentLinks(): PaymentLinks {
        return (this._paymentLinks ??= new PaymentLinks(this._options));
    }

    /**
     * Retrieves the location-level settings for a Square-hosted checkout page.
     *
     * @param {Square.RetrieveLocationSettingsRequest} request
     * @param {Checkout.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.checkout.retrieveLocationSettings({
     *         location_id: "location_id"
     *     })
     */
    public retrieveLocationSettings(
        request: Square.RetrieveLocationSettingsRequest,
        requestOptions?: Checkout.RequestOptions,
    ): core.HttpResponsePromise<Square.RetrieveLocationSettingsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__retrieveLocationSettings(request, requestOptions));
    }

    private async __retrieveLocationSettings(
        request: Square.RetrieveLocationSettingsRequest,
        requestOptions?: Checkout.RequestOptions,
    ): Promise<core.WithRawResponse<Square.RetrieveLocationSettingsResponse>> {
        const { location_id: locationId } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/online-checkout/location-settings/${encodeURIComponent(locationId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-07-16",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Square.RetrieveLocationSettingsResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling GET /v2/online-checkout/location-settings/{location_id}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates the location-level settings for a Square-hosted checkout page.
     *
     * @param {Square.UpdateLocationSettingsRequest} request
     * @param {Checkout.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.checkout.updateLocationSettings({
     *         location_id: "location_id",
     *         location_settings: {}
     *     })
     */
    public updateLocationSettings(
        request: Square.UpdateLocationSettingsRequest,
        requestOptions?: Checkout.RequestOptions,
    ): core.HttpResponsePromise<Square.UpdateLocationSettingsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateLocationSettings(request, requestOptions));
    }

    private async __updateLocationSettings(
        request: Square.UpdateLocationSettingsRequest,
        requestOptions?: Checkout.RequestOptions,
    ): Promise<core.WithRawResponse<Square.UpdateLocationSettingsResponse>> {
        const { location_id: locationId, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/online-checkout/location-settings/${encodeURIComponent(locationId)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-07-16",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Square.UpdateLocationSettingsResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling PUT /v2/online-checkout/location-settings/{location_id}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves the merchant-level settings for a Square-hosted checkout page.
     *
     * @param {Checkout.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.checkout.retrieveMerchantSettings()
     */
    public retrieveMerchantSettings(
        requestOptions?: Checkout.RequestOptions,
    ): core.HttpResponsePromise<Square.RetrieveMerchantSettingsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__retrieveMerchantSettings(requestOptions));
    }

    private async __retrieveMerchantSettings(
        requestOptions?: Checkout.RequestOptions,
    ): Promise<core.WithRawResponse<Square.RetrieveMerchantSettingsResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/online-checkout/merchant-settings",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-07-16",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Square.RetrieveMerchantSettingsResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling GET /v2/online-checkout/merchant-settings.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates the merchant-level settings for a Square-hosted checkout page.
     *
     * @param {Square.UpdateMerchantSettingsRequest} request
     * @param {Checkout.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.checkout.updateMerchantSettings({
     *         merchant_settings: {}
     *     })
     */
    public updateMerchantSettings(
        request: Square.UpdateMerchantSettingsRequest,
        requestOptions?: Checkout.RequestOptions,
    ): core.HttpResponsePromise<Square.UpdateMerchantSettingsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateMerchantSettings(request, requestOptions));
    }

    private async __updateMerchantSettings(
        request: Square.UpdateMerchantSettingsRequest,
        requestOptions?: Checkout.RequestOptions,
    ): Promise<core.WithRawResponse<Square.UpdateMerchantSettingsResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/online-checkout/merchant-settings",
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-07-16",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Square.UpdateMerchantSettingsResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling PUT /v2/online-checkout/merchant-settings.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SQUARE_TOKEN"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
