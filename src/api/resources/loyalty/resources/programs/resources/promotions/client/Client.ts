/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../../../environments.js";
import * as core from "../../../../../../../../core/index.js";
import * as Square from "../../../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../../../core/headers.js";
import * as errors from "../../../../../../../../errors/index.js";

export declare namespace Promotions {
    export interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-07-16";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-07-16";
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Promotions {
    protected readonly _options: Promotions.Options;

    constructor(_options: Promotions.Options = {}) {
        this._options = _options;
    }

    /**
     * Lists the loyalty promotions associated with a [loyalty program](entity:LoyaltyProgram).
     * Results are sorted by the `created_at` date in descending order (newest to oldest).
     *
     * @param {Square.loyalty.programs.ListPromotionsRequest} request
     * @param {Promotions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.programs.promotions.list({
     *         program_id: "program_id"
     *     })
     */
    public async list(
        request: Square.loyalty.programs.ListPromotionsRequest,
        requestOptions?: Promotions.RequestOptions,
    ): Promise<core.Page<Square.LoyaltyPromotion>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Square.loyalty.programs.ListPromotionsRequest,
            ): Promise<core.WithRawResponse<Square.ListLoyaltyPromotionsResponse>> => {
                const { program_id: programId, status, cursor, limit } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (status !== undefined) {
                    _queryParams["status"] = status;
                }
                if (cursor !== undefined) {
                    _queryParams["cursor"] = cursor;
                }
                if (limit !== undefined) {
                    _queryParams["limit"] = limit?.toString() ?? null;
                }
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SquareEnvironment.Production,
                        `v2/loyalty/programs/${encodeURIComponent(programId)}/promotions`,
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "Square-Version": requestOptions?.version ?? "2025-07-16",
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as Square.ListLoyaltyPromotionsResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SquareError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SquareError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SquareTimeoutError(
                            "Timeout exceeded when calling GET /v2/loyalty/programs/{program_id}/promotions.",
                        );
                    case "unknown":
                        throw new errors.SquareError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Square.ListLoyaltyPromotionsResponse, Square.LoyaltyPromotion>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.cursor != null && !(typeof response?.cursor === "string" && response?.cursor === ""),
            getItems: (response) => response?.loyalty_promotions ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "cursor", response?.cursor));
            },
        });
    }

    /**
     * Creates a loyalty promotion for a [loyalty program](entity:LoyaltyProgram). A loyalty promotion
     * enables buyers to earn points in addition to those earned from the base loyalty program.
     *
     * This endpoint sets the loyalty promotion to the `ACTIVE` or `SCHEDULED` status, depending on the
     * `available_time` setting. A loyalty program can have a maximum of 10 loyalty promotions with an
     * `ACTIVE` or `SCHEDULED` status.
     *
     * @param {Square.loyalty.programs.CreateLoyaltyPromotionRequest} request
     * @param {Promotions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.programs.promotions.create({
     *         program_id: "program_id",
     *         loyalty_promotion: {
     *             name: "Tuesday Happy Hour Promo",
     *             incentive: {
     *                 type: "POINTS_MULTIPLIER",
     *                 points_multiplier_data: {
     *                     multiplier: "3.0"
     *                 }
     *             },
     *             available_time: {
     *                 time_periods: ["BEGIN:VEVENT\nDTSTART:20220816T160000\nDURATION:PT2H\nRRULE:FREQ=WEEKLY;BYDAY=TU\nEND:VEVENT"]
     *             },
     *             trigger_limit: {
     *                 times: 1,
     *                 interval: "DAY"
     *             },
     *             minimum_spend_amount_money: {
     *                 amount: BigInt("2000"),
     *                 currency: "USD"
     *             },
     *             qualifying_category_ids: ["XTQPYLR3IIU9C44VRCB3XD12"]
     *         },
     *         idempotency_key: "ec78c477-b1c3-4899-a209-a4e71337c996"
     *     })
     */
    public create(
        request: Square.loyalty.programs.CreateLoyaltyPromotionRequest,
        requestOptions?: Promotions.RequestOptions,
    ): core.HttpResponsePromise<Square.CreateLoyaltyPromotionResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Square.loyalty.programs.CreateLoyaltyPromotionRequest,
        requestOptions?: Promotions.RequestOptions,
    ): Promise<core.WithRawResponse<Square.CreateLoyaltyPromotionResponse>> {
        const { program_id: programId, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/loyalty/programs/${encodeURIComponent(programId)}/promotions`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-07-16",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Square.CreateLoyaltyPromotionResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling POST /v2/loyalty/programs/{program_id}/promotions.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves a loyalty promotion.
     *
     * @param {Square.loyalty.programs.GetPromotionsRequest} request
     * @param {Promotions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.programs.promotions.get({
     *         promotion_id: "promotion_id",
     *         program_id: "program_id"
     *     })
     */
    public get(
        request: Square.loyalty.programs.GetPromotionsRequest,
        requestOptions?: Promotions.RequestOptions,
    ): core.HttpResponsePromise<Square.GetLoyaltyPromotionResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(request, requestOptions));
    }

    private async __get(
        request: Square.loyalty.programs.GetPromotionsRequest,
        requestOptions?: Promotions.RequestOptions,
    ): Promise<core.WithRawResponse<Square.GetLoyaltyPromotionResponse>> {
        const { promotion_id: promotionId, program_id: programId } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/loyalty/programs/${encodeURIComponent(programId)}/promotions/${encodeURIComponent(promotionId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-07-16",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Square.GetLoyaltyPromotionResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling GET /v2/loyalty/programs/{program_id}/promotions/{promotion_id}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Cancels a loyalty promotion. Use this endpoint to cancel an `ACTIVE` promotion earlier than the
     * end date, cancel an `ACTIVE` promotion when an end date is not specified, or cancel a `SCHEDULED` promotion.
     * Because updating a promotion is not supported, you can also use this endpoint to cancel a promotion before
     * you create a new one.
     *
     * This endpoint sets the loyalty promotion to the `CANCELED` state
     *
     * @param {Square.loyalty.programs.CancelPromotionsRequest} request
     * @param {Promotions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.programs.promotions.cancel({
     *         promotion_id: "promotion_id",
     *         program_id: "program_id"
     *     })
     */
    public cancel(
        request: Square.loyalty.programs.CancelPromotionsRequest,
        requestOptions?: Promotions.RequestOptions,
    ): core.HttpResponsePromise<Square.CancelLoyaltyPromotionResponse> {
        return core.HttpResponsePromise.fromPromise(this.__cancel(request, requestOptions));
    }

    private async __cancel(
        request: Square.loyalty.programs.CancelPromotionsRequest,
        requestOptions?: Promotions.RequestOptions,
    ): Promise<core.WithRawResponse<Square.CancelLoyaltyPromotionResponse>> {
        const { promotion_id: promotionId, program_id: programId } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/loyalty/programs/${encodeURIComponent(programId)}/promotions/${encodeURIComponent(promotionId)}/cancel`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-07-16",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Square.CancelLoyaltyPromotionResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling POST /v2/loyalty/programs/{program_id}/promotions/{promotion_id}/cancel.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SQUARE_TOKEN"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
