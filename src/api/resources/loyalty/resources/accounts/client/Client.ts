// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as environments from "../../../../../../environments";
import * as errors from "../../../../../../errors/index";
import * as serializers from "../../../../../../serialization/index";
import type * as Square from "../../../../../index";

export declare namespace Accounts {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Accounts {
    protected readonly _options: Accounts.Options;

    constructor(_options: Accounts.Options = {}) {
        this._options = _options;
    }

    /**
     * Creates a loyalty account. To create a loyalty account, you must provide the `program_id` and a `mapping` with the `phone_number` of the buyer.
     *
     * @param {Square.loyalty.CreateLoyaltyAccountRequest} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.accounts.create({
     *         loyaltyAccount: {
     *             programId: "d619f755-2d17-41f3-990d-c04ecedd64dd",
     *             mapping: {
     *                 phoneNumber: "+14155551234"
     *             }
     *         },
     *         idempotencyKey: "ec78c477-b1c3-4899-a209-a4e71337c996"
     *     })
     */
    public create(
        request: Square.loyalty.CreateLoyaltyAccountRequest,
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Square.CreateLoyaltyAccountResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Square.loyalty.CreateLoyaltyAccountRequest,
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Square.CreateLoyaltyAccountResponse>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? "2025-10-16",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/loyalty/accounts",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.loyalty.CreateLoyaltyAccountRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.CreateLoyaltyAccountResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/loyalty/accounts.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Searches for loyalty accounts in a loyalty program.
     *
     * You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.
     *
     * Search results are sorted by `created_at` in ascending order.
     *
     * @param {Square.loyalty.SearchLoyaltyAccountsRequest} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.accounts.search({
     *         query: {
     *             mappings: [{
     *                     phoneNumber: "+14155551234"
     *                 }]
     *         },
     *         limit: 10
     *     })
     */
    public search(
        request: Square.loyalty.SearchLoyaltyAccountsRequest = {},
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Square.SearchLoyaltyAccountsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__search(request, requestOptions));
    }

    private async __search(
        request: Square.loyalty.SearchLoyaltyAccountsRequest = {},
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Square.SearchLoyaltyAccountsResponse>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? "2025-10-16",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/loyalty/accounts/search",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.loyalty.SearchLoyaltyAccountsRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.SearchLoyaltyAccountsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/loyalty/accounts/search.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves a loyalty account.
     *
     * @param {Square.loyalty.GetAccountsRequest} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.accounts.get({
     *         accountId: "account_id"
     *     })
     */
    public get(
        request: Square.loyalty.GetAccountsRequest,
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Square.GetLoyaltyAccountResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(request, requestOptions));
    }

    private async __get(
        request: Square.loyalty.GetAccountsRequest,
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Square.GetLoyaltyAccountResponse>> {
        const { accountId } = request;
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? "2025-10-16",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/loyalty/accounts/${encodeURIComponent(accountId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetLoyaltyAccountResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling GET /v2/loyalty/accounts/{account_id}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Adds points earned from a purchase to a [loyalty account](entity:LoyaltyAccount).
     *
     * - If you are using the Orders API to manage orders, provide the `order_id`. Square reads the order
     * to compute the points earned from both the base loyalty program and an associated
     * [loyalty promotion](entity:LoyaltyPromotion). For purchases that qualify for multiple accrual
     * rules, Square computes points based on the accrual rule that grants the most points.
     * For purchases that qualify for multiple promotions, Square computes points based on the most
     * recently created promotion. A purchase must first qualify for program points to be eligible for promotion points.
     *
     * - If you are not using the Orders API to manage orders, provide `points` with the number of points to add.
     * You must first perform a client-side computation of the points earned from the loyalty program and
     * loyalty promotion. For spend-based and visit-based programs, you can call [CalculateLoyaltyPoints](api-endpoint:Loyalty-CalculateLoyaltyPoints)
     * to compute the points earned from the base loyalty program. For information about computing points earned from a loyalty promotion, see
     * [Calculating promotion points](https://developer.squareup.com/docs/loyalty-api/loyalty-promotions#calculate-promotion-points).
     *
     * @param {Square.loyalty.AccumulateLoyaltyPointsRequest} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.accounts.accumulatePoints({
     *         accountId: "account_id",
     *         accumulatePoints: {
     *             orderId: "RFZfrdtm3mhO1oGzf5Cx7fEMsmGZY"
     *         },
     *         idempotencyKey: "58b90739-c3e8-4b11-85f7-e636d48d72cb",
     *         locationId: "P034NEENMD09F"
     *     })
     */
    public accumulatePoints(
        request: Square.loyalty.AccumulateLoyaltyPointsRequest,
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Square.AccumulateLoyaltyPointsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__accumulatePoints(request, requestOptions));
    }

    private async __accumulatePoints(
        request: Square.loyalty.AccumulateLoyaltyPointsRequest,
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Square.AccumulateLoyaltyPointsResponse>> {
        const { accountId, ..._body } = request;
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? "2025-10-16",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/loyalty/accounts/${encodeURIComponent(accountId)}/accumulate`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.loyalty.AccumulateLoyaltyPointsRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.AccumulateLoyaltyPointsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling POST /v2/loyalty/accounts/{account_id}/accumulate.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Adds points to or subtracts points from a buyer's account.
     *
     * Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call
     * [AccumulateLoyaltyPoints](api-endpoint:Loyalty-AccumulateLoyaltyPoints)
     * to add points when a buyer pays for the purchase.
     *
     * @param {Square.loyalty.AdjustLoyaltyPointsRequest} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.accounts.adjust({
     *         accountId: "account_id",
     *         idempotencyKey: "bc29a517-3dc9-450e-aa76-fae39ee849d1",
     *         adjustPoints: {
     *             points: 10,
     *             reason: "Complimentary points"
     *         }
     *     })
     */
    public adjust(
        request: Square.loyalty.AdjustLoyaltyPointsRequest,
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Square.AdjustLoyaltyPointsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__adjust(request, requestOptions));
    }

    private async __adjust(
        request: Square.loyalty.AdjustLoyaltyPointsRequest,
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Square.AdjustLoyaltyPointsResponse>> {
        const { accountId, ..._body } = request;
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Square-Version": requestOptions?.version ?? "2025-10-16",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/loyalty/accounts/${encodeURIComponent(accountId)}/adjust`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.loyalty.AdjustLoyaltyPointsRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.AdjustLoyaltyPointsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling POST /v2/loyalty/accounts/{account_id}/adjust.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env.SQUARE_TOKEN;
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
