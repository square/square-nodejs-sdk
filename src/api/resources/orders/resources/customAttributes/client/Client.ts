/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as Square from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace CustomAttributes {
    export interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-07-16";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-07-16";
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class CustomAttributes {
    protected readonly _options: CustomAttributes.Options;

    constructor(_options: CustomAttributes.Options = {}) {
        this._options = _options;
    }

    /**
     * Deletes order [custom attributes](entity:CustomAttribute) as a bulk operation.
     *
     * Use this endpoint to delete one or more custom attributes from one or more orders.
     * A custom attribute is based on a custom attribute definition in a Square seller account.  (To create a
     * custom attribute definition, use the [CreateOrderCustomAttributeDefinition](api-endpoint:OrderCustomAttributes-CreateOrderCustomAttributeDefinition) endpoint.)
     *
     * This `BulkDeleteOrderCustomAttributes` endpoint accepts a map of 1 to 25 individual delete
     * requests and returns a map of individual delete responses. Each delete request has a unique ID
     * and provides an order ID and custom attribute. Each delete response is returned with the ID
     * of the corresponding request.
     *
     * To delete a custom attribute owned by another application, the `visibility` setting
     * must be `VISIBILITY_READ_WRITE_VALUES`. Note that seller-defined custom attributes
     * (also known as custom fields) are always set to `VISIBILITY_READ_WRITE_VALUES`.
     *
     * @param {Square.orders.BulkDeleteOrderCustomAttributesRequest} request
     * @param {CustomAttributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.orders.customAttributes.batchDelete({
     *         values: {
     *             "cover-count": {
     *                 key: "cover-count",
     *                 order_id: "7BbXGEIWNldxAzrtGf9GPVZTwZ4F"
     *             },
     *             "table-number": {
     *                 key: "table-number",
     *                 order_id: "7BbXGEIWNldxAzrtGf9GPVZTwZ4F"
     *             }
     *         }
     *     })
     */
    public batchDelete(
        request: Square.orders.BulkDeleteOrderCustomAttributesRequest,
        requestOptions?: CustomAttributes.RequestOptions,
    ): core.HttpResponsePromise<Square.BulkDeleteOrderCustomAttributesResponse> {
        return core.HttpResponsePromise.fromPromise(this.__batchDelete(request, requestOptions));
    }

    private async __batchDelete(
        request: Square.orders.BulkDeleteOrderCustomAttributesRequest,
        requestOptions?: CustomAttributes.RequestOptions,
    ): Promise<core.WithRawResponse<Square.BulkDeleteOrderCustomAttributesResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/orders/custom-attributes/bulk-delete",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-07-16",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Square.BulkDeleteOrderCustomAttributesResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling POST /v2/orders/custom-attributes/bulk-delete.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates or updates order [custom attributes](entity:CustomAttribute) as a bulk operation.
     *
     * Use this endpoint to delete one or more custom attributes from one or more orders.
     * A custom attribute is based on a custom attribute definition in a Square seller account.  (To create a
     * custom attribute definition, use the [CreateOrderCustomAttributeDefinition](api-endpoint:OrderCustomAttributes-CreateOrderCustomAttributeDefinition) endpoint.)
     *
     * This `BulkUpsertOrderCustomAttributes` endpoint accepts a map of 1 to 25 individual upsert
     * requests and returns a map of individual upsert responses. Each upsert request has a unique ID
     * and provides an order ID and custom attribute. Each upsert response is returned with the ID
     * of the corresponding request.
     *
     * To create or update a custom attribute owned by another application, the `visibility` setting
     * must be `VISIBILITY_READ_WRITE_VALUES`. Note that seller-defined custom attributes
     * (also known as custom fields) are always set to `VISIBILITY_READ_WRITE_VALUES`.
     *
     * @param {Square.orders.BulkUpsertOrderCustomAttributesRequest} request
     * @param {CustomAttributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.orders.customAttributes.batchUpsert({
     *         values: {
     *             "cover-count": {
     *                 custom_attribute: {
     *                     key: "cover-count",
     *                     value: "6",
     *                     version: 2
     *                 },
     *                 order_id: "7BbXGEIWNldxAzrtGf9GPVZTwZ4F"
     *             },
     *             "table-number": {
     *                 custom_attribute: {
     *                     key: "table-number",
     *                     value: "11",
     *                     version: 4
     *                 },
     *                 order_id: "7BbXGEIWNldxAzrtGf9GPVZTwZ4F"
     *             }
     *         }
     *     })
     */
    public batchUpsert(
        request: Square.orders.BulkUpsertOrderCustomAttributesRequest,
        requestOptions?: CustomAttributes.RequestOptions,
    ): core.HttpResponsePromise<Square.BulkUpsertOrderCustomAttributesResponse> {
        return core.HttpResponsePromise.fromPromise(this.__batchUpsert(request, requestOptions));
    }

    private async __batchUpsert(
        request: Square.orders.BulkUpsertOrderCustomAttributesRequest,
        requestOptions?: CustomAttributes.RequestOptions,
    ): Promise<core.WithRawResponse<Square.BulkUpsertOrderCustomAttributesResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/orders/custom-attributes/bulk-upsert",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-07-16",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Square.BulkUpsertOrderCustomAttributesResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling POST /v2/orders/custom-attributes/bulk-upsert.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Lists the [custom attributes](entity:CustomAttribute) associated with an order.
     *
     * You can use the `with_definitions` query parameter to also retrieve custom attribute definitions
     * in the same call.
     *
     * When all response pages are retrieved, the results include all custom attributes that are
     * visible to the requesting application, including those that are owned by other applications
     * and set to `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`.
     *
     * @param {Square.orders.ListCustomAttributesRequest} request
     * @param {CustomAttributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.orders.customAttributes.list({
     *         order_id: "order_id"
     *     })
     */
    public async list(
        request: Square.orders.ListCustomAttributesRequest,
        requestOptions?: CustomAttributes.RequestOptions,
    ): Promise<core.Page<Square.CustomAttribute>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Square.orders.ListCustomAttributesRequest,
            ): Promise<core.WithRawResponse<Square.ListOrderCustomAttributesResponse>> => {
                const {
                    order_id: orderId,
                    visibility_filter: visibilityFilter,
                    cursor,
                    limit,
                    with_definitions: withDefinitions,
                } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (visibilityFilter !== undefined) {
                    _queryParams["visibility_filter"] = visibilityFilter;
                }
                if (cursor !== undefined) {
                    _queryParams["cursor"] = cursor;
                }
                if (limit !== undefined) {
                    _queryParams["limit"] = limit?.toString() ?? null;
                }
                if (withDefinitions !== undefined) {
                    _queryParams["with_definitions"] = withDefinitions?.toString() ?? null;
                }
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SquareEnvironment.Production,
                        `v2/orders/${encodeURIComponent(orderId)}/custom-attributes`,
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "Square-Version": requestOptions?.version ?? "2025-07-16",
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as Square.ListOrderCustomAttributesResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SquareError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SquareError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SquareTimeoutError(
                            "Timeout exceeded when calling GET /v2/orders/{order_id}/custom-attributes.",
                        );
                    case "unknown":
                        throw new errors.SquareError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Square.ListOrderCustomAttributesResponse, Square.CustomAttribute>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.cursor != null && !(typeof response?.cursor === "string" && response?.cursor === ""),
            getItems: (response) => response?.custom_attributes ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "cursor", response?.cursor));
            },
        });
    }

    /**
     * Retrieves a [custom attribute](entity:CustomAttribute) associated with an order.
     *
     * You can use the `with_definition` query parameter to also retrieve the custom attribute definition
     * in the same call.
     *
     * To retrieve a custom attribute owned by another application, the `visibility` setting must be
     * `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`. Note that seller-defined custom attributes
     * also known as custom fields) are always set to `VISIBILITY_READ_WRITE_VALUES`.
     *
     * @param {Square.orders.GetCustomAttributesRequest} request
     * @param {CustomAttributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.orders.customAttributes.get({
     *         order_id: "order_id",
     *         custom_attribute_key: "custom_attribute_key"
     *     })
     */
    public get(
        request: Square.orders.GetCustomAttributesRequest,
        requestOptions?: CustomAttributes.RequestOptions,
    ): core.HttpResponsePromise<Square.RetrieveOrderCustomAttributeResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(request, requestOptions));
    }

    private async __get(
        request: Square.orders.GetCustomAttributesRequest,
        requestOptions?: CustomAttributes.RequestOptions,
    ): Promise<core.WithRawResponse<Square.RetrieveOrderCustomAttributeResponse>> {
        const {
            order_id: orderId,
            custom_attribute_key: customAttributeKey,
            version,
            with_definition: withDefinition,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (version !== undefined) {
            _queryParams["version"] = version?.toString() ?? null;
        }

        if (withDefinition !== undefined) {
            _queryParams["with_definition"] = withDefinition?.toString() ?? null;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/orders/${encodeURIComponent(orderId)}/custom-attributes/${encodeURIComponent(customAttributeKey)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-07-16",
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Square.RetrieveOrderCustomAttributeResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling GET /v2/orders/{order_id}/custom-attributes/{custom_attribute_key}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates or updates a [custom attribute](entity:CustomAttribute) for an order.
     *
     * Use this endpoint to set the value of a custom attribute for a specific order.
     * A custom attribute is based on a custom attribute definition in a Square seller account. (To create a
     * custom attribute definition, use the [CreateOrderCustomAttributeDefinition](api-endpoint:OrderCustomAttributes-CreateOrderCustomAttributeDefinition) endpoint.)
     *
     * To create or update a custom attribute owned by another application, the `visibility` setting
     * must be `VISIBILITY_READ_WRITE_VALUES`. Note that seller-defined custom attributes
     * (also known as custom fields) are always set to `VISIBILITY_READ_WRITE_VALUES`.
     *
     * @param {Square.orders.UpsertOrderCustomAttributeRequest} request
     * @param {CustomAttributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.orders.customAttributes.upsert({
     *         order_id: "order_id",
     *         custom_attribute_key: "custom_attribute_key",
     *         custom_attribute: {
     *             key: "table-number",
     *             value: "42",
     *             version: 1
     *         }
     *     })
     */
    public upsert(
        request: Square.orders.UpsertOrderCustomAttributeRequest,
        requestOptions?: CustomAttributes.RequestOptions,
    ): core.HttpResponsePromise<Square.UpsertOrderCustomAttributeResponse> {
        return core.HttpResponsePromise.fromPromise(this.__upsert(request, requestOptions));
    }

    private async __upsert(
        request: Square.orders.UpsertOrderCustomAttributeRequest,
        requestOptions?: CustomAttributes.RequestOptions,
    ): Promise<core.WithRawResponse<Square.UpsertOrderCustomAttributeResponse>> {
        const { order_id: orderId, custom_attribute_key: customAttributeKey, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/orders/${encodeURIComponent(orderId)}/custom-attributes/${encodeURIComponent(customAttributeKey)}`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-07-16",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Square.UpsertOrderCustomAttributeResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling POST /v2/orders/{order_id}/custom-attributes/{custom_attribute_key}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes a [custom attribute](entity:CustomAttribute) associated with a customer profile.
     *
     * To delete a custom attribute owned by another application, the `visibility` setting must be
     * `VISIBILITY_READ_WRITE_VALUES`. Note that seller-defined custom attributes
     * (also known as custom fields) are always set to `VISIBILITY_READ_WRITE_VALUES`.
     *
     * @param {Square.orders.DeleteCustomAttributesRequest} request
     * @param {CustomAttributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.orders.customAttributes.delete({
     *         order_id: "order_id",
     *         custom_attribute_key: "custom_attribute_key"
     *     })
     */
    public delete(
        request: Square.orders.DeleteCustomAttributesRequest,
        requestOptions?: CustomAttributes.RequestOptions,
    ): core.HttpResponsePromise<Square.DeleteOrderCustomAttributeResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(request, requestOptions));
    }

    private async __delete(
        request: Square.orders.DeleteCustomAttributesRequest,
        requestOptions?: CustomAttributes.RequestOptions,
    ): Promise<core.WithRawResponse<Square.DeleteOrderCustomAttributeResponse>> {
        const { order_id: orderId, custom_attribute_key: customAttributeKey } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/orders/${encodeURIComponent(orderId)}/custom-attributes/${encodeURIComponent(customAttributeKey)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-07-16",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Square.DeleteOrderCustomAttributeResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling DELETE /v2/orders/{order_id}/custom-attributes/{custom_attribute_key}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SQUARE_TOKEN"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
