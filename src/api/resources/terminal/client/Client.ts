/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";
import { Actions } from "../resources/actions/client/Client";
import { Checkouts } from "../resources/checkouts/client/Client";
import { Refunds } from "../resources/refunds/client/Client";

export declare namespace Terminal {
    export interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-10-16";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-10-16";
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Terminal {
    protected readonly _options: Terminal.Options;
    protected _actions: Actions | undefined;
    protected _checkouts: Checkouts | undefined;
    protected _refunds: Refunds | undefined;

    constructor(_options: Terminal.Options = {}) {
        this._options = _options;
    }

    public get actions(): Actions {
        return (this._actions ??= new Actions(this._options));
    }

    public get checkouts(): Checkouts {
        return (this._checkouts ??= new Checkouts(this._options));
    }

    public get refunds(): Refunds {
        return (this._refunds ??= new Refunds(this._options));
    }

    /**
     * Dismisses a Terminal action request if the status and type of the request permits it.
     *
     * See [Link and Dismiss Actions](https://developer.squareup.com/docs/terminal-api/advanced-features/custom-workflows/link-and-dismiss-actions) for more details.
     *
     * @param {Square.DismissTerminalActionRequest} request
     * @param {Terminal.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.terminal.dismissTerminalAction({
     *         actionId: "action_id"
     *     })
     */
    public dismissTerminalAction(
        request: Square.DismissTerminalActionRequest,
        requestOptions?: Terminal.RequestOptions,
    ): core.HttpResponsePromise<Square.DismissTerminalActionResponse> {
        return core.HttpResponsePromise.fromPromise(this.__dismissTerminalAction(request, requestOptions));
    }

    private async __dismissTerminalAction(
        request: Square.DismissTerminalActionRequest,
        requestOptions?: Terminal.RequestOptions,
    ): Promise<core.WithRawResponse<Square.DismissTerminalActionResponse>> {
        const { actionId } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/terminals/actions/${encodeURIComponent(actionId)}/dismiss`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-10-16",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.DismissTerminalActionResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling POST /v2/terminals/actions/{action_id}/dismiss.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Dismisses a Terminal checkout request if the status and type of the request permits it.
     *
     * @param {Square.DismissTerminalCheckoutRequest} request
     * @param {Terminal.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.terminal.dismissTerminalCheckout({
     *         checkoutId: "checkout_id"
     *     })
     */
    public dismissTerminalCheckout(
        request: Square.DismissTerminalCheckoutRequest,
        requestOptions?: Terminal.RequestOptions,
    ): core.HttpResponsePromise<Square.DismissTerminalCheckoutResponse> {
        return core.HttpResponsePromise.fromPromise(this.__dismissTerminalCheckout(request, requestOptions));
    }

    private async __dismissTerminalCheckout(
        request: Square.DismissTerminalCheckoutRequest,
        requestOptions?: Terminal.RequestOptions,
    ): Promise<core.WithRawResponse<Square.DismissTerminalCheckoutResponse>> {
        const { checkoutId } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/terminals/checkouts/${encodeURIComponent(checkoutId)}/dismiss`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-10-16",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.DismissTerminalCheckoutResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling POST /v2/terminals/checkouts/{checkout_id}/dismiss.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Dismisses a Terminal refund request if the status and type of the request permits it.
     *
     * @param {Square.DismissTerminalRefundRequest} request
     * @param {Terminal.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.terminal.dismissTerminalRefund({
     *         terminalRefundId: "terminal_refund_id"
     *     })
     */
    public dismissTerminalRefund(
        request: Square.DismissTerminalRefundRequest,
        requestOptions?: Terminal.RequestOptions,
    ): core.HttpResponsePromise<Square.DismissTerminalRefundResponse> {
        return core.HttpResponsePromise.fromPromise(this.__dismissTerminalRefund(request, requestOptions));
    }

    private async __dismissTerminalRefund(
        request: Square.DismissTerminalRefundRequest,
        requestOptions?: Terminal.RequestOptions,
    ): Promise<core.WithRawResponse<Square.DismissTerminalRefundResponse>> {
        const { terminalRefundId } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/terminals/refunds/${encodeURIComponent(terminalRefundId)}/dismiss`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-10-16",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.DismissTerminalRefundResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling POST /v2/terminals/refunds/{terminal_refund_id}/dismiss.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SQUARE_TOKEN"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
