/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace TransferOrders {
    export interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-10-16";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-10-16";
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class TransferOrders {
    protected readonly _options: TransferOrders.Options;

    constructor(_options: TransferOrders.Options = {}) {
        this._options = _options;
    }

    /**
     * Creates a new transfer order in [DRAFT](entity:TransferOrderStatus) status. A transfer order represents the intent
     * to move [CatalogItemVariation](entity:CatalogItemVariation)s from one [Location](entity:Location) to another.
     * The source and destination locations must be different and must belong to your Square account.
     *
     * In [DRAFT](entity:TransferOrderStatus) status, you can:
     * - Add or remove items
     * - Modify quantities
     * - Update shipping information
     * - Delete the entire order via [DeleteTransferOrder](api-endpoint:TransferOrders-DeleteTransferOrder)
     *
     * The request requires source_location_id and destination_location_id.
     * Inventory levels are not affected until the order is started via
     * [StartTransferOrder](api-endpoint:TransferOrders-StartTransferOrder).
     *
     * Common integration points:
     * - Sync with warehouse management systems
     * - Automate regular stock transfers
     * - Initialize transfers from inventory optimization systems
     *
     * Creates a [transfer_order.created](webhook:transfer_order.created) webhook event.
     *
     * @param {Square.CreateTransferOrderRequest} request
     * @param {TransferOrders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.transferOrders.create({
     *         idempotencyKey: "65cc0586-3e82-384s-b524-3885cffd52",
     *         transferOrder: {
     *             sourceLocationId: "EXAMPLE_SOURCE_LOCATION_ID_123",
     *             destinationLocationId: "EXAMPLE_DEST_LOCATION_ID_456",
     *             expectedAt: "2025-11-09T05:00:00Z",
     *             notes: "Example transfer order for inventory redistribution between locations",
     *             trackingNumber: "TRACK123456789",
     *             createdByTeamMemberId: "EXAMPLE_TEAM_MEMBER_ID_789",
     *             lineItems: [{
     *                     itemVariationId: "EXAMPLE_ITEM_VARIATION_ID_001",
     *                     quantityOrdered: "5"
     *                 }, {
     *                     itemVariationId: "EXAMPLE_ITEM_VARIATION_ID_002",
     *                     quantityOrdered: "3"
     *                 }]
     *         }
     *     })
     */
    public create(
        request: Square.CreateTransferOrderRequest,
        requestOptions?: TransferOrders.RequestOptions,
    ): core.HttpResponsePromise<Square.CreateTransferOrderResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Square.CreateTransferOrderRequest,
        requestOptions?: TransferOrders.RequestOptions,
    ): Promise<core.WithRawResponse<Square.CreateTransferOrderResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                "v2/transfer-orders",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-10-16",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.CreateTransferOrderRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.CreateTransferOrderResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/transfer-orders.");
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Searches for transfer orders using filters. Returns a paginated list of matching
     * [TransferOrder](entity:TransferOrder)s sorted by creation date.
     *
     * Common search scenarios:
     * - Find orders for a source [Location](entity:Location)
     * - Find orders for a destination [Location](entity:Location)
     * - Find orders in a particular [TransferOrderStatus](entity:TransferOrderStatus)
     *
     * @param {Square.SearchTransferOrdersRequest} request
     * @param {TransferOrders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.transferOrders.search({
     *         query: {
     *             filter: {
     *                 sourceLocationIds: ["EXAMPLE_SOURCE_LOCATION_ID_123"],
     *                 destinationLocationIds: ["EXAMPLE_DEST_LOCATION_ID_456"],
     *                 statuses: ["STARTED", "PARTIALLY_RECEIVED"]
     *             },
     *             sort: {
     *                 field: "UPDATED_AT",
     *                 order: "DESC"
     *             }
     *         },
     *         cursor: "eyJsYXN0X3VwZGF0ZWRfYXQiOjE3NTMxMTg2NjQ4NzN9",
     *         limit: 10
     *     })
     */
    public async search(
        request: Square.SearchTransferOrdersRequest = {},
        requestOptions?: TransferOrders.RequestOptions,
    ): Promise<core.Page<Square.TransferOrder>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Square.SearchTransferOrdersRequest,
            ): Promise<core.WithRawResponse<Square.SearchTransferOrdersResponse>> => {
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SquareEnvironment.Production,
                        "v2/transfer-orders/search",
                    ),
                    method: "POST",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "Square-Version": requestOptions?.version ?? "2025-10-16",
                        }),
                        requestOptions?.headers,
                    ),
                    contentType: "application/json",
                    requestType: "json",
                    body: serializers.SearchTransferOrdersRequest.jsonOrThrow(request, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    }),
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: serializers.SearchTransferOrdersResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SquareError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SquareError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SquareTimeoutError(
                            "Timeout exceeded when calling POST /v2/transfer-orders/search.",
                        );
                    case "unknown":
                        throw new errors.SquareError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Square.SearchTransferOrdersResponse, Square.TransferOrder>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.cursor != null && !(typeof response?.cursor === "string" && response?.cursor === ""),
            getItems: (response) => response?.transferOrders ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "cursor", response?.cursor));
            },
        });
    }

    /**
     * Retrieves a specific [TransferOrder](entity:TransferOrder) by ID. Returns the complete
     * order details including:
     *
     * - Basic information (status, dates, notes)
     * - Line items with ordered and received quantities
     * - Source and destination [Location](entity:Location)s
     * - Tracking information (if available)
     *
     * @param {Square.GetTransferOrdersRequest} request
     * @param {TransferOrders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.transferOrders.get({
     *         transferOrderId: "transfer_order_id"
     *     })
     */
    public get(
        request: Square.GetTransferOrdersRequest,
        requestOptions?: TransferOrders.RequestOptions,
    ): core.HttpResponsePromise<Square.RetrieveTransferOrderResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(request, requestOptions));
    }

    private async __get(
        request: Square.GetTransferOrdersRequest,
        requestOptions?: TransferOrders.RequestOptions,
    ): Promise<core.WithRawResponse<Square.RetrieveTransferOrderResponse>> {
        const { transferOrderId } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/transfer-orders/${encodeURIComponent(transferOrderId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-10-16",
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.RetrieveTransferOrderResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling GET /v2/transfer-orders/{transfer_order_id}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates an existing transfer order. This endpoint supports sparse updates,
     * allowing you to modify specific fields without affecting others.
     *
     * Creates a [transfer_order.updated](webhook:transfer_order.updated) webhook event.
     *
     * @param {Square.UpdateTransferOrderRequest} request
     * @param {TransferOrders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.transferOrders.update({
     *         transferOrderId: "transfer_order_id",
     *         idempotencyKey: "f47ac10b-58cc-4372-a567-0e02b2c3d479",
     *         transferOrder: {
     *             sourceLocationId: "EXAMPLE_SOURCE_LOCATION_ID_789",
     *             destinationLocationId: "EXAMPLE_DEST_LOCATION_ID_101",
     *             expectedAt: "2025-11-10T08:00:00Z",
     *             notes: "Updated: Priority transfer due to low stock at destination",
     *             trackingNumber: "TRACK987654321",
     *             lineItems: [{
     *                     uid: "1",
     *                     quantityOrdered: "7"
     *                 }, {
     *                     itemVariationId: "EXAMPLE_NEW_ITEM_VARIATION_ID_003",
     *                     quantityOrdered: "2"
     *                 }, {
     *                     uid: "2",
     *                     remove: true
     *                 }]
     *         },
     *         version: BigInt("1753109537351")
     *     })
     */
    public update(
        request: Square.UpdateTransferOrderRequest,
        requestOptions?: TransferOrders.RequestOptions,
    ): core.HttpResponsePromise<Square.UpdateTransferOrderResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(request, requestOptions));
    }

    private async __update(
        request: Square.UpdateTransferOrderRequest,
        requestOptions?: TransferOrders.RequestOptions,
    ): Promise<core.WithRawResponse<Square.UpdateTransferOrderResponse>> {
        const { transferOrderId, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/transfer-orders/${encodeURIComponent(transferOrderId)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-10-16",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.UpdateTransferOrderRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.UpdateTransferOrderResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling PUT /v2/transfer-orders/{transfer_order_id}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes a transfer order in [DRAFT](entity:TransferOrderStatus) status.
     * Only draft orders can be deleted. Once an order is started via
     * [StartTransferOrder](api-endpoint:TransferOrders-StartTransferOrder), it can no longer be deleted.
     *
     * Creates a [transfer_order.deleted](webhook:transfer_order.deleted) webhook event.
     *
     * @param {Square.DeleteTransferOrdersRequest} request
     * @param {TransferOrders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.transferOrders.delete({
     *         transferOrderId: "transfer_order_id",
     *         version: BigInt("1000000")
     *     })
     */
    public delete(
        request: Square.DeleteTransferOrdersRequest,
        requestOptions?: TransferOrders.RequestOptions,
    ): core.HttpResponsePromise<Square.DeleteTransferOrderResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(request, requestOptions));
    }

    private async __delete(
        request: Square.DeleteTransferOrdersRequest,
        requestOptions?: TransferOrders.RequestOptions,
    ): Promise<core.WithRawResponse<Square.DeleteTransferOrderResponse>> {
        const { transferOrderId, version } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (version !== undefined) {
            _queryParams["version"] = version?.toString() ?? null;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/transfer-orders/${encodeURIComponent(transferOrderId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-10-16",
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.DeleteTransferOrderResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling DELETE /v2/transfer-orders/{transfer_order_id}.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Cancels a transfer order in [STARTED](entity:TransferOrderStatus) or
     * [PARTIALLY_RECEIVED](entity:TransferOrderStatus) status. Any unreceived quantities will no
     * longer be receivable and will be immediately returned to the source [Location](entity:Location)'s inventory.
     *
     * Common reasons for cancellation:
     * - Items no longer needed at destination
     * - Source location needs the inventory
     * - Order created in error
     *
     * Creates a [transfer_order.updated](webhook:transfer_order.updated) webhook event.
     *
     * @param {Square.CancelTransferOrderRequest} request
     * @param {TransferOrders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.transferOrders.cancel({
     *         transferOrderId: "transfer_order_id",
     *         idempotencyKey: "65cc0586-3e82-4d08-b524-3885cffd52",
     *         version: BigInt("1753117449752")
     *     })
     */
    public cancel(
        request: Square.CancelTransferOrderRequest,
        requestOptions?: TransferOrders.RequestOptions,
    ): core.HttpResponsePromise<Square.CancelTransferOrderResponse> {
        return core.HttpResponsePromise.fromPromise(this.__cancel(request, requestOptions));
    }

    private async __cancel(
        request: Square.CancelTransferOrderRequest,
        requestOptions?: TransferOrders.RequestOptions,
    ): Promise<core.WithRawResponse<Square.CancelTransferOrderResponse>> {
        const { transferOrderId, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/transfer-orders/${encodeURIComponent(transferOrderId)}/cancel`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-10-16",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.CancelTransferOrderRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.CancelTransferOrderResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling POST /v2/transfer-orders/{transfer_order_id}/cancel.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Records receipt of [CatalogItemVariation](entity:CatalogItemVariation)s for a transfer order.
     * This endpoint supports partial receiving - you can receive items in multiple batches.
     *
     * For each line item, you can specify:
     * - Quantity received in good condition (added to destination inventory with [InventoryState](entity:InventoryState) of IN_STOCK)
     * - Quantity damaged during transit/handling (added to destination inventory with [InventoryState](entity:InventoryState) of WASTE)
     * - Quantity canceled (returned to source location's inventory)
     *
     * The order must be in [STARTED](entity:TransferOrderStatus) or [PARTIALLY_RECEIVED](entity:TransferOrderStatus) status.
     * Received quantities are added to the destination [Location](entity:Location)'s inventory according to their condition.
     * Canceled quantities are immediately returned to the source [Location](entity:Location)'s inventory.
     *
     * When all items are either received, damaged, or canceled, the order moves to
     * [COMPLETED](entity:TransferOrderStatus) status.
     *
     * Creates a [transfer_order.updated](webhook:transfer_order.updated) webhook event.
     *
     * @param {Square.ReceiveTransferOrderRequest} request
     * @param {TransferOrders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.transferOrders.receive({
     *         transferOrderId: "transfer_order_id",
     *         idempotencyKey: "EXAMPLE_IDEMPOTENCY_KEY_101",
     *         receipt: {
     *             lineItems: [{
     *                     transferOrderLineUid: "transfer_order_line_uid",
     *                     quantityReceived: "3",
     *                     quantityDamaged: "1",
     *                     quantityCanceled: "1"
     *                 }, {
     *                     transferOrderLineUid: "transfer_order_line_uid",
     *                     quantityReceived: "2",
     *                     quantityCanceled: "1"
     *                 }]
     *         },
     *         version: BigInt("1753118664873")
     *     })
     */
    public receive(
        request: Square.ReceiveTransferOrderRequest,
        requestOptions?: TransferOrders.RequestOptions,
    ): core.HttpResponsePromise<Square.ReceiveTransferOrderResponse> {
        return core.HttpResponsePromise.fromPromise(this.__receive(request, requestOptions));
    }

    private async __receive(
        request: Square.ReceiveTransferOrderRequest,
        requestOptions?: TransferOrders.RequestOptions,
    ): Promise<core.WithRawResponse<Square.ReceiveTransferOrderResponse>> {
        const { transferOrderId, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/transfer-orders/${encodeURIComponent(transferOrderId)}/receive`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-10-16",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.ReceiveTransferOrderRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ReceiveTransferOrderResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling POST /v2/transfer-orders/{transfer_order_id}/receive.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Changes a [DRAFT](entity:TransferOrderStatus) transfer order to [STARTED](entity:TransferOrderStatus) status.
     * This decrements inventory at the source [Location](entity:Location) and marks it as in-transit.
     *
     * The order must be in [DRAFT](entity:TransferOrderStatus) status and have all required fields populated.
     * Once started, the order can no longer be deleted, but it can be canceled via
     * [CancelTransferOrder](api-endpoint:TransferOrders-CancelTransferOrder).
     *
     * Creates a [transfer_order.updated](webhook:transfer_order.updated) webhook event.
     *
     * @param {Square.StartTransferOrderRequest} request
     * @param {TransferOrders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.transferOrders.start({
     *         transferOrderId: "transfer_order_id",
     *         idempotencyKey: "EXAMPLE_IDEMPOTENCY_KEY_789",
     *         version: BigInt("1753109537351")
     *     })
     */
    public start(
        request: Square.StartTransferOrderRequest,
        requestOptions?: TransferOrders.RequestOptions,
    ): core.HttpResponsePromise<Square.StartTransferOrderResponse> {
        return core.HttpResponsePromise.fromPromise(this.__start(request, requestOptions));
    }

    private async __start(
        request: Square.StartTransferOrderRequest,
        requestOptions?: TransferOrders.RequestOptions,
    ): Promise<core.WithRawResponse<Square.StartTransferOrderResponse>> {
        const { transferOrderId, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SquareEnvironment.Production,
                `v2/transfer-orders/${encodeURIComponent(transferOrderId)}/start`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Square-Version": requestOptions?.version ?? "2025-10-16",
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.StartTransferOrderRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.StartTransferOrderResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquareError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SquareTimeoutError(
                    "Timeout exceeded when calling POST /v2/transfer-orders/{transfer_order_id}/start.",
                );
            case "unknown":
                throw new errors.SquareError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SQUARE_TOKEN"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
