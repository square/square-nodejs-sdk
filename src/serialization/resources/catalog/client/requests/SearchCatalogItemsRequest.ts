/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as Square from "../../../../../api/index";
import * as core from "../../../../../core";
import { SearchCatalogItemsRequestStockLevel } from "../../../../types/SearchCatalogItemsRequestStockLevel";
import { SortOrder } from "../../../../types/SortOrder";
import { CatalogItemProductType } from "../../../../types/CatalogItemProductType";
import { CustomAttributeFilter } from "../../../../types/CustomAttributeFilter";
import { ArchivedState } from "../../../../types/ArchivedState";

export const SearchCatalogItemsRequest: core.serialization.Schema<
    serializers.SearchCatalogItemsRequest.Raw,
    Square.SearchCatalogItemsRequest
> = core.serialization.object({
    textFilter: core.serialization.property("text_filter", core.serialization.string().optional()),
    categoryIds: core.serialization.property(
        "category_ids",
        core.serialization.list(core.serialization.string()).optional(),
    ),
    stockLevels: core.serialization.property(
        "stock_levels",
        core.serialization.list(SearchCatalogItemsRequestStockLevel).optional(),
    ),
    enabledLocationIds: core.serialization.property(
        "enabled_location_ids",
        core.serialization.list(core.serialization.string()).optional(),
    ),
    cursor: core.serialization.string().optional(),
    limit: core.serialization.number().optional(),
    sortOrder: core.serialization.property("sort_order", SortOrder.optional()),
    productTypes: core.serialization.property(
        "product_types",
        core.serialization.list(CatalogItemProductType).optional(),
    ),
    customAttributeFilters: core.serialization.property(
        "custom_attribute_filters",
        core.serialization.list(CustomAttributeFilter).optional(),
    ),
    archivedState: core.serialization.property("archived_state", ArchivedState.optional()),
});

export declare namespace SearchCatalogItemsRequest {
    export interface Raw {
        text_filter?: string | null;
        category_ids?: string[] | null;
        stock_levels?: SearchCatalogItemsRequestStockLevel.Raw[] | null;
        enabled_location_ids?: string[] | null;
        cursor?: string | null;
        limit?: number | null;
        sort_order?: SortOrder.Raw | null;
        product_types?: CatalogItemProductType.Raw[] | null;
        custom_attribute_filters?: CustomAttributeFilter.Raw[] | null;
        archived_state?: ArchivedState.Raw | null;
    }
}
