// This file was auto-generated by Fern from our API Definition.

import type * as Square from "../../api/index";
import * as core from "../../core";
import * as serializers from "../index";
import { CatalogEcomSeoData } from "./CatalogEcomSeoData";
import { CatalogItemFoodAndBeverageDetails } from "./CatalogItemFoodAndBeverageDetails";
import { CatalogItemModifierListInfo } from "./CatalogItemModifierListInfo";
import { CatalogItemOptionForItem } from "./CatalogItemOptionForItem";
import { CatalogItemProductType } from "./CatalogItemProductType";

export const CatalogItem: core.serialization.ObjectSchema<serializers.CatalogItem.Raw, Square.CatalogItem> =
    core.serialization.object({
        name: core.serialization.string().optionalNullable(),
        description: core.serialization.string().optionalNullable(),
        abbreviation: core.serialization.string().optionalNullable(),
        labelColor: core.serialization.property("label_color", core.serialization.string().optionalNullable()),
        isTaxable: core.serialization.property("is_taxable", core.serialization.boolean().optionalNullable()),
        categoryId: core.serialization.property("category_id", core.serialization.string().optionalNullable()),
        taxIds: core.serialization.property(
            "tax_ids",
            core.serialization.list(core.serialization.string()).optionalNullable(),
        ),
        modifierListInfo: core.serialization.property(
            "modifier_list_info",
            core.serialization.list(CatalogItemModifierListInfo).optionalNullable(),
        ),
        variations: core.serialization
            .list(core.serialization.lazy(() => serializers.CatalogObject))
            .optionalNullable(),
        productType: core.serialization.property("product_type", CatalogItemProductType.optional()),
        skipModifierScreen: core.serialization.property(
            "skip_modifier_screen",
            core.serialization.boolean().optionalNullable(),
        ),
        itemOptions: core.serialization.property(
            "item_options",
            core.serialization.list(CatalogItemOptionForItem).optionalNullable(),
        ),
        ecomUri: core.serialization.property("ecom_uri", core.serialization.string().optionalNullable()),
        ecomImageUris: core.serialization.property(
            "ecom_image_uris",
            core.serialization.list(core.serialization.string()).optionalNullable(),
        ),
        imageIds: core.serialization.property(
            "image_ids",
            core.serialization.list(core.serialization.string()).optionalNullable(),
        ),
        sortName: core.serialization.property("sort_name", core.serialization.string().optionalNullable()),
        categories: core.serialization
            .list(core.serialization.lazyObject(() => serializers.CatalogObjectCategory))
            .optionalNullable(),
        descriptionHtml: core.serialization.property(
            "description_html",
            core.serialization.string().optionalNullable(),
        ),
        descriptionPlaintext: core.serialization.property(
            "description_plaintext",
            core.serialization.string().optional(),
        ),
        channels: core.serialization.list(core.serialization.string()).optionalNullable(),
        isArchived: core.serialization.property("is_archived", core.serialization.boolean().optionalNullable()),
        ecomSeoData: core.serialization.property("ecom_seo_data", CatalogEcomSeoData.optional()),
        foodAndBeverageDetails: core.serialization.property(
            "food_and_beverage_details",
            CatalogItemFoodAndBeverageDetails.optional(),
        ),
        reportingCategory: core.serialization.property(
            "reporting_category",
            core.serialization.lazyObject(() => serializers.CatalogObjectCategory).optional(),
        ),
        isAlcoholic: core.serialization.property("is_alcoholic", core.serialization.boolean().optionalNullable()),
    });

export declare namespace CatalogItem {
    export interface Raw {
        name?: (string | null | undefined) | null;
        description?: (string | null | undefined) | null;
        abbreviation?: (string | null | undefined) | null;
        label_color?: (string | null | undefined) | null;
        is_taxable?: (boolean | null | undefined) | null;
        category_id?: (string | null | undefined) | null;
        tax_ids?: (string[] | null | undefined) | null;
        modifier_list_info?: (CatalogItemModifierListInfo.Raw[] | null | undefined) | null;
        variations?: (serializers.CatalogObject.Raw[] | null | undefined) | null;
        product_type?: CatalogItemProductType.Raw | null;
        skip_modifier_screen?: (boolean | null | undefined) | null;
        item_options?: (CatalogItemOptionForItem.Raw[] | null | undefined) | null;
        ecom_uri?: (string | null | undefined) | null;
        ecom_image_uris?: (string[] | null | undefined) | null;
        image_ids?: (string[] | null | undefined) | null;
        sort_name?: (string | null | undefined) | null;
        categories?: (serializers.CatalogObjectCategory.Raw[] | null | undefined) | null;
        description_html?: (string | null | undefined) | null;
        description_plaintext?: string | null;
        channels?: (string[] | null | undefined) | null;
        is_archived?: (boolean | null | undefined) | null;
        ecom_seo_data?: CatalogEcomSeoData.Raw | null;
        food_and_beverage_details?: CatalogItemFoodAndBeverageDetails.Raw | null;
        reporting_category?: serializers.CatalogObjectCategory.Raw | null;
        is_alcoholic?: (boolean | null | undefined) | null;
    }
}
