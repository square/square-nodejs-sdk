/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Square from "../../api/index";
import * as core from "../../core";
import { BusinessAppointmentSettingsBookingLocationType } from "./BusinessAppointmentSettingsBookingLocationType";
import { BusinessAppointmentSettingsAlignmentTime } from "./BusinessAppointmentSettingsAlignmentTime";
import { BusinessAppointmentSettingsMaxAppointmentsPerDayLimitType } from "./BusinessAppointmentSettingsMaxAppointmentsPerDayLimitType";
import { Money } from "./Money";
import { BusinessAppointmentSettingsCancellationPolicy } from "./BusinessAppointmentSettingsCancellationPolicy";

export const BusinessAppointmentSettings: core.serialization.ObjectSchema<
    serializers.BusinessAppointmentSettings.Raw,
    Square.BusinessAppointmentSettings
> = core.serialization.object({
    locationTypes: core.serialization.property(
        "location_types",
        core.serialization.list(BusinessAppointmentSettingsBookingLocationType).optionalNullable(),
    ),
    alignmentTime: core.serialization.property("alignment_time", BusinessAppointmentSettingsAlignmentTime.optional()),
    minBookingLeadTimeSeconds: core.serialization.property(
        "min_booking_lead_time_seconds",
        core.serialization.number().optionalNullable(),
    ),
    maxBookingLeadTimeSeconds: core.serialization.property(
        "max_booking_lead_time_seconds",
        core.serialization.number().optionalNullable(),
    ),
    anyTeamMemberBookingEnabled: core.serialization.property(
        "any_team_member_booking_enabled",
        core.serialization.boolean().optionalNullable(),
    ),
    multipleServiceBookingEnabled: core.serialization.property(
        "multiple_service_booking_enabled",
        core.serialization.boolean().optionalNullable(),
    ),
    maxAppointmentsPerDayLimitType: core.serialization.property(
        "max_appointments_per_day_limit_type",
        BusinessAppointmentSettingsMaxAppointmentsPerDayLimitType.optional(),
    ),
    maxAppointmentsPerDayLimit: core.serialization.property(
        "max_appointments_per_day_limit",
        core.serialization.number().optionalNullable(),
    ),
    cancellationWindowSeconds: core.serialization.property(
        "cancellation_window_seconds",
        core.serialization.number().optionalNullable(),
    ),
    cancellationFeeMoney: core.serialization.property("cancellation_fee_money", Money.optional()),
    cancellationPolicy: core.serialization.property(
        "cancellation_policy",
        BusinessAppointmentSettingsCancellationPolicy.optional(),
    ),
    cancellationPolicyText: core.serialization.property(
        "cancellation_policy_text",
        core.serialization.string().optionalNullable(),
    ),
    skipBookingFlowStaffSelection: core.serialization.property(
        "skip_booking_flow_staff_selection",
        core.serialization.boolean().optionalNullable(),
    ),
});

export declare namespace BusinessAppointmentSettings {
    export interface Raw {
        location_types?: (BusinessAppointmentSettingsBookingLocationType.Raw[] | null) | null;
        alignment_time?: BusinessAppointmentSettingsAlignmentTime.Raw | null;
        min_booking_lead_time_seconds?: (number | null) | null;
        max_booking_lead_time_seconds?: (number | null) | null;
        any_team_member_booking_enabled?: (boolean | null) | null;
        multiple_service_booking_enabled?: (boolean | null) | null;
        max_appointments_per_day_limit_type?: BusinessAppointmentSettingsMaxAppointmentsPerDayLimitType.Raw | null;
        max_appointments_per_day_limit?: (number | null) | null;
        cancellation_window_seconds?: (number | null) | null;
        cancellation_fee_money?: Money.Raw | null;
        cancellation_policy?: BusinessAppointmentSettingsCancellationPolicy.Raw | null;
        cancellation_policy_text?: (string | null) | null;
        skip_booking_flow_staff_selection?: (boolean | null) | null;
    }
}
