// This file was auto-generated by Fern from our API Definition.

import type * as Square from "../../api/index";
import * as core from "../../core";
import type * as serializers from "../index";
import { CatalogItemOptionValueForItemVariation } from "./CatalogItemOptionValueForItemVariation";
import { CatalogPricingType } from "./CatalogPricingType";
import { CatalogStockConversion } from "./CatalogStockConversion";
import { InventoryAlertType } from "./InventoryAlertType";
import { ItemVariationLocationOverrides } from "./ItemVariationLocationOverrides";
import { Money } from "./Money";

export const CatalogItemVariation: core.serialization.ObjectSchema<
    serializers.CatalogItemVariation.Raw,
    Square.CatalogItemVariation
> = core.serialization.object({
    itemId: core.serialization.property("item_id", core.serialization.string().optionalNullable()),
    name: core.serialization.string().optionalNullable(),
    sku: core.serialization.string().optionalNullable(),
    upc: core.serialization.string().optionalNullable(),
    ordinal: core.serialization.number().optional(),
    pricingType: core.serialization.property("pricing_type", CatalogPricingType.optional()),
    priceMoney: core.serialization.property("price_money", Money.optional()),
    locationOverrides: core.serialization.property(
        "location_overrides",
        core.serialization.list(ItemVariationLocationOverrides).optionalNullable(),
    ),
    trackInventory: core.serialization.property("track_inventory", core.serialization.boolean().optionalNullable()),
    inventoryAlertType: core.serialization.property("inventory_alert_type", InventoryAlertType.optional()),
    inventoryAlertThreshold: core.serialization.property(
        "inventory_alert_threshold",
        core.serialization.bigint().optionalNullable(),
    ),
    userData: core.serialization.property("user_data", core.serialization.string().optionalNullable()),
    serviceDuration: core.serialization.property("service_duration", core.serialization.bigint().optionalNullable()),
    availableForBooking: core.serialization.property(
        "available_for_booking",
        core.serialization.boolean().optionalNullable(),
    ),
    itemOptionValues: core.serialization.property(
        "item_option_values",
        core.serialization.list(CatalogItemOptionValueForItemVariation).optionalNullable(),
    ),
    measurementUnitId: core.serialization.property(
        "measurement_unit_id",
        core.serialization.string().optionalNullable(),
    ),
    sellable: core.serialization.boolean().optionalNullable(),
    stockable: core.serialization.boolean().optionalNullable(),
    imageIds: core.serialization.property(
        "image_ids",
        core.serialization.list(core.serialization.string()).optionalNullable(),
    ),
    teamMemberIds: core.serialization.property(
        "team_member_ids",
        core.serialization.list(core.serialization.string()).optionalNullable(),
    ),
    stockableConversion: core.serialization.property("stockable_conversion", CatalogStockConversion.optional()),
});

export declare namespace CatalogItemVariation {
    export interface Raw {
        item_id?: (string | null | undefined) | null;
        name?: (string | null | undefined) | null;
        sku?: (string | null | undefined) | null;
        upc?: (string | null | undefined) | null;
        ordinal?: number | null;
        pricing_type?: CatalogPricingType.Raw | null;
        price_money?: Money.Raw | null;
        location_overrides?: (ItemVariationLocationOverrides.Raw[] | null | undefined) | null;
        track_inventory?: (boolean | null | undefined) | null;
        inventory_alert_type?: InventoryAlertType.Raw | null;
        inventory_alert_threshold?: ((bigint | number) | null | undefined) | null;
        user_data?: (string | null | undefined) | null;
        service_duration?: ((bigint | number) | null | undefined) | null;
        available_for_booking?: (boolean | null | undefined) | null;
        item_option_values?: (CatalogItemOptionValueForItemVariation.Raw[] | null | undefined) | null;
        measurement_unit_id?: (string | null | undefined) | null;
        sellable?: (boolean | null | undefined) | null;
        stockable?: (boolean | null | undefined) | null;
        image_ids?: (string[] | null | undefined) | null;
        team_member_ids?: (string[] | null | undefined) | null;
        stockable_conversion?: CatalogStockConversion.Raw | null;
    }
}
