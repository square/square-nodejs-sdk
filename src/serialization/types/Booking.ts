/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Square from "../../api/index";
import * as core from "../../core";
import { BookingStatus } from "./BookingStatus";
import { AppointmentSegment } from "./AppointmentSegment";
import { BusinessAppointmentSettingsBookingLocationType } from "./BusinessAppointmentSettingsBookingLocationType";
import { BookingCreatorDetails } from "./BookingCreatorDetails";
import { BookingBookingSource } from "./BookingBookingSource";
import { Address } from "./Address";

export const Booking: core.serialization.ObjectSchema<serializers.Booking.Raw, Square.Booking> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        version: core.serialization.number().optional(),
        status: BookingStatus.optional(),
        createdAt: core.serialization.property("created_at", core.serialization.string().optional()),
        updatedAt: core.serialization.property("updated_at", core.serialization.string().optional()),
        startAt: core.serialization.property("start_at", core.serialization.string().optionalNullable()),
        locationId: core.serialization.property("location_id", core.serialization.string().optionalNullable()),
        customerId: core.serialization.property("customer_id", core.serialization.string().optionalNullable()),
        customerNote: core.serialization.property("customer_note", core.serialization.string().optionalNullable()),
        sellerNote: core.serialization.property("seller_note", core.serialization.string().optionalNullable()),
        appointmentSegments: core.serialization.property(
            "appointment_segments",
            core.serialization.list(AppointmentSegment).optionalNullable(),
        ),
        transitionTimeMinutes: core.serialization.property(
            "transition_time_minutes",
            core.serialization.number().optional(),
        ),
        allDay: core.serialization.property("all_day", core.serialization.boolean().optional()),
        locationType: core.serialization.property(
            "location_type",
            BusinessAppointmentSettingsBookingLocationType.optional(),
        ),
        creatorDetails: core.serialization.property("creator_details", BookingCreatorDetails.optional()),
        source: BookingBookingSource.optional(),
        address: Address.optional(),
    });

export declare namespace Booking {
    export interface Raw {
        id?: string | null;
        version?: number | null;
        status?: BookingStatus.Raw | null;
        created_at?: string | null;
        updated_at?: string | null;
        start_at?: (string | null) | null;
        location_id?: (string | null) | null;
        customer_id?: (string | null) | null;
        customer_note?: (string | null) | null;
        seller_note?: (string | null) | null;
        appointment_segments?: (AppointmentSegment.Raw[] | null) | null;
        transition_time_minutes?: number | null;
        all_day?: boolean | null;
        location_type?: BusinessAppointmentSettingsBookingLocationType.Raw | null;
        creator_details?: BookingCreatorDetails.Raw | null;
        source?: BookingBookingSource.Raw | null;
        address?: Address.Raw | null;
    }
}
