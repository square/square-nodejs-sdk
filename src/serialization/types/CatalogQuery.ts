/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Square from "../../api/index";
import * as core from "../../core";
import { CatalogQuerySortedAttribute } from "./CatalogQuerySortedAttribute";
import { CatalogQueryExact } from "./CatalogQueryExact";
import { CatalogQuerySet } from "./CatalogQuerySet";
import { CatalogQueryPrefix } from "./CatalogQueryPrefix";
import { CatalogQueryRange } from "./CatalogQueryRange";
import { CatalogQueryText } from "./CatalogQueryText";
import { CatalogQueryItemsForTax } from "./CatalogQueryItemsForTax";
import { CatalogQueryItemsForModifierList } from "./CatalogQueryItemsForModifierList";
import { CatalogQueryItemsForItemOptions } from "./CatalogQueryItemsForItemOptions";
import { CatalogQueryItemVariationsForItemOptionValues } from "./CatalogQueryItemVariationsForItemOptionValues";

export const CatalogQuery: core.serialization.ObjectSchema<serializers.CatalogQuery.Raw, Square.CatalogQuery> =
    core.serialization.object({
        sortedAttributeQuery: core.serialization.property(
            "sorted_attribute_query",
            CatalogQuerySortedAttribute.optional(),
        ),
        exactQuery: core.serialization.property("exact_query", CatalogQueryExact.optional()),
        setQuery: core.serialization.property("set_query", CatalogQuerySet.optional()),
        prefixQuery: core.serialization.property("prefix_query", CatalogQueryPrefix.optional()),
        rangeQuery: core.serialization.property("range_query", CatalogQueryRange.optional()),
        textQuery: core.serialization.property("text_query", CatalogQueryText.optional()),
        itemsForTaxQuery: core.serialization.property("items_for_tax_query", CatalogQueryItemsForTax.optional()),
        itemsForModifierListQuery: core.serialization.property(
            "items_for_modifier_list_query",
            CatalogQueryItemsForModifierList.optional(),
        ),
        itemsForItemOptionsQuery: core.serialization.property(
            "items_for_item_options_query",
            CatalogQueryItemsForItemOptions.optional(),
        ),
        itemVariationsForItemOptionValuesQuery: core.serialization.property(
            "item_variations_for_item_option_values_query",
            CatalogQueryItemVariationsForItemOptionValues.optional(),
        ),
    });

export declare namespace CatalogQuery {
    export interface Raw {
        sorted_attribute_query?: CatalogQuerySortedAttribute.Raw | null;
        exact_query?: CatalogQueryExact.Raw | null;
        set_query?: CatalogQuerySet.Raw | null;
        prefix_query?: CatalogQueryPrefix.Raw | null;
        range_query?: CatalogQueryRange.Raw | null;
        text_query?: CatalogQueryText.Raw | null;
        items_for_tax_query?: CatalogQueryItemsForTax.Raw | null;
        items_for_modifier_list_query?: CatalogQueryItemsForModifierList.Raw | null;
        items_for_item_options_query?: CatalogQueryItemsForItemOptions.Raw | null;
        item_variations_for_item_option_values_query?: CatalogQueryItemVariationsForItemOptionValues.Raw | null;
    }
}
