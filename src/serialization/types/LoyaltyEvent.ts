/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Square from "../../api/index";
import * as core from "../../core";
import { LoyaltyEventType } from "./LoyaltyEventType";
import { LoyaltyEventAccumulatePoints } from "./LoyaltyEventAccumulatePoints";
import { LoyaltyEventCreateReward } from "./LoyaltyEventCreateReward";
import { LoyaltyEventRedeemReward } from "./LoyaltyEventRedeemReward";
import { LoyaltyEventDeleteReward } from "./LoyaltyEventDeleteReward";
import { LoyaltyEventAdjustPoints } from "./LoyaltyEventAdjustPoints";
import { LoyaltyEventSource } from "./LoyaltyEventSource";
import { LoyaltyEventExpirePoints } from "./LoyaltyEventExpirePoints";
import { LoyaltyEventOther } from "./LoyaltyEventOther";
import { LoyaltyEventAccumulatePromotionPoints } from "./LoyaltyEventAccumulatePromotionPoints";

export const LoyaltyEvent: core.serialization.ObjectSchema<serializers.LoyaltyEvent.Raw, Square.LoyaltyEvent> =
    core.serialization.object({
        id: core.serialization.string(),
        type: LoyaltyEventType,
        createdAt: core.serialization.property("created_at", core.serialization.string()),
        accumulatePoints: core.serialization.property("accumulate_points", LoyaltyEventAccumulatePoints.optional()),
        createReward: core.serialization.property("create_reward", LoyaltyEventCreateReward.optional()),
        redeemReward: core.serialization.property("redeem_reward", LoyaltyEventRedeemReward.optional()),
        deleteReward: core.serialization.property("delete_reward", LoyaltyEventDeleteReward.optional()),
        adjustPoints: core.serialization.property("adjust_points", LoyaltyEventAdjustPoints.optional()),
        loyaltyAccountId: core.serialization.property("loyalty_account_id", core.serialization.string()),
        locationId: core.serialization.property("location_id", core.serialization.string().optional()),
        source: LoyaltyEventSource,
        expirePoints: core.serialization.property("expire_points", LoyaltyEventExpirePoints.optional()),
        otherEvent: core.serialization.property("other_event", LoyaltyEventOther.optional()),
        accumulatePromotionPoints: core.serialization.property(
            "accumulate_promotion_points",
            LoyaltyEventAccumulatePromotionPoints.optional(),
        ),
    });

export declare namespace LoyaltyEvent {
    export interface Raw {
        id: string;
        type: LoyaltyEventType.Raw;
        created_at: string;
        accumulate_points?: LoyaltyEventAccumulatePoints.Raw | null;
        create_reward?: LoyaltyEventCreateReward.Raw | null;
        redeem_reward?: LoyaltyEventRedeemReward.Raw | null;
        delete_reward?: LoyaltyEventDeleteReward.Raw | null;
        adjust_points?: LoyaltyEventAdjustPoints.Raw | null;
        loyalty_account_id: string;
        location_id?: string | null;
        source: LoyaltyEventSource.Raw;
        expire_points?: LoyaltyEventExpirePoints.Raw | null;
        other_event?: LoyaltyEventOther.Raw | null;
        accumulate_promotion_points?: LoyaltyEventAccumulatePromotionPoints.Raw | null;
    }
}
