/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Square from "../../api/index";
import * as core from "../../core";
import { Address } from "./Address";
import { LocationCapability } from "./LocationCapability";
import { LocationStatus } from "./LocationStatus";
import { Country } from "./Country";
import { Currency } from "./Currency";
import { LocationType } from "./LocationType";
import { BusinessHours } from "./BusinessHours";
import { Coordinates } from "./Coordinates";
import { TaxIds } from "./TaxIds";

export const Location: core.serialization.ObjectSchema<serializers.Location.Raw, Square.Location> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        name: core.serialization.string().optionalNullable(),
        address: Address.optional(),
        timezone: core.serialization.string().optionalNullable(),
        capabilities: core.serialization.list(LocationCapability).optional(),
        status: LocationStatus.optional(),
        createdAt: core.serialization.property("created_at", core.serialization.string().optional()),
        merchantId: core.serialization.property("merchant_id", core.serialization.string().optional()),
        country: Country.optional(),
        languageCode: core.serialization.property("language_code", core.serialization.string().optionalNullable()),
        currency: Currency.optional(),
        phoneNumber: core.serialization.property("phone_number", core.serialization.string().optionalNullable()),
        businessName: core.serialization.property("business_name", core.serialization.string().optionalNullable()),
        type: LocationType.optional(),
        websiteUrl: core.serialization.property("website_url", core.serialization.string().optionalNullable()),
        businessHours: core.serialization.property("business_hours", BusinessHours.optional()),
        businessEmail: core.serialization.property("business_email", core.serialization.string().optionalNullable()),
        description: core.serialization.string().optionalNullable(),
        twitterUsername: core.serialization.property(
            "twitter_username",
            core.serialization.string().optionalNullable(),
        ),
        instagramUsername: core.serialization.property(
            "instagram_username",
            core.serialization.string().optionalNullable(),
        ),
        facebookUrl: core.serialization.property("facebook_url", core.serialization.string().optionalNullable()),
        coordinates: Coordinates.optional(),
        logoUrl: core.serialization.property("logo_url", core.serialization.string().optional()),
        posBackgroundUrl: core.serialization.property("pos_background_url", core.serialization.string().optional()),
        mcc: core.serialization.string().optionalNullable(),
        fullFormatLogoUrl: core.serialization.property("full_format_logo_url", core.serialization.string().optional()),
        taxIds: core.serialization.property("tax_ids", TaxIds.optional()),
    });

export declare namespace Location {
    export interface Raw {
        id?: string | null;
        name?: (string | null) | null;
        address?: Address.Raw | null;
        timezone?: (string | null) | null;
        capabilities?: LocationCapability.Raw[] | null;
        status?: LocationStatus.Raw | null;
        created_at?: string | null;
        merchant_id?: string | null;
        country?: Country.Raw | null;
        language_code?: (string | null) | null;
        currency?: Currency.Raw | null;
        phone_number?: (string | null) | null;
        business_name?: (string | null) | null;
        type?: LocationType.Raw | null;
        website_url?: (string | null) | null;
        business_hours?: BusinessHours.Raw | null;
        business_email?: (string | null) | null;
        description?: (string | null) | null;
        twitter_username?: (string | null) | null;
        instagram_username?: (string | null) | null;
        facebook_url?: (string | null) | null;
        coordinates?: Coordinates.Raw | null;
        logo_url?: string | null;
        pos_background_url?: string | null;
        mcc?: (string | null) | null;
        full_format_logo_url?: string | null;
        tax_ids?: TaxIds.Raw | null;
    }
}
