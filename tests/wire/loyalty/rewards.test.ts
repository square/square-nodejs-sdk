/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { SquareClient } from "../../../src/Client";

describe("Rewards", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            reward: {
                loyalty_account_id: "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
                reward_tier_id: "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
                order_id: "RFZfrdtm3mhO1oGzf5Cx7fEMsmGZY",
            },
            idempotency_key: "18c2e5ea-a620-4b1f-ad60-7b167285e451",
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            reward: {
                id: "a8f43ebe-2ad6-3001-bdd5-7d7c2da08943",
                status: "ISSUED",
                loyalty_account_id: "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
                reward_tier_id: "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
                points: 10,
                order_id: "RFZfrdtm3mhO1oGzf5Cx7fEMsmGZY",
                created_at: "2020-05-01T21:49:54Z",
                updated_at: "2020-05-01T21:49:54Z",
                redeemed_at: "redeemed_at",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/loyalty/rewards")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.loyalty.rewards.create({
            reward: {
                loyaltyAccountId: "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
                rewardTierId: "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
                orderId: "RFZfrdtm3mhO1oGzf5Cx7fEMsmGZY",
            },
            idempotencyKey: "18c2e5ea-a620-4b1f-ad60-7b167285e451",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            reward: {
                id: "a8f43ebe-2ad6-3001-bdd5-7d7c2da08943",
                status: "ISSUED",
                loyaltyAccountId: "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
                rewardTierId: "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
                points: 10,
                orderId: "RFZfrdtm3mhO1oGzf5Cx7fEMsmGZY",
                createdAt: "2020-05-01T21:49:54Z",
                updatedAt: "2020-05-01T21:49:54Z",
                redeemedAt: "redeemed_at",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            reward: {
                id: "9f18ac21-233a-31c3-be77-b45840f5a810",
                status: "REDEEMED",
                loyalty_account_id: "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
                reward_tier_id: "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
                points: 10,
                order_id: "order_id",
                created_at: "2020-05-08T21:55:42Z",
                updated_at: "2020-05-08T21:56:00Z",
                redeemed_at: "2020-05-08T21:56:00Z",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/loyalty/rewards/reward_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.loyalty.rewards.get({
            rewardId: "reward_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            reward: {
                id: "9f18ac21-233a-31c3-be77-b45840f5a810",
                status: "REDEEMED",
                loyaltyAccountId: "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
                rewardTierId: "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
                points: 10,
                orderId: "order_id",
                createdAt: "2020-05-08T21:55:42Z",
                updatedAt: "2020-05-08T21:56:00Z",
                redeemedAt: "2020-05-08T21:56:00Z",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/loyalty/rewards/reward_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.loyalty.rewards.delete({
            rewardId: "reward_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("redeem", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "98adc7f7-6963-473b-b29c-f3c9cdd7d994",
            location_id: "P034NEENMD09F",
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            event: {
                id: "67377a6e-dbdc-369d-aa16-2e7ed422e71f",
                type: "REDEEM_REWARD",
                created_at: "2020-05-08T21:56:00Z",
                accumulate_points: { loyalty_program_id: "loyalty_program_id", points: 1, order_id: "order_id" },
                create_reward: { loyalty_program_id: "loyalty_program_id", reward_id: "reward_id", points: 1 },
                redeem_reward: {
                    loyalty_program_id: "d619f755-2d17-41f3-990d-c04ecedd64dd",
                    reward_id: "9f18ac21-233a-31c3-be77-b45840f5a810",
                    order_id: "order_id",
                },
                delete_reward: { loyalty_program_id: "loyalty_program_id", reward_id: "reward_id", points: 1 },
                adjust_points: { loyalty_program_id: "loyalty_program_id", points: 1, reason: "reason" },
                loyalty_account_id: "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
                location_id: "P034NEENMD09F",
                source: "LOYALTY_API",
                expire_points: { loyalty_program_id: "loyalty_program_id", points: 1 },
                other_event: { loyalty_program_id: "loyalty_program_id", points: 1 },
                accumulate_promotion_points: {
                    loyalty_program_id: "loyalty_program_id",
                    loyalty_promotion_id: "loyalty_promotion_id",
                    points: 1,
                    order_id: "order_id",
                },
            },
        };
        server
            .mockEndpoint()
            .post("/v2/loyalty/rewards/reward_id/redeem")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.loyalty.rewards.redeem({
            rewardId: "reward_id",
            idempotencyKey: "98adc7f7-6963-473b-b29c-f3c9cdd7d994",
            locationId: "P034NEENMD09F",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            event: {
                id: "67377a6e-dbdc-369d-aa16-2e7ed422e71f",
                type: "REDEEM_REWARD",
                createdAt: "2020-05-08T21:56:00Z",
                accumulatePoints: {
                    loyaltyProgramId: "loyalty_program_id",
                    points: 1,
                    orderId: "order_id",
                },
                createReward: {
                    loyaltyProgramId: "loyalty_program_id",
                    rewardId: "reward_id",
                    points: 1,
                },
                redeemReward: {
                    loyaltyProgramId: "d619f755-2d17-41f3-990d-c04ecedd64dd",
                    rewardId: "9f18ac21-233a-31c3-be77-b45840f5a810",
                    orderId: "order_id",
                },
                deleteReward: {
                    loyaltyProgramId: "loyalty_program_id",
                    rewardId: "reward_id",
                    points: 1,
                },
                adjustPoints: {
                    loyaltyProgramId: "loyalty_program_id",
                    points: 1,
                    reason: "reason",
                },
                loyaltyAccountId: "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
                locationId: "P034NEENMD09F",
                source: "LOYALTY_API",
                expirePoints: {
                    loyaltyProgramId: "loyalty_program_id",
                    points: 1,
                },
                otherEvent: {
                    loyaltyProgramId: "loyalty_program_id",
                    points: 1,
                },
                accumulatePromotionPoints: {
                    loyaltyProgramId: "loyalty_program_id",
                    loyaltyPromotionId: "loyalty_promotion_id",
                    points: 1,
                    orderId: "order_id",
                },
            },
        });
    });
});
