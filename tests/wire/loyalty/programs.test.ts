// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Programs", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            programs: [
                {
                    id: "d619f755-2d17-41f3-990d-c04ecedd64dd",
                    status: "ACTIVE",
                    reward_tiers: [
                        {
                            id: "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
                            points: 10,
                            name: "10% off entire sale",
                            created_at: "2020-04-20T16:55:11Z",
                            pricing_rule_reference: {
                                object_id: "74C4JSHESNLTB2A7ITO5HO6F",
                                catalog_version: BigInt(1000000),
                            },
                        },
                    ],
                    expiration_policy: { expiration_duration: "expiration_duration" },
                    terminology: { one: "Point", other: "Points" },
                    location_ids: ["P034NEENMD09F"],
                    created_at: "2020-04-20T16:55:11Z",
                    updated_at: "2020-05-01T02:00:02Z",
                    accrual_rules: [
                        {
                            accrual_type: "SPEND",
                            points: 1,
                            spend_data: {
                                amount_money: { amount: BigInt(100), currency: "USD" },
                                excluded_category_ids: ["7ZERJKO5PVYXCVUHV2JCZ2UG", "FQKAOJE5C4FIMF5A2URMLW6V"],
                                excluded_item_variation_ids: ["CBZXBUVVTYUBZGQO44RHMR6B", "EDILT24Z2NISEXDKGY6HP7XV"],
                                tax_mode: "BEFORE_TAX",
                            },
                        },
                    ],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/v2/loyalty/programs")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.loyalty.programs.list();
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            programs: [
                {
                    id: "d619f755-2d17-41f3-990d-c04ecedd64dd",
                    status: "ACTIVE",
                    rewardTiers: [
                        {
                            id: "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
                            points: 10,
                            name: "10% off entire sale",
                            createdAt: "2020-04-20T16:55:11Z",
                            pricingRuleReference: {
                                objectId: "74C4JSHESNLTB2A7ITO5HO6F",
                                catalogVersion: BigInt("1000000"),
                            },
                        },
                    ],
                    expirationPolicy: {
                        expirationDuration: "expiration_duration",
                    },
                    terminology: {
                        one: "Point",
                        other: "Points",
                    },
                    locationIds: ["P034NEENMD09F"],
                    createdAt: "2020-04-20T16:55:11Z",
                    updatedAt: "2020-05-01T02:00:02Z",
                    accrualRules: [
                        {
                            accrualType: "SPEND",
                            points: 1,
                            spendData: {
                                amountMoney: {
                                    amount: BigInt("100"),
                                    currency: "USD",
                                },
                                excludedCategoryIds: ["7ZERJKO5PVYXCVUHV2JCZ2UG", "FQKAOJE5C4FIMF5A2URMLW6V"],
                                excludedItemVariationIds: ["CBZXBUVVTYUBZGQO44RHMR6B", "EDILT24Z2NISEXDKGY6HP7XV"],
                                taxMode: "BEFORE_TAX",
                            },
                        },
                    ],
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            program: {
                id: "d619f755-2d17-41f3-990d-c04ecedd64dd",
                status: "ACTIVE",
                reward_tiers: [
                    {
                        id: "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
                        points: 10,
                        name: "10% off entire sale",
                        created_at: "2020-04-20T16:55:11Z",
                        pricing_rule_reference: {
                            object_id: "74C4JSHESNLTB2A7ITO5HO6F",
                            catalog_version: BigInt(1000000),
                        },
                    },
                ],
                expiration_policy: { expiration_duration: "expiration_duration" },
                terminology: { one: "Point", other: "Points" },
                location_ids: ["P034NEENMD09F"],
                created_at: "2020-04-20T16:55:11Z",
                updated_at: "2020-05-01T02:00:02Z",
                accrual_rules: [
                    {
                        accrual_type: "SPEND",
                        points: 1,
                        spend_data: {
                            amount_money: { amount: BigInt(100), currency: "USD" },
                            excluded_category_ids: ["7ZERJKO5PVYXCVUHV2JCZ2UG", "FQKAOJE5C4FIMF5A2URMLW6V"],
                            excluded_item_variation_ids: ["CBZXBUVVTYUBZGQO44RHMR6B", "EDILT24Z2NISEXDKGY6HP7XV"],
                            tax_mode: "BEFORE_TAX",
                        },
                    },
                ],
            },
        };
        server
            .mockEndpoint()
            .get("/v2/loyalty/programs/program_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.loyalty.programs.get({
            programId: "program_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            program: {
                id: "d619f755-2d17-41f3-990d-c04ecedd64dd",
                status: "ACTIVE",
                rewardTiers: [
                    {
                        id: "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
                        points: 10,
                        name: "10% off entire sale",
                        createdAt: "2020-04-20T16:55:11Z",
                        pricingRuleReference: {
                            objectId: "74C4JSHESNLTB2A7ITO5HO6F",
                            catalogVersion: BigInt("1000000"),
                        },
                    },
                ],
                expirationPolicy: {
                    expirationDuration: "expiration_duration",
                },
                terminology: {
                    one: "Point",
                    other: "Points",
                },
                locationIds: ["P034NEENMD09F"],
                createdAt: "2020-04-20T16:55:11Z",
                updatedAt: "2020-05-01T02:00:02Z",
                accrualRules: [
                    {
                        accrualType: "SPEND",
                        points: 1,
                        spendData: {
                            amountMoney: {
                                amount: BigInt("100"),
                                currency: "USD",
                            },
                            excludedCategoryIds: ["7ZERJKO5PVYXCVUHV2JCZ2UG", "FQKAOJE5C4FIMF5A2URMLW6V"],
                            excludedItemVariationIds: ["CBZXBUVVTYUBZGQO44RHMR6B", "EDILT24Z2NISEXDKGY6HP7XV"],
                            taxMode: "BEFORE_TAX",
                        },
                    },
                ],
            },
        });
    });

    test("calculate", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            order_id: "RFZfrdtm3mhO1oGzf5Cx7fEMsmGZY",
            loyalty_account_id: "79b807d2-d786-46a9-933b-918028d7a8c5",
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            points: 6,
            promotion_points: 12,
        };
        server
            .mockEndpoint()
            .post("/v2/loyalty/programs/program_id/calculate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.loyalty.programs.calculate({
            programId: "program_id",
            orderId: "RFZfrdtm3mhO1oGzf5Cx7fEMsmGZY",
            loyaltyAccountId: "79b807d2-d786-46a9-933b-918028d7a8c5",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            points: 6,
            promotionPoints: 12,
        });
    });
});
