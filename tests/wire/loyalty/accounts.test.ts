/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { SquareClient } from "../../../src/Client";

describe("Accounts", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            loyalty_account: {
                program_id: "d619f755-2d17-41f3-990d-c04ecedd64dd",
                mapping: { phone_number: "+14155551234" },
            },
            idempotency_key: "ec78c477-b1c3-4899-a209-a4e71337c996",
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            loyalty_account: {
                id: "79b807d2-d786-46a9-933b-918028d7a8c5",
                program_id: "d619f755-2d17-41f3-990d-c04ecedd64dd",
                balance: 0,
                lifetime_points: 0,
                customer_id: "QPTXM8PQNX3Q726ZYHPMNP46XC",
                enrolled_at: "enrolled_at",
                created_at: "2020-05-08T21:44:32Z",
                updated_at: "2020-05-08T21:44:32Z",
                mapping: {
                    id: "66aaab3f-da99-49ed-8b19-b87f851c844f",
                    created_at: "2020-05-08T21:44:32Z",
                    phone_number: "+14155551234",
                },
                expiring_point_deadlines: [{ points: 1, expires_at: "expires_at" }],
            },
        };
        server
            .mockEndpoint()
            .post("/v2/loyalty/accounts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.loyalty.accounts.create({
            loyaltyAccount: {
                programId: "d619f755-2d17-41f3-990d-c04ecedd64dd",
                mapping: {
                    phoneNumber: "+14155551234",
                },
            },
            idempotencyKey: "ec78c477-b1c3-4899-a209-a4e71337c996",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            loyaltyAccount: {
                id: "79b807d2-d786-46a9-933b-918028d7a8c5",
                programId: "d619f755-2d17-41f3-990d-c04ecedd64dd",
                balance: 0,
                lifetimePoints: 0,
                customerId: "QPTXM8PQNX3Q726ZYHPMNP46XC",
                enrolledAt: "enrolled_at",
                createdAt: "2020-05-08T21:44:32Z",
                updatedAt: "2020-05-08T21:44:32Z",
                mapping: {
                    id: "66aaab3f-da99-49ed-8b19-b87f851c844f",
                    createdAt: "2020-05-08T21:44:32Z",
                    phoneNumber: "+14155551234",
                },
                expiringPointDeadlines: [
                    {
                        points: 1,
                        expiresAt: "expires_at",
                    },
                ],
            },
        });
    });

    test("search", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { query: { mappings: [{ phone_number: "+14155551234" }] }, limit: 10 };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            loyalty_accounts: [
                {
                    id: "79b807d2-d786-46a9-933b-918028d7a8c5",
                    program_id: "d619f755-2d17-41f3-990d-c04ecedd64dd",
                    balance: 10,
                    lifetime_points: 20,
                    customer_id: "Q8002FAM9V1EZ0ADB2T5609X6NET1H0",
                    enrolled_at: "enrolled_at",
                    created_at: "2020-05-08T21:44:32Z",
                    updated_at: "2020-05-08T21:44:32Z",
                    mapping: {
                        id: "66aaab3f-da99-49ed-8b19-b87f851c844f",
                        created_at: "2020-05-08T21:44:32Z",
                        phone_number: "+14155551234",
                    },
                    expiring_point_deadlines: [{ points: 1, expires_at: "expires_at" }],
                },
            ],
            cursor: "cursor",
        };
        server
            .mockEndpoint()
            .post("/v2/loyalty/accounts/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.loyalty.accounts.search({
            query: {
                mappings: [
                    {
                        phoneNumber: "+14155551234",
                    },
                ],
            },
            limit: 10,
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            loyaltyAccounts: [
                {
                    id: "79b807d2-d786-46a9-933b-918028d7a8c5",
                    programId: "d619f755-2d17-41f3-990d-c04ecedd64dd",
                    balance: 10,
                    lifetimePoints: 20,
                    customerId: "Q8002FAM9V1EZ0ADB2T5609X6NET1H0",
                    enrolledAt: "enrolled_at",
                    createdAt: "2020-05-08T21:44:32Z",
                    updatedAt: "2020-05-08T21:44:32Z",
                    mapping: {
                        id: "66aaab3f-da99-49ed-8b19-b87f851c844f",
                        createdAt: "2020-05-08T21:44:32Z",
                        phoneNumber: "+14155551234",
                    },
                    expiringPointDeadlines: [
                        {
                            points: 1,
                            expiresAt: "expires_at",
                        },
                    ],
                },
            ],
            cursor: "cursor",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            loyalty_account: {
                id: "79b807d2-d786-46a9-933b-918028d7a8c5",
                program_id: "d619f755-2d17-41f3-990d-c04ecedd64dd",
                balance: 10,
                lifetime_points: 20,
                customer_id: "Q8002FAM9V1EZ0ADB2T5609X6NET1H0",
                enrolled_at: "enrolled_at",
                created_at: "2020-05-08T21:44:32Z",
                updated_at: "2020-05-08T21:44:32Z",
                mapping: {
                    id: "66aaab3f-da99-49ed-8b19-b87f851c844f",
                    created_at: "2020-05-08T21:44:32Z",
                    phone_number: "+14155551234",
                },
                expiring_point_deadlines: [{ points: 1, expires_at: "expires_at" }],
            },
        };
        server
            .mockEndpoint()
            .get("/v2/loyalty/accounts/account_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.loyalty.accounts.get({
            accountId: "account_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            loyaltyAccount: {
                id: "79b807d2-d786-46a9-933b-918028d7a8c5",
                programId: "d619f755-2d17-41f3-990d-c04ecedd64dd",
                balance: 10,
                lifetimePoints: 20,
                customerId: "Q8002FAM9V1EZ0ADB2T5609X6NET1H0",
                enrolledAt: "enrolled_at",
                createdAt: "2020-05-08T21:44:32Z",
                updatedAt: "2020-05-08T21:44:32Z",
                mapping: {
                    id: "66aaab3f-da99-49ed-8b19-b87f851c844f",
                    createdAt: "2020-05-08T21:44:32Z",
                    phoneNumber: "+14155551234",
                },
                expiringPointDeadlines: [
                    {
                        points: 1,
                        expiresAt: "expires_at",
                    },
                ],
            },
        });
    });

    test("accumulatePoints", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accumulate_points: { order_id: "RFZfrdtm3mhO1oGzf5Cx7fEMsmGZY" },
            idempotency_key: "58b90739-c3e8-4b11-85f7-e636d48d72cb",
            location_id: "P034NEENMD09F",
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            event: {
                id: "id",
                type: "ACCUMULATE_POINTS",
                created_at: "created_at",
                accumulate_points: { loyalty_program_id: "loyalty_program_id", points: 1, order_id: "order_id" },
                create_reward: { loyalty_program_id: "loyalty_program_id", reward_id: "reward_id", points: 1 },
                redeem_reward: {
                    loyalty_program_id: "loyalty_program_id",
                    reward_id: "reward_id",
                    order_id: "order_id",
                },
                delete_reward: { loyalty_program_id: "loyalty_program_id", reward_id: "reward_id", points: 1 },
                adjust_points: { loyalty_program_id: "loyalty_program_id", points: 1, reason: "reason" },
                loyalty_account_id: "loyalty_account_id",
                location_id: "location_id",
                source: "SQUARE",
                expire_points: { loyalty_program_id: "loyalty_program_id", points: 1 },
                other_event: { loyalty_program_id: "loyalty_program_id", points: 1 },
                accumulate_promotion_points: {
                    loyalty_program_id: "loyalty_program_id",
                    loyalty_promotion_id: "loyalty_promotion_id",
                    points: 1,
                    order_id: "order_id",
                },
            },
            events: [
                {
                    id: "ee46aafd-1af6-3695-a385-276e2ef0be26",
                    type: "ACCUMULATE_POINTS",
                    created_at: "2020-05-08T21:41:12Z",
                    accumulate_points: {
                        loyalty_program_id: "d619f755-2d17-41f3-990d-c04ecedd64dd",
                        points: 6,
                        order_id: "RFZfrdtm3mhO1oGzf5Cx7fEMsmGZY",
                    },
                    adjust_points: { points: 1 },
                    loyalty_account_id: "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
                    location_id: "P034NEENMD09F",
                    source: "LOYALTY_API",
                    expire_points: { points: 1 },
                    other_event: { points: 1 },
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/v2/loyalty/accounts/account_id/accumulate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.loyalty.accounts.accumulatePoints({
            accountId: "account_id",
            accumulatePoints: {
                orderId: "RFZfrdtm3mhO1oGzf5Cx7fEMsmGZY",
            },
            idempotencyKey: "58b90739-c3e8-4b11-85f7-e636d48d72cb",
            locationId: "P034NEENMD09F",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            event: {
                id: "id",
                type: "ACCUMULATE_POINTS",
                createdAt: "created_at",
                accumulatePoints: {
                    loyaltyProgramId: "loyalty_program_id",
                    points: 1,
                    orderId: "order_id",
                },
                createReward: {
                    loyaltyProgramId: "loyalty_program_id",
                    rewardId: "reward_id",
                    points: 1,
                },
                redeemReward: {
                    loyaltyProgramId: "loyalty_program_id",
                    rewardId: "reward_id",
                    orderId: "order_id",
                },
                deleteReward: {
                    loyaltyProgramId: "loyalty_program_id",
                    rewardId: "reward_id",
                    points: 1,
                },
                adjustPoints: {
                    loyaltyProgramId: "loyalty_program_id",
                    points: 1,
                    reason: "reason",
                },
                loyaltyAccountId: "loyalty_account_id",
                locationId: "location_id",
                source: "SQUARE",
                expirePoints: {
                    loyaltyProgramId: "loyalty_program_id",
                    points: 1,
                },
                otherEvent: {
                    loyaltyProgramId: "loyalty_program_id",
                    points: 1,
                },
                accumulatePromotionPoints: {
                    loyaltyProgramId: "loyalty_program_id",
                    loyaltyPromotionId: "loyalty_promotion_id",
                    points: 1,
                    orderId: "order_id",
                },
            },
            events: [
                {
                    id: "ee46aafd-1af6-3695-a385-276e2ef0be26",
                    type: "ACCUMULATE_POINTS",
                    createdAt: "2020-05-08T21:41:12Z",
                    accumulatePoints: {
                        loyaltyProgramId: "d619f755-2d17-41f3-990d-c04ecedd64dd",
                        points: 6,
                        orderId: "RFZfrdtm3mhO1oGzf5Cx7fEMsmGZY",
                    },
                    adjustPoints: {
                        points: 1,
                    },
                    loyaltyAccountId: "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
                    locationId: "P034NEENMD09F",
                    source: "LOYALTY_API",
                    expirePoints: {
                        points: 1,
                    },
                    otherEvent: {
                        points: 1,
                    },
                },
            ],
        });
    });

    test("adjust", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "bc29a517-3dc9-450e-aa76-fae39ee849d1",
            adjust_points: { points: 10, reason: "Complimentary points" },
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            event: {
                id: "613a6fca-8d67-39d0-bad2-3b4bc45c8637",
                type: "ADJUST_POINTS",
                created_at: "2020-05-08T21:42:32Z",
                accumulate_points: { loyalty_program_id: "loyalty_program_id", points: 1, order_id: "order_id" },
                create_reward: { loyalty_program_id: "loyalty_program_id", reward_id: "reward_id", points: 1 },
                redeem_reward: {
                    loyalty_program_id: "loyalty_program_id",
                    reward_id: "reward_id",
                    order_id: "order_id",
                },
                delete_reward: { loyalty_program_id: "loyalty_program_id", reward_id: "reward_id", points: 1 },
                adjust_points: {
                    loyalty_program_id: "d619f755-2d17-41f3-990d-c04ecedd64dd",
                    points: 10,
                    reason: "Complimentary points",
                },
                loyalty_account_id: "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
                location_id: "location_id",
                source: "LOYALTY_API",
                expire_points: { loyalty_program_id: "loyalty_program_id", points: 1 },
                other_event: { loyalty_program_id: "loyalty_program_id", points: 1 },
                accumulate_promotion_points: {
                    loyalty_program_id: "loyalty_program_id",
                    loyalty_promotion_id: "loyalty_promotion_id",
                    points: 1,
                    order_id: "order_id",
                },
            },
        };
        server
            .mockEndpoint()
            .post("/v2/loyalty/accounts/account_id/adjust")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.loyalty.accounts.adjust({
            accountId: "account_id",
            idempotencyKey: "bc29a517-3dc9-450e-aa76-fae39ee849d1",
            adjustPoints: {
                points: 10,
                reason: "Complimentary points",
            },
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            event: {
                id: "613a6fca-8d67-39d0-bad2-3b4bc45c8637",
                type: "ADJUST_POINTS",
                createdAt: "2020-05-08T21:42:32Z",
                accumulatePoints: {
                    loyaltyProgramId: "loyalty_program_id",
                    points: 1,
                    orderId: "order_id",
                },
                createReward: {
                    loyaltyProgramId: "loyalty_program_id",
                    rewardId: "reward_id",
                    points: 1,
                },
                redeemReward: {
                    loyaltyProgramId: "loyalty_program_id",
                    rewardId: "reward_id",
                    orderId: "order_id",
                },
                deleteReward: {
                    loyaltyProgramId: "loyalty_program_id",
                    rewardId: "reward_id",
                    points: 1,
                },
                adjustPoints: {
                    loyaltyProgramId: "d619f755-2d17-41f3-990d-c04ecedd64dd",
                    points: 10,
                    reason: "Complimentary points",
                },
                loyaltyAccountId: "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
                locationId: "location_id",
                source: "LOYALTY_API",
                expirePoints: {
                    loyaltyProgramId: "loyalty_program_id",
                    points: 1,
                },
                otherEvent: {
                    loyaltyProgramId: "loyalty_program_id",
                    points: 1,
                },
                accumulatePromotionPoints: {
                    loyaltyProgramId: "loyalty_program_id",
                    loyaltyPromotionId: "loyalty_promotion_id",
                    points: 1,
                    orderId: "order_id",
                },
            },
        });
    });
});
