// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("CustomAttributes", () => {
    test("batchDelete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { values: { key: { booking_id: "booking_id", key: "key" } } };
        const rawResponseBody = {
            values: {
                id1: {
                    booking_id: "N3NCVYY3WS27HF0HKANA3R9FP8",
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                id2: {
                    booking_id: "SY8EMWRNDN3TQDP2H4KS1QWMMM",
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                id3: {
                    booking_id: "SY8EMWRNDN3TQDP2H4KS1QWMMM",
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/bookings/custom-attributes/bulk-delete")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bookings.customAttributes.batchDelete({
            values: {
                key: {
                    bookingId: "booking_id",
                    key: "key",
                },
            },
        });
        expect(response).toEqual({
            values: {
                id1: {
                    bookingId: "N3NCVYY3WS27HF0HKANA3R9FP8",
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                id2: {
                    bookingId: "SY8EMWRNDN3TQDP2H4KS1QWMMM",
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                id3: {
                    bookingId: "SY8EMWRNDN3TQDP2H4KS1QWMMM",
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("batchUpsert", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { values: { key: { booking_id: "booking_id", custom_attribute: {} } } };
        const rawResponseBody = {
            values: {
                id1: {
                    booking_id: "N3NCVYY3WS27HF0HKANA3R9FP8",
                    custom_attribute: {
                        key: "favoriteShampoo",
                        value: "Spring Fresh",
                        version: 1,
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updated_at: "2022-11-16T00:16:23Z",
                        created_at: "2022-11-16T23:14:47Z",
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                id2: {
                    booking_id: "SY8EMWRNDN3TQDP2H4KS1QWMMM",
                    custom_attribute: {
                        key: "hasShoes",
                        value: false,
                        version: 2,
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updated_at: "2022-11-16T00:16:23Z",
                        created_at: "2022-11-16T00:16:20Z",
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                id3: {
                    booking_id: "SY8EMWRNDN3TQDP2H4KS1QWMMM",
                    custom_attribute: {
                        key: "favoriteShampoo",
                        value: "Hydro-Cool",
                        version: 2,
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updated_at: "2022-11-16T00:16:23Z",
                        created_at: "2022-11-16T00:16:20Z",
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                id4: {
                    booking_id: "N3NCVYY3WS27HF0HKANA3R9FP8",
                    custom_attribute: {
                        key: "partySize",
                        value: 4,
                        version: 1,
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updated_at: "2022-11-16T00:16:23Z",
                        created_at: "2022-11-16T23:14:47Z",
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                id5: {
                    booking_id: "70548QG1HN43B05G0KCZ4MMC1G",
                    custom_attribute: {
                        key: "celebrating",
                        value: "birthday",
                        version: 2,
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updated_at: "2022-11-16T00:16:23Z",
                        created_at: "2022-11-16T00:16:20Z",
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/bookings/custom-attributes/bulk-upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bookings.customAttributes.batchUpsert({
            values: {
                key: {
                    bookingId: "booking_id",
                    customAttribute: {},
                },
            },
        });
        expect(response).toEqual({
            values: {
                id1: {
                    bookingId: "N3NCVYY3WS27HF0HKANA3R9FP8",
                    customAttribute: {
                        key: "favoriteShampoo",
                        value: "Spring Fresh",
                        version: 1,
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updatedAt: "2022-11-16T00:16:23Z",
                        createdAt: "2022-11-16T23:14:47Z",
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                id2: {
                    bookingId: "SY8EMWRNDN3TQDP2H4KS1QWMMM",
                    customAttribute: {
                        key: "hasShoes",
                        value: false,
                        version: 2,
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updatedAt: "2022-11-16T00:16:23Z",
                        createdAt: "2022-11-16T00:16:20Z",
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                id3: {
                    bookingId: "SY8EMWRNDN3TQDP2H4KS1QWMMM",
                    customAttribute: {
                        key: "favoriteShampoo",
                        value: "Hydro-Cool",
                        version: 2,
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updatedAt: "2022-11-16T00:16:23Z",
                        createdAt: "2022-11-16T00:16:20Z",
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                id4: {
                    bookingId: "N3NCVYY3WS27HF0HKANA3R9FP8",
                    customAttribute: {
                        key: "partySize",
                        value: 4,
                        version: 1,
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updatedAt: "2022-11-16T00:16:23Z",
                        createdAt: "2022-11-16T23:14:47Z",
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                id5: {
                    bookingId: "70548QG1HN43B05G0KCZ4MMC1G",
                    customAttribute: {
                        key: "celebrating",
                        value: "birthday",
                        version: 2,
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updatedAt: "2022-11-16T00:16:23Z",
                        createdAt: "2022-11-16T00:16:20Z",
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            custom_attributes: [
                {
                    key: "favoriteShampoo",
                    value: "Hydro-Cool",
                    version: 1,
                    visibility: "VISIBILITY_READ_ONLY",
                    updated_at: "2022-11-16T15:50:27Z",
                    created_at: "2022-11-16T15:50:27Z",
                },
                {
                    key: "hasShoes",
                    value: false,
                    version: 1,
                    visibility: "VISIBILITY_HIDDEN",
                    updated_at: "2022-11-16T15:51:53Z",
                    created_at: "2022-11-16T15:51:53Z",
                },
            ],
            cursor: "cursor",
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/bookings/booking_id/custom-attributes")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            customAttributes: [
                {
                    key: "favoriteShampoo",
                    value: "Hydro-Cool",
                    version: 1,
                    visibility: "VISIBILITY_READ_ONLY",
                    updatedAt: "2022-11-16T15:50:27Z",
                    createdAt: "2022-11-16T15:50:27Z",
                },
                {
                    key: "hasShoes",
                    value: false,
                    version: 1,
                    visibility: "VISIBILITY_HIDDEN",
                    updatedAt: "2022-11-16T15:51:53Z",
                    createdAt: "2022-11-16T15:51:53Z",
                },
            ],
            cursor: "cursor",
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        };
        const page = await client.bookings.customAttributes.list({
            bookingId: "booking_id",
            limit: 1,
            cursor: "cursor",
            withDefinitions: true,
        });

        expect(expected.customAttributes).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.customAttributes).toEqual(nextPage.data);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            custom_attribute: {
                key: "favoriteShampoo",
                value: "Dune",
                version: 1,
                visibility: "VISIBILITY_READ_ONLY",
                definition: {
                    key: "key",
                    schema: { key: "value" },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updated_at: "updated_at",
                    created_at: "created_at",
                },
                updated_at: "2022-11-16T15:50:27Z",
                created_at: "2022-11-16T15:50:27Z",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/bookings/booking_id/custom-attributes/key")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bookings.customAttributes.get({
            bookingId: "booking_id",
            key: "key",
            withDefinition: true,
            version: 1,
        });
        expect(response).toEqual({
            customAttribute: {
                key: "favoriteShampoo",
                value: "Dune",
                version: 1,
                visibility: "VISIBILITY_READ_ONLY",
                definition: {
                    key: "key",
                    schema: {
                        key: "value",
                    },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updatedAt: "updated_at",
                    createdAt: "created_at",
                },
                updatedAt: "2022-11-16T15:50:27Z",
                createdAt: "2022-11-16T15:50:27Z",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("upsert", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { custom_attribute: {} };
        const rawResponseBody = {
            custom_attribute: {
                key: "favoriteShampoo",
                value: "Spring Fresh",
                version: 1,
                visibility: "VISIBILITY_READ_ONLY",
                definition: {
                    key: "key",
                    schema: { key: "value" },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updated_at: "updated_at",
                    created_at: "created_at",
                },
                updated_at: "2022-11-16T15:50:27Z",
                created_at: "2022-11-16T15:50:27Z",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .put("/v2/bookings/booking_id/custom-attributes/key")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bookings.customAttributes.upsert({
            bookingId: "booking_id",
            key: "key",
            customAttribute: {},
        });
        expect(response).toEqual({
            customAttribute: {
                key: "favoriteShampoo",
                value: "Spring Fresh",
                version: 1,
                visibility: "VISIBILITY_READ_ONLY",
                definition: {
                    key: "key",
                    schema: {
                        key: "value",
                    },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updatedAt: "updated_at",
                    createdAt: "created_at",
                },
                updatedAt: "2022-11-16T15:50:27Z",
                createdAt: "2022-11-16T15:50:27Z",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/bookings/booking_id/custom-attributes/key")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bookings.customAttributes.delete({
            bookingId: "booking_id",
            key: "key",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
