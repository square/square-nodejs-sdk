// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("LocationProfiles", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            location_booking_profiles: [
                {
                    location_id: "LY6WNBPVM6VGV",
                    booking_site_url: "https://squareup.com/book/LY6WNBPVM6VGV/testbusiness",
                    online_booking_enabled: true,
                },
                { location_id: "PYTRNBPVMJUPV", booking_site_url: "booking_site_url", online_booking_enabled: false },
            ],
            cursor: "cursor",
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/bookings/location-booking-profiles")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            locationBookingProfiles: [
                {
                    locationId: "LY6WNBPVM6VGV",
                    bookingSiteUrl: "https://squareup.com/book/LY6WNBPVM6VGV/testbusiness",
                    onlineBookingEnabled: true,
                },
                {
                    locationId: "PYTRNBPVMJUPV",
                    bookingSiteUrl: "booking_site_url",
                    onlineBookingEnabled: false,
                },
            ],
            cursor: "cursor",
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        };
        const page = await client.bookings.locationProfiles.list({
            limit: 1,
            cursor: "cursor",
        });

        expect(expected.locationBookingProfiles).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.locationBookingProfiles).toEqual(nextPage.data);
    });
});
