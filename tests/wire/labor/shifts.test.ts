/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { SquareClient } from "../../../src/Client";

describe("Shifts", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "HIDSNG5KS478L",
            shift: {
                location_id: "PAA1RJZZKXBFG",
                start_at: "2019-01-25T03:11:00-05:00",
                end_at: "2019-01-25T13:11:00-05:00",
                wage: { title: "Barista", hourly_rate: { amount: BigInt(1100), currency: "USD" }, tip_eligible: true },
                breaks: [
                    {
                        start_at: "2019-01-25T06:11:00-05:00",
                        end_at: "2019-01-25T06:16:00-05:00",
                        break_type_id: "REGS1EQR1TPZ5",
                        name: "Tea Break",
                        expected_duration: "PT5M",
                        is_paid: true,
                    },
                ],
                team_member_id: "ormj0jJJZ5OZIzxrZYJI",
                declared_cash_tip_money: { amount: BigInt(500), currency: "USD" },
            },
        };
        const rawResponseBody = {
            shift: {
                id: "K0YH4CV5462JB",
                employee_id: "ormj0jJJZ5OZIzxrZYJI",
                location_id: "PAA1RJZZKXBFG",
                timezone: "America/New_York",
                start_at: "2019-01-25T03:11:00-05:00",
                end_at: "2019-01-25T13:11:00-05:00",
                wage: {
                    title: "Barista",
                    hourly_rate: { amount: BigInt(1100), currency: "USD" },
                    job_id: "FzbJAtt9qEWncK1BWgVCxQ6M",
                    tip_eligible: true,
                },
                breaks: [
                    {
                        id: "X7GAQYVVRRG6P",
                        start_at: "2019-01-25T06:11:00-05:00",
                        end_at: "2019-01-25T06:16:00-05:00",
                        break_type_id: "REGS1EQR1TPZ5",
                        name: "Tea Break",
                        expected_duration: "PT5M",
                        is_paid: true,
                    },
                ],
                status: "CLOSED",
                version: 1,
                created_at: "2019-02-28T00:39:02Z",
                updated_at: "2019-02-28T00:39:02Z",
                team_member_id: "ormj0jJJZ5OZIzxrZYJI",
                declared_cash_tip_money: { amount: BigInt(500), currency: "USD" },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/labor/shifts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.labor.shifts.create({
            idempotencyKey: "HIDSNG5KS478L",
            shift: {
                locationId: "PAA1RJZZKXBFG",
                startAt: "2019-01-25T03:11:00-05:00",
                endAt: "2019-01-25T13:11:00-05:00",
                wage: {
                    title: "Barista",
                    hourlyRate: {
                        amount: BigInt("1100"),
                        currency: "USD",
                    },
                    tipEligible: true,
                },
                breaks: [
                    {
                        startAt: "2019-01-25T06:11:00-05:00",
                        endAt: "2019-01-25T06:16:00-05:00",
                        breakTypeId: "REGS1EQR1TPZ5",
                        name: "Tea Break",
                        expectedDuration: "PT5M",
                        isPaid: true,
                    },
                ],
                teamMemberId: "ormj0jJJZ5OZIzxrZYJI",
                declaredCashTipMoney: {
                    amount: BigInt("500"),
                    currency: "USD",
                },
            },
        });
        expect(response).toEqual({
            shift: {
                id: "K0YH4CV5462JB",
                employeeId: "ormj0jJJZ5OZIzxrZYJI",
                locationId: "PAA1RJZZKXBFG",
                timezone: "America/New_York",
                startAt: "2019-01-25T03:11:00-05:00",
                endAt: "2019-01-25T13:11:00-05:00",
                wage: {
                    title: "Barista",
                    hourlyRate: {
                        amount: BigInt("1100"),
                        currency: "USD",
                    },
                    jobId: "FzbJAtt9qEWncK1BWgVCxQ6M",
                    tipEligible: true,
                },
                breaks: [
                    {
                        id: "X7GAQYVVRRG6P",
                        startAt: "2019-01-25T06:11:00-05:00",
                        endAt: "2019-01-25T06:16:00-05:00",
                        breakTypeId: "REGS1EQR1TPZ5",
                        name: "Tea Break",
                        expectedDuration: "PT5M",
                        isPaid: true,
                    },
                ],
                status: "CLOSED",
                version: 1,
                createdAt: "2019-02-28T00:39:02Z",
                updatedAt: "2019-02-28T00:39:02Z",
                teamMemberId: "ormj0jJJZ5OZIzxrZYJI",
                declaredCashTipMoney: {
                    amount: BigInt("500"),
                    currency: "USD",
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            shift: {
                id: "T35HMQSN89SV4",
                employee_id: "D71KRMQof6cXGUW0aAv7",
                location_id: "PAA1RJZZKXBFG",
                timezone: "America/New_York",
                start_at: "2019-02-23T18:00:00-05:00",
                end_at: "2019-02-23T21:00:00-05:00",
                wage: {
                    title: "Cashier",
                    hourly_rate: { amount: BigInt(1457), currency: "USD" },
                    job_id: "N4YKVLzFj3oGtNocqoYHYpW3",
                    tip_eligible: true,
                },
                breaks: [
                    {
                        id: "M9BBKEPQAQD2T",
                        start_at: "2019-02-23T19:00:00-05:00",
                        end_at: "2019-02-23T20:00:00-05:00",
                        break_type_id: "92EPDRQKJ5088",
                        name: "Lunch Break",
                        expected_duration: "PT1H",
                        is_paid: true,
                    },
                ],
                status: "CLOSED",
                version: 1,
                created_at: "2019-02-27T00:12:12Z",
                updated_at: "2019-02-27T00:12:12Z",
                team_member_id: "D71KRMQof6cXGUW0aAv7",
                declared_cash_tip_money: { amount: BigInt(500), currency: "USD" },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/labor/shifts/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.labor.shifts.get({
            id: "id",
        });
        expect(response).toEqual({
            shift: {
                id: "T35HMQSN89SV4",
                employeeId: "D71KRMQof6cXGUW0aAv7",
                locationId: "PAA1RJZZKXBFG",
                timezone: "America/New_York",
                startAt: "2019-02-23T18:00:00-05:00",
                endAt: "2019-02-23T21:00:00-05:00",
                wage: {
                    title: "Cashier",
                    hourlyRate: {
                        amount: BigInt("1457"),
                        currency: "USD",
                    },
                    jobId: "N4YKVLzFj3oGtNocqoYHYpW3",
                    tipEligible: true,
                },
                breaks: [
                    {
                        id: "M9BBKEPQAQD2T",
                        startAt: "2019-02-23T19:00:00-05:00",
                        endAt: "2019-02-23T20:00:00-05:00",
                        breakTypeId: "92EPDRQKJ5088",
                        name: "Lunch Break",
                        expectedDuration: "PT1H",
                        isPaid: true,
                    },
                ],
                status: "CLOSED",
                version: 1,
                createdAt: "2019-02-27T00:12:12Z",
                updatedAt: "2019-02-27T00:12:12Z",
                teamMemberId: "D71KRMQof6cXGUW0aAv7",
                declaredCashTipMoney: {
                    amount: BigInt("500"),
                    currency: "USD",
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            shift: {
                location_id: "PAA1RJZZKXBFG",
                start_at: "2019-01-25T03:11:00-05:00",
                end_at: "2019-01-25T13:11:00-05:00",
                wage: {
                    title: "Bartender",
                    hourly_rate: { amount: BigInt(1500), currency: "USD" },
                    tip_eligible: true,
                },
                breaks: [
                    {
                        id: "X7GAQYVVRRG6P",
                        start_at: "2019-01-25T06:11:00-05:00",
                        end_at: "2019-01-25T06:16:00-05:00",
                        break_type_id: "REGS1EQR1TPZ5",
                        name: "Tea Break",
                        expected_duration: "PT5M",
                        is_paid: true,
                    },
                ],
                version: 1,
                team_member_id: "ormj0jJJZ5OZIzxrZYJI",
                declared_cash_tip_money: { amount: BigInt(500), currency: "USD" },
            },
        };
        const rawResponseBody = {
            shift: {
                id: "K0YH4CV5462JB",
                employee_id: "ormj0jJJZ5OZIzxrZYJI",
                location_id: "PAA1RJZZKXBFG",
                timezone: "America/New_York",
                start_at: "2019-01-25T03:11:00-05:00",
                end_at: "2019-01-25T13:11:00-05:00",
                wage: {
                    title: "Bartender",
                    hourly_rate: { amount: BigInt(1500), currency: "USD" },
                    job_id: "dZtrPh5GSDGugyXGByesVp51",
                    tip_eligible: true,
                },
                breaks: [
                    {
                        id: "X7GAQYVVRRG6P",
                        start_at: "2019-01-25T06:11:00-05:00",
                        end_at: "2019-01-25T06:16:00-05:00",
                        break_type_id: "REGS1EQR1TPZ5",
                        name: "Tea Break",
                        expected_duration: "PT5M",
                        is_paid: true,
                    },
                ],
                status: "CLOSED",
                version: 2,
                created_at: "2019-02-28T00:39:02Z",
                updated_at: "2019-02-28T00:42:41Z",
                team_member_id: "ormj0jJJZ5OZIzxrZYJI",
                declared_cash_tip_money: { amount: BigInt(500), currency: "USD" },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .put("/v2/labor/shifts/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.labor.shifts.update({
            id: "id",
            shift: {
                locationId: "PAA1RJZZKXBFG",
                startAt: "2019-01-25T03:11:00-05:00",
                endAt: "2019-01-25T13:11:00-05:00",
                wage: {
                    title: "Bartender",
                    hourlyRate: {
                        amount: BigInt("1500"),
                        currency: "USD",
                    },
                    tipEligible: true,
                },
                breaks: [
                    {
                        id: "X7GAQYVVRRG6P",
                        startAt: "2019-01-25T06:11:00-05:00",
                        endAt: "2019-01-25T06:16:00-05:00",
                        breakTypeId: "REGS1EQR1TPZ5",
                        name: "Tea Break",
                        expectedDuration: "PT5M",
                        isPaid: true,
                    },
                ],
                version: 1,
                teamMemberId: "ormj0jJJZ5OZIzxrZYJI",
                declaredCashTipMoney: {
                    amount: BigInt("500"),
                    currency: "USD",
                },
            },
        });
        expect(response).toEqual({
            shift: {
                id: "K0YH4CV5462JB",
                employeeId: "ormj0jJJZ5OZIzxrZYJI",
                locationId: "PAA1RJZZKXBFG",
                timezone: "America/New_York",
                startAt: "2019-01-25T03:11:00-05:00",
                endAt: "2019-01-25T13:11:00-05:00",
                wage: {
                    title: "Bartender",
                    hourlyRate: {
                        amount: BigInt("1500"),
                        currency: "USD",
                    },
                    jobId: "dZtrPh5GSDGugyXGByesVp51",
                    tipEligible: true,
                },
                breaks: [
                    {
                        id: "X7GAQYVVRRG6P",
                        startAt: "2019-01-25T06:11:00-05:00",
                        endAt: "2019-01-25T06:16:00-05:00",
                        breakTypeId: "REGS1EQR1TPZ5",
                        name: "Tea Break",
                        expectedDuration: "PT5M",
                        isPaid: true,
                    },
                ],
                status: "CLOSED",
                version: 2,
                createdAt: "2019-02-28T00:39:02Z",
                updatedAt: "2019-02-28T00:42:41Z",
                teamMemberId: "ormj0jJJZ5OZIzxrZYJI",
                declaredCashTipMoney: {
                    amount: BigInt("500"),
                    currency: "USD",
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/labor/shifts/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.labor.shifts.delete({
            id: "id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
