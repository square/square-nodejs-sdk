// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Shifts", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "HIDSNG5KS478L",
            shift: {
                location_id: "PAA1RJZZKXBFG",
                start_at: "2019-01-25T03:11:00-05:00",
                end_at: "2019-01-25T13:11:00-05:00",
                wage: { title: "Barista", hourly_rate: { amount: BigInt(1100), currency: "USD" }, tip_eligible: true },
                breaks: [
                    {
                        start_at: "2019-01-25T06:11:00-05:00",
                        end_at: "2019-01-25T06:16:00-05:00",
                        break_type_id: "REGS1EQR1TPZ5",
                        name: "Tea Break",
                        expected_duration: "PT5M",
                        is_paid: true,
                    },
                ],
                team_member_id: "ormj0jJJZ5OZIzxrZYJI",
                declared_cash_tip_money: { amount: BigInt(500), currency: "USD" },
            },
        };
        const rawResponseBody = {
            shift: {
                id: "K0YH4CV5462JB",
                employee_id: "ormj0jJJZ5OZIzxrZYJI",
                location_id: "PAA1RJZZKXBFG",
                timezone: "America/New_York",
                start_at: "2019-01-25T03:11:00-05:00",
                end_at: "2019-01-25T13:11:00-05:00",
                wage: {
                    title: "Barista",
                    hourly_rate: { amount: BigInt(1100), currency: "USD" },
                    job_id: "FzbJAtt9qEWncK1BWgVCxQ6M",
                    tip_eligible: true,
                },
                breaks: [
                    {
                        id: "X7GAQYVVRRG6P",
                        start_at: "2019-01-25T06:11:00-05:00",
                        end_at: "2019-01-25T06:16:00-05:00",
                        break_type_id: "REGS1EQR1TPZ5",
                        name: "Tea Break",
                        expected_duration: "PT5M",
                        is_paid: true,
                    },
                ],
                status: "CLOSED",
                version: 1,
                created_at: "2019-02-28T00:39:02Z",
                updated_at: "2019-02-28T00:39:02Z",
                team_member_id: "ormj0jJJZ5OZIzxrZYJI",
                declared_cash_tip_money: { amount: BigInt(500), currency: "USD" },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/labor/shifts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.labor.shifts.create({
            idempotencyKey: "HIDSNG5KS478L",
            shift: {
                locationId: "PAA1RJZZKXBFG",
                startAt: "2019-01-25T03:11:00-05:00",
                endAt: "2019-01-25T13:11:00-05:00",
                wage: {
                    title: "Barista",
                    hourlyRate: {
                        amount: BigInt("1100"),
                        currency: "USD",
                    },
                    tipEligible: true,
                },
                breaks: [
                    {
                        startAt: "2019-01-25T06:11:00-05:00",
                        endAt: "2019-01-25T06:16:00-05:00",
                        breakTypeId: "REGS1EQR1TPZ5",
                        name: "Tea Break",
                        expectedDuration: "PT5M",
                        isPaid: true,
                    },
                ],
                teamMemberId: "ormj0jJJZ5OZIzxrZYJI",
                declaredCashTipMoney: {
                    amount: BigInt("500"),
                    currency: "USD",
                },
            },
        });
        expect(response).toEqual({
            shift: {
                id: "K0YH4CV5462JB",
                employeeId: "ormj0jJJZ5OZIzxrZYJI",
                locationId: "PAA1RJZZKXBFG",
                timezone: "America/New_York",
                startAt: "2019-01-25T03:11:00-05:00",
                endAt: "2019-01-25T13:11:00-05:00",
                wage: {
                    title: "Barista",
                    hourlyRate: {
                        amount: BigInt("1100"),
                        currency: "USD",
                    },
                    jobId: "FzbJAtt9qEWncK1BWgVCxQ6M",
                    tipEligible: true,
                },
                breaks: [
                    {
                        id: "X7GAQYVVRRG6P",
                        startAt: "2019-01-25T06:11:00-05:00",
                        endAt: "2019-01-25T06:16:00-05:00",
                        breakTypeId: "REGS1EQR1TPZ5",
                        name: "Tea Break",
                        expectedDuration: "PT5M",
                        isPaid: true,
                    },
                ],
                status: "CLOSED",
                version: 1,
                createdAt: "2019-02-28T00:39:02Z",
                updatedAt: "2019-02-28T00:39:02Z",
                teamMemberId: "ormj0jJJZ5OZIzxrZYJI",
                declaredCashTipMoney: {
                    amount: BigInt("500"),
                    currency: "USD",
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("search", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            query: {
                filter: {
                    workday: {
                        date_range: { start_date: "2019-01-20", end_date: "2019-02-03" },
                        match_shifts_by: "START_AT",
                        default_timezone: "America/Los_Angeles",
                    },
                },
            },
            limit: 100,
        };
        const rawResponseBody = {
            shifts: [
                {
                    id: "X714F3HA6D1PT",
                    employee_id: "ormj0jJJZ5OZIzxrZYJI",
                    location_id: "PAA1RJZZKXBFG",
                    timezone: "America/New_York",
                    start_at: "2019-01-21T03:11:00-05:00",
                    end_at: "2019-01-21T13:11:00-05:00",
                    wage: {
                        title: "Barista",
                        hourly_rate: { amount: BigInt(1100), currency: "USD" },
                        job_id: "FzbJAtt9qEWncK1BWgVCxQ6M",
                        tip_eligible: true,
                    },
                    breaks: [
                        {
                            id: "SJW7X6AKEJQ65",
                            start_at: "2019-01-21T06:11:00-05:00",
                            end_at: "2019-01-21T06:11:00-05:00",
                            break_type_id: "REGS1EQR1TPZ5",
                            name: "Tea Break",
                            expected_duration: "PT10M",
                            is_paid: true,
                        },
                    ],
                    status: "CLOSED",
                    version: 6,
                    created_at: "2019-01-24T01:12:03Z",
                    updated_at: "2019-02-07T22:21:08Z",
                    team_member_id: "ormj0jJJZ5OZIzxrZYJI",
                    declared_cash_tip_money: { amount: BigInt(500), currency: "USD" },
                },
                {
                    id: "GDHYBZYWK0P2V",
                    employee_id: "33fJchumvVdJwxV0H6L9",
                    location_id: "PAA1RJZZKXBFG",
                    timezone: "America/New_York",
                    start_at: "2019-01-22T12:02:00-05:00",
                    end_at: "2019-01-22T13:02:00-05:00",
                    wage: {
                        title: "Cook",
                        hourly_rate: { amount: BigInt(1600), currency: "USD" },
                        job_id: "gcbz15vKGnMKmaWJJ152kjim",
                        tip_eligible: true,
                    },
                    breaks: [
                        {
                            id: "BKS6VR7WR748A",
                            start_at: "2019-01-23T14:30:00-05:00",
                            end_at: "2019-01-23T14:40:00-05:00",
                            break_type_id: "WQX00VR99F53J",
                            name: "Tea Break",
                            expected_duration: "PT10M",
                            is_paid: true,
                        },
                        {
                            id: "BQFEZSHFZSC51",
                            start_at: "2019-01-22T12:30:00-05:00",
                            end_at: "2019-01-22T12:44:00-05:00",
                            break_type_id: "P6Q468ZFRN1AC",
                            name: "Coffee Break",
                            expected_duration: "PT15M",
                            is_paid: false,
                        },
                    ],
                    status: "CLOSED",
                    version: 16,
                    created_at: "2019-01-23T23:32:45Z",
                    updated_at: "2019-01-24T00:56:25Z",
                    team_member_id: "33fJchumvVdJwxV0H6L9",
                    declared_cash_tip_money: { amount: BigInt(0), currency: "USD" },
                },
            ],
            cursor: "cursor",
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/labor/shifts/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.labor.shifts.search({
            query: {
                filter: {
                    workday: {
                        dateRange: {
                            startDate: "2019-01-20",
                            endDate: "2019-02-03",
                        },
                        matchShiftsBy: "START_AT",
                        defaultTimezone: "America/Los_Angeles",
                    },
                },
            },
            limit: 100,
        });
        expect(response).toEqual({
            shifts: [
                {
                    id: "X714F3HA6D1PT",
                    employeeId: "ormj0jJJZ5OZIzxrZYJI",
                    locationId: "PAA1RJZZKXBFG",
                    timezone: "America/New_York",
                    startAt: "2019-01-21T03:11:00-05:00",
                    endAt: "2019-01-21T13:11:00-05:00",
                    wage: {
                        title: "Barista",
                        hourlyRate: {
                            amount: BigInt("1100"),
                            currency: "USD",
                        },
                        jobId: "FzbJAtt9qEWncK1BWgVCxQ6M",
                        tipEligible: true,
                    },
                    breaks: [
                        {
                            id: "SJW7X6AKEJQ65",
                            startAt: "2019-01-21T06:11:00-05:00",
                            endAt: "2019-01-21T06:11:00-05:00",
                            breakTypeId: "REGS1EQR1TPZ5",
                            name: "Tea Break",
                            expectedDuration: "PT10M",
                            isPaid: true,
                        },
                    ],
                    status: "CLOSED",
                    version: 6,
                    createdAt: "2019-01-24T01:12:03Z",
                    updatedAt: "2019-02-07T22:21:08Z",
                    teamMemberId: "ormj0jJJZ5OZIzxrZYJI",
                    declaredCashTipMoney: {
                        amount: BigInt("500"),
                        currency: "USD",
                    },
                },
                {
                    id: "GDHYBZYWK0P2V",
                    employeeId: "33fJchumvVdJwxV0H6L9",
                    locationId: "PAA1RJZZKXBFG",
                    timezone: "America/New_York",
                    startAt: "2019-01-22T12:02:00-05:00",
                    endAt: "2019-01-22T13:02:00-05:00",
                    wage: {
                        title: "Cook",
                        hourlyRate: {
                            amount: BigInt("1600"),
                            currency: "USD",
                        },
                        jobId: "gcbz15vKGnMKmaWJJ152kjim",
                        tipEligible: true,
                    },
                    breaks: [
                        {
                            id: "BKS6VR7WR748A",
                            startAt: "2019-01-23T14:30:00-05:00",
                            endAt: "2019-01-23T14:40:00-05:00",
                            breakTypeId: "WQX00VR99F53J",
                            name: "Tea Break",
                            expectedDuration: "PT10M",
                            isPaid: true,
                        },
                        {
                            id: "BQFEZSHFZSC51",
                            startAt: "2019-01-22T12:30:00-05:00",
                            endAt: "2019-01-22T12:44:00-05:00",
                            breakTypeId: "P6Q468ZFRN1AC",
                            name: "Coffee Break",
                            expectedDuration: "PT15M",
                            isPaid: false,
                        },
                    ],
                    status: "CLOSED",
                    version: 16,
                    createdAt: "2019-01-23T23:32:45Z",
                    updatedAt: "2019-01-24T00:56:25Z",
                    teamMemberId: "33fJchumvVdJwxV0H6L9",
                    declaredCashTipMoney: {
                        amount: BigInt("0"),
                        currency: "USD",
                    },
                },
            ],
            cursor: "cursor",
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            shift: {
                id: "T35HMQSN89SV4",
                employee_id: "D71KRMQof6cXGUW0aAv7",
                location_id: "PAA1RJZZKXBFG",
                timezone: "America/New_York",
                start_at: "2019-02-23T18:00:00-05:00",
                end_at: "2019-02-23T21:00:00-05:00",
                wage: {
                    title: "Cashier",
                    hourly_rate: { amount: BigInt(1457), currency: "USD" },
                    job_id: "N4YKVLzFj3oGtNocqoYHYpW3",
                    tip_eligible: true,
                },
                breaks: [
                    {
                        id: "M9BBKEPQAQD2T",
                        start_at: "2019-02-23T19:00:00-05:00",
                        end_at: "2019-02-23T20:00:00-05:00",
                        break_type_id: "92EPDRQKJ5088",
                        name: "Lunch Break",
                        expected_duration: "PT1H",
                        is_paid: true,
                    },
                ],
                status: "CLOSED",
                version: 1,
                created_at: "2019-02-27T00:12:12Z",
                updated_at: "2019-02-27T00:12:12Z",
                team_member_id: "D71KRMQof6cXGUW0aAv7",
                declared_cash_tip_money: { amount: BigInt(500), currency: "USD" },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/labor/shifts/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.labor.shifts.get({
            id: "id",
        });
        expect(response).toEqual({
            shift: {
                id: "T35HMQSN89SV4",
                employeeId: "D71KRMQof6cXGUW0aAv7",
                locationId: "PAA1RJZZKXBFG",
                timezone: "America/New_York",
                startAt: "2019-02-23T18:00:00-05:00",
                endAt: "2019-02-23T21:00:00-05:00",
                wage: {
                    title: "Cashier",
                    hourlyRate: {
                        amount: BigInt("1457"),
                        currency: "USD",
                    },
                    jobId: "N4YKVLzFj3oGtNocqoYHYpW3",
                    tipEligible: true,
                },
                breaks: [
                    {
                        id: "M9BBKEPQAQD2T",
                        startAt: "2019-02-23T19:00:00-05:00",
                        endAt: "2019-02-23T20:00:00-05:00",
                        breakTypeId: "92EPDRQKJ5088",
                        name: "Lunch Break",
                        expectedDuration: "PT1H",
                        isPaid: true,
                    },
                ],
                status: "CLOSED",
                version: 1,
                createdAt: "2019-02-27T00:12:12Z",
                updatedAt: "2019-02-27T00:12:12Z",
                teamMemberId: "D71KRMQof6cXGUW0aAv7",
                declaredCashTipMoney: {
                    amount: BigInt("500"),
                    currency: "USD",
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            shift: {
                location_id: "PAA1RJZZKXBFG",
                start_at: "2019-01-25T03:11:00-05:00",
                end_at: "2019-01-25T13:11:00-05:00",
                wage: {
                    title: "Bartender",
                    hourly_rate: { amount: BigInt(1500), currency: "USD" },
                    tip_eligible: true,
                },
                breaks: [
                    {
                        id: "X7GAQYVVRRG6P",
                        start_at: "2019-01-25T06:11:00-05:00",
                        end_at: "2019-01-25T06:16:00-05:00",
                        break_type_id: "REGS1EQR1TPZ5",
                        name: "Tea Break",
                        expected_duration: "PT5M",
                        is_paid: true,
                    },
                ],
                version: 1,
                team_member_id: "ormj0jJJZ5OZIzxrZYJI",
                declared_cash_tip_money: { amount: BigInt(500), currency: "USD" },
            },
        };
        const rawResponseBody = {
            shift: {
                id: "K0YH4CV5462JB",
                employee_id: "ormj0jJJZ5OZIzxrZYJI",
                location_id: "PAA1RJZZKXBFG",
                timezone: "America/New_York",
                start_at: "2019-01-25T03:11:00-05:00",
                end_at: "2019-01-25T13:11:00-05:00",
                wage: {
                    title: "Bartender",
                    hourly_rate: { amount: BigInt(1500), currency: "USD" },
                    job_id: "dZtrPh5GSDGugyXGByesVp51",
                    tip_eligible: true,
                },
                breaks: [
                    {
                        id: "X7GAQYVVRRG6P",
                        start_at: "2019-01-25T06:11:00-05:00",
                        end_at: "2019-01-25T06:16:00-05:00",
                        break_type_id: "REGS1EQR1TPZ5",
                        name: "Tea Break",
                        expected_duration: "PT5M",
                        is_paid: true,
                    },
                ],
                status: "CLOSED",
                version: 2,
                created_at: "2019-02-28T00:39:02Z",
                updated_at: "2019-02-28T00:42:41Z",
                team_member_id: "ormj0jJJZ5OZIzxrZYJI",
                declared_cash_tip_money: { amount: BigInt(500), currency: "USD" },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .put("/v2/labor/shifts/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.labor.shifts.update({
            id: "id",
            shift: {
                locationId: "PAA1RJZZKXBFG",
                startAt: "2019-01-25T03:11:00-05:00",
                endAt: "2019-01-25T13:11:00-05:00",
                wage: {
                    title: "Bartender",
                    hourlyRate: {
                        amount: BigInt("1500"),
                        currency: "USD",
                    },
                    tipEligible: true,
                },
                breaks: [
                    {
                        id: "X7GAQYVVRRG6P",
                        startAt: "2019-01-25T06:11:00-05:00",
                        endAt: "2019-01-25T06:16:00-05:00",
                        breakTypeId: "REGS1EQR1TPZ5",
                        name: "Tea Break",
                        expectedDuration: "PT5M",
                        isPaid: true,
                    },
                ],
                version: 1,
                teamMemberId: "ormj0jJJZ5OZIzxrZYJI",
                declaredCashTipMoney: {
                    amount: BigInt("500"),
                    currency: "USD",
                },
            },
        });
        expect(response).toEqual({
            shift: {
                id: "K0YH4CV5462JB",
                employeeId: "ormj0jJJZ5OZIzxrZYJI",
                locationId: "PAA1RJZZKXBFG",
                timezone: "America/New_York",
                startAt: "2019-01-25T03:11:00-05:00",
                endAt: "2019-01-25T13:11:00-05:00",
                wage: {
                    title: "Bartender",
                    hourlyRate: {
                        amount: BigInt("1500"),
                        currency: "USD",
                    },
                    jobId: "dZtrPh5GSDGugyXGByesVp51",
                    tipEligible: true,
                },
                breaks: [
                    {
                        id: "X7GAQYVVRRG6P",
                        startAt: "2019-01-25T06:11:00-05:00",
                        endAt: "2019-01-25T06:16:00-05:00",
                        breakTypeId: "REGS1EQR1TPZ5",
                        name: "Tea Break",
                        expectedDuration: "PT5M",
                        isPaid: true,
                    },
                ],
                status: "CLOSED",
                version: 2,
                createdAt: "2019-02-28T00:39:02Z",
                updatedAt: "2019-02-28T00:42:41Z",
                teamMemberId: "ormj0jJJZ5OZIzxrZYJI",
                declaredCashTipMoney: {
                    amount: BigInt("500"),
                    currency: "USD",
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/labor/shifts/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.labor.shifts.delete({
            id: "id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
