// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("EmployeeWages", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            employee_wages: [
                {
                    id: "pXS3qCv7BERPnEGedM4S8mhm",
                    employee_id: "33fJchumvVdJwxV0H6L9",
                    title: "Manager",
                    hourly_rate: { amount: BigInt(3250), currency: "USD" },
                },
                {
                    id: "rZduCkzYDUVL3ovh1sQgbue6",
                    employee_id: "33fJchumvVdJwxV0H6L9",
                    title: "Cook",
                    hourly_rate: { amount: BigInt(2600), currency: "USD" },
                },
                {
                    id: "FxLbs5KpPUHa8wyt5ctjubDX",
                    employee_id: "33fJchumvVdJwxV0H6L9",
                    title: "Barista",
                    hourly_rate: { amount: BigInt(1600), currency: "USD" },
                },
                {
                    id: "vD1wCgijMDR3cX5TPnu7VXto",
                    employee_id: "33fJchumvVdJwxV0H6L9",
                    title: "Cashier",
                    hourly_rate: { amount: BigInt(1700), currency: "USD" },
                },
            ],
            cursor: "2fofTniCgT0yIPAq26kmk0YyFQJZfbWkh73OOnlTHmTAx13NgED",
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/labor/employee-wages")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            employeeWages: [
                {
                    id: "pXS3qCv7BERPnEGedM4S8mhm",
                    employeeId: "33fJchumvVdJwxV0H6L9",
                    title: "Manager",
                    hourlyRate: {
                        amount: BigInt("3250"),
                        currency: "USD",
                    },
                },
                {
                    id: "rZduCkzYDUVL3ovh1sQgbue6",
                    employeeId: "33fJchumvVdJwxV0H6L9",
                    title: "Cook",
                    hourlyRate: {
                        amount: BigInt("2600"),
                        currency: "USD",
                    },
                },
                {
                    id: "FxLbs5KpPUHa8wyt5ctjubDX",
                    employeeId: "33fJchumvVdJwxV0H6L9",
                    title: "Barista",
                    hourlyRate: {
                        amount: BigInt("1600"),
                        currency: "USD",
                    },
                },
                {
                    id: "vD1wCgijMDR3cX5TPnu7VXto",
                    employeeId: "33fJchumvVdJwxV0H6L9",
                    title: "Cashier",
                    hourlyRate: {
                        amount: BigInt("1700"),
                        currency: "USD",
                    },
                },
            ],
            cursor: "2fofTniCgT0yIPAq26kmk0YyFQJZfbWkh73OOnlTHmTAx13NgED",
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        };
        const page = await client.labor.employeeWages.list({
            employeeId: "employee_id",
            limit: 1,
            cursor: "cursor",
        });

        expect(expected.employeeWages).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.employeeWages).toEqual(nextPage.data);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            employee_wage: {
                id: "pXS3qCv7BERPnEGedM4S8mhm",
                employee_id: "33fJchumvVdJwxV0H6L9",
                title: "Manager",
                hourly_rate: { amount: BigInt(2000), currency: "USD" },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/labor/employee-wages/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.labor.employeeWages.get({
            id: "id",
        });
        expect(response).toEqual({
            employeeWage: {
                id: "pXS3qCv7BERPnEGedM4S8mhm",
                employeeId: "33fJchumvVdJwxV0H6L9",
                title: "Manager",
                hourlyRate: {
                    amount: BigInt("2000"),
                    currency: "USD",
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
