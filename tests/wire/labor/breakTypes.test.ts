/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { SquareClient } from "../../../src/Client";

describe("BreakTypes", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "PAD3NG5KSN2GL",
            break_type: {
                location_id: "CGJN03P1D08GF",
                break_name: "Lunch Break",
                expected_duration: "PT30M",
                is_paid: true,
            },
        };
        const rawResponseBody = {
            break_type: {
                id: "49SSVDJG76WF3",
                location_id: "CGJN03P1D08GF",
                break_name: "Lunch Break",
                expected_duration: "PT30M",
                is_paid: true,
                version: 1,
                created_at: "2019-02-26T22:42:54Z",
                updated_at: "2019-02-26T22:42:54Z",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/labor/break-types")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.labor.breakTypes.create({
            idempotency_key: "PAD3NG5KSN2GL",
            break_type: {
                location_id: "CGJN03P1D08GF",
                break_name: "Lunch Break",
                expected_duration: "PT30M",
                is_paid: true,
            },
        });
        expect(response).toEqual({
            break_type: {
                id: "49SSVDJG76WF3",
                location_id: "CGJN03P1D08GF",
                break_name: "Lunch Break",
                expected_duration: "PT30M",
                is_paid: true,
                version: 1,
                created_at: "2019-02-26T22:42:54Z",
                updated_at: "2019-02-26T22:42:54Z",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            break_type: {
                id: "lA0mj_RSOprNPwMUXdYp",
                location_id: "059SB0E0WCNWS",
                break_name: "Lunch Break",
                expected_duration: "PT30M",
                is_paid: true,
                version: 1,
                created_at: "2019-02-21T17:50:00Z",
                updated_at: "2019-02-21T17:50:00Z",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/labor/break-types/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.labor.breakTypes.get({
            id: "id",
        });
        expect(response).toEqual({
            break_type: {
                id: "lA0mj_RSOprNPwMUXdYp",
                location_id: "059SB0E0WCNWS",
                break_name: "Lunch Break",
                expected_duration: "PT30M",
                is_paid: true,
                version: 1,
                created_at: "2019-02-21T17:50:00Z",
                updated_at: "2019-02-21T17:50:00Z",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            break_type: {
                location_id: "26M7H24AZ9N6R",
                break_name: "Lunch",
                expected_duration: "PT50M",
                is_paid: true,
                version: 1,
            },
        };
        const rawResponseBody = {
            break_type: {
                id: "Q6JSJS6D4DBCH",
                location_id: "26M7H24AZ9N6R",
                break_name: "Lunch",
                expected_duration: "PT50M",
                is_paid: true,
                version: 2,
                created_at: "2018-06-12T20:19:12Z",
                updated_at: "2019-02-26T23:12:59Z",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .put("/v2/labor/break-types/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.labor.breakTypes.update({
            id: "id",
            break_type: {
                location_id: "26M7H24AZ9N6R",
                break_name: "Lunch",
                expected_duration: "PT50M",
                is_paid: true,
                version: 1,
            },
        });
        expect(response).toEqual({
            break_type: {
                id: "Q6JSJS6D4DBCH",
                location_id: "26M7H24AZ9N6R",
                break_name: "Lunch",
                expected_duration: "PT50M",
                is_paid: true,
                version: 2,
                created_at: "2018-06-12T20:19:12Z",
                updated_at: "2019-02-26T23:12:59Z",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/labor/break-types/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.labor.breakTypes.delete({
            id: "id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
