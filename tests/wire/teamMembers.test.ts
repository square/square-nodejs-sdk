/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SquareClient } from "../../src/Client";

describe("TeamMembers", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "idempotency-key-0",
            team_member: {
                reference_id: "reference_id_1",
                status: "ACTIVE",
                given_name: "Joe",
                family_name: "Doe",
                email_address: "joe_doe@gmail.com",
                phone_number: "+14159283333",
                assigned_locations: {
                    assignment_type: "EXPLICIT_LOCATIONS",
                    location_ids: ["YSGH2WBKG94QZ", "GA2Y9HSJ8KRYT"],
                },
                wage_setting: {
                    job_assignments: [
                        {
                            pay_type: "SALARY",
                            annual_rate: { amount: BigInt(3000000), currency: "USD" },
                            weekly_hours: 40,
                            job_id: "FjS8x95cqHiMenw4f1NAUH4P",
                        },
                        {
                            pay_type: "HOURLY",
                            hourly_rate: { amount: BigInt(2000), currency: "USD" },
                            job_id: "VDNpRv8da51NU8qZFC5zDWpF",
                        },
                    ],
                    is_overtime_exempt: true,
                },
            },
        };
        const rawResponseBody = {
            team_member: {
                id: "1yJlHapkseYnNPETIU1B",
                reference_id: "reference_id_1",
                is_owner: false,
                status: "ACTIVE",
                given_name: "Joe",
                family_name: "Doe",
                email_address: "joe_doe@example.com",
                phone_number: "+14159283333",
                created_at: "2021-06-11T22:55:45Z",
                updated_at: "2021-06-11T22:55:45Z",
                assigned_locations: {
                    assignment_type: "EXPLICIT_LOCATIONS",
                    location_ids: ["GA2Y9HSJ8KRYT", "YSGH2WBKG94QZ"],
                },
                wage_setting: {
                    team_member_id: "1yJlHapkseYnNPETIU1B",
                    job_assignments: [
                        {
                            job_title: "Manager",
                            pay_type: "SALARY",
                            hourly_rate: { amount: BigInt(1443), currency: "USD" },
                            annual_rate: { amount: BigInt(3000000), currency: "USD" },
                            weekly_hours: 40,
                            job_id: "FjS8x95cqHiMenw4f1NAUH4P",
                        },
                        {
                            job_title: "Cashier",
                            pay_type: "HOURLY",
                            hourly_rate: { amount: BigInt(2000), currency: "USD" },
                            job_id: "VDNpRv8da51NU8qZFC5zDWpF",
                        },
                    ],
                    is_overtime_exempt: true,
                    version: 1,
                    created_at: "2021-06-11T22:55:45Z",
                    updated_at: "2021-06-11T22:55:45Z",
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/team-members")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.teamMembers.create({
            idempotencyKey: "idempotency-key-0",
            teamMember: {
                referenceId: "reference_id_1",
                status: "ACTIVE",
                givenName: "Joe",
                familyName: "Doe",
                emailAddress: "joe_doe@gmail.com",
                phoneNumber: "+14159283333",
                assignedLocations: {
                    assignmentType: "EXPLICIT_LOCATIONS",
                    locationIds: ["YSGH2WBKG94QZ", "GA2Y9HSJ8KRYT"],
                },
                wageSetting: {
                    jobAssignments: [
                        {
                            payType: "SALARY",
                            annualRate: {
                                amount: BigInt("3000000"),
                                currency: "USD",
                            },
                            weeklyHours: 40,
                            jobId: "FjS8x95cqHiMenw4f1NAUH4P",
                        },
                        {
                            payType: "HOURLY",
                            hourlyRate: {
                                amount: BigInt("2000"),
                                currency: "USD",
                            },
                            jobId: "VDNpRv8da51NU8qZFC5zDWpF",
                        },
                    ],
                    isOvertimeExempt: true,
                },
            },
        });
        expect(response).toEqual({
            teamMember: {
                id: "1yJlHapkseYnNPETIU1B",
                referenceId: "reference_id_1",
                isOwner: false,
                status: "ACTIVE",
                givenName: "Joe",
                familyName: "Doe",
                emailAddress: "joe_doe@example.com",
                phoneNumber: "+14159283333",
                createdAt: "2021-06-11T22:55:45Z",
                updatedAt: "2021-06-11T22:55:45Z",
                assignedLocations: {
                    assignmentType: "EXPLICIT_LOCATIONS",
                    locationIds: ["GA2Y9HSJ8KRYT", "YSGH2WBKG94QZ"],
                },
                wageSetting: {
                    teamMemberId: "1yJlHapkseYnNPETIU1B",
                    jobAssignments: [
                        {
                            jobTitle: "Manager",
                            payType: "SALARY",
                            hourlyRate: {
                                amount: BigInt("1443"),
                                currency: "USD",
                            },
                            annualRate: {
                                amount: BigInt("3000000"),
                                currency: "USD",
                            },
                            weeklyHours: 40,
                            jobId: "FjS8x95cqHiMenw4f1NAUH4P",
                        },
                        {
                            jobTitle: "Cashier",
                            payType: "HOURLY",
                            hourlyRate: {
                                amount: BigInt("2000"),
                                currency: "USD",
                            },
                            jobId: "VDNpRv8da51NU8qZFC5zDWpF",
                        },
                    ],
                    isOvertimeExempt: true,
                    version: 1,
                    createdAt: "2021-06-11T22:55:45Z",
                    updatedAt: "2021-06-11T22:55:45Z",
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("batchCreate", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            team_members: {
                "idempotency-key-1": {
                    team_member: {
                        reference_id: "reference_id_1",
                        given_name: "Joe",
                        family_name: "Doe",
                        email_address: "joe_doe@gmail.com",
                        phone_number: "+14159283333",
                        assigned_locations: {
                            assignment_type: "EXPLICIT_LOCATIONS",
                            location_ids: ["YSGH2WBKG94QZ", "GA2Y9HSJ8KRYT"],
                        },
                    },
                },
                "idempotency-key-2": {
                    team_member: {
                        reference_id: "reference_id_2",
                        given_name: "Jane",
                        family_name: "Smith",
                        email_address: "jane_smith@gmail.com",
                        phone_number: "+14159223334",
                        assigned_locations: { assignment_type: "ALL_CURRENT_AND_FUTURE_LOCATIONS" },
                    },
                },
            },
        };
        const rawResponseBody = {
            team_members: {
                "idempotency-key-1": {
                    team_member: {
                        id: "ywhG1qfIOoqsHfVRubFV",
                        reference_id: "reference_id_1",
                        is_owner: false,
                        status: "ACTIVE",
                        given_name: "Joe",
                        family_name: "Doe",
                        email_address: "joe_doe@gmail.com",
                        phone_number: "+14159283333",
                        assigned_locations: {
                            assignment_type: "EXPLICIT_LOCATIONS",
                            location_ids: ["GA2Y9HSJ8KRYT", "YSGH2WBKG94QZ"],
                        },
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                "idempotency-key-2": {
                    team_member: {
                        id: "IF_Ncrg7fHhCqxVI9T6R",
                        reference_id: "reference_id_2",
                        is_owner: false,
                        status: "ACTIVE",
                        given_name: "Jane",
                        family_name: "Smith",
                        email_address: "jane_smith@gmail.com",
                        phone_number: "+14159223334",
                        assigned_locations: { assignment_type: "ALL_CURRENT_AND_FUTURE_LOCATIONS" },
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/team-members/bulk-create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.teamMembers.batchCreate({
            teamMembers: {
                "idempotency-key-1": {
                    teamMember: {
                        referenceId: "reference_id_1",
                        givenName: "Joe",
                        familyName: "Doe",
                        emailAddress: "joe_doe@gmail.com",
                        phoneNumber: "+14159283333",
                        assignedLocations: {
                            assignmentType: "EXPLICIT_LOCATIONS",
                            locationIds: ["YSGH2WBKG94QZ", "GA2Y9HSJ8KRYT"],
                        },
                    },
                },
                "idempotency-key-2": {
                    teamMember: {
                        referenceId: "reference_id_2",
                        givenName: "Jane",
                        familyName: "Smith",
                        emailAddress: "jane_smith@gmail.com",
                        phoneNumber: "+14159223334",
                        assignedLocations: {
                            assignmentType: "ALL_CURRENT_AND_FUTURE_LOCATIONS",
                        },
                    },
                },
            },
        });
        expect(response).toEqual({
            teamMembers: {
                "idempotency-key-1": {
                    teamMember: {
                        id: "ywhG1qfIOoqsHfVRubFV",
                        referenceId: "reference_id_1",
                        isOwner: false,
                        status: "ACTIVE",
                        givenName: "Joe",
                        familyName: "Doe",
                        emailAddress: "joe_doe@gmail.com",
                        phoneNumber: "+14159283333",
                        assignedLocations: {
                            assignmentType: "EXPLICIT_LOCATIONS",
                            locationIds: ["GA2Y9HSJ8KRYT", "YSGH2WBKG94QZ"],
                        },
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                "idempotency-key-2": {
                    teamMember: {
                        id: "IF_Ncrg7fHhCqxVI9T6R",
                        referenceId: "reference_id_2",
                        isOwner: false,
                        status: "ACTIVE",
                        givenName: "Jane",
                        familyName: "Smith",
                        emailAddress: "jane_smith@gmail.com",
                        phoneNumber: "+14159223334",
                        assignedLocations: {
                            assignmentType: "ALL_CURRENT_AND_FUTURE_LOCATIONS",
                        },
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("batchUpdate", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            team_members: {
                "AFMwA08kR-MIF-3Vs0OE": {
                    team_member: {
                        reference_id: "reference_id_2",
                        is_owner: false,
                        status: "ACTIVE",
                        given_name: "Jane",
                        family_name: "Smith",
                        email_address: "jane_smith@gmail.com",
                        phone_number: "+14159223334",
                        assigned_locations: { assignment_type: "ALL_CURRENT_AND_FUTURE_LOCATIONS" },
                    },
                },
                "fpgteZNMaf0qOK-a4t6P": {
                    team_member: {
                        reference_id: "reference_id_1",
                        is_owner: false,
                        status: "ACTIVE",
                        given_name: "Joe",
                        family_name: "Doe",
                        email_address: "joe_doe@gmail.com",
                        phone_number: "+14159283333",
                        assigned_locations: {
                            assignment_type: "EXPLICIT_LOCATIONS",
                            location_ids: ["YSGH2WBKG94QZ", "GA2Y9HSJ8KRYT"],
                        },
                    },
                },
            },
        };
        const rawResponseBody = {
            team_members: {
                "AFMwA08kR-MIF-3Vs0OE": {
                    team_member: {
                        id: "AFMwA08kR-MIF-3Vs0OE",
                        reference_id: "reference_id_2",
                        is_owner: false,
                        status: "ACTIVE",
                        given_name: "Jane",
                        family_name: "Smith",
                        email_address: "jane_smith@example.com",
                        phone_number: "+14159223334",
                        created_at: "2020-03-24T18:14:00Z",
                        updated_at: "2020-03-24T18:18:00Z",
                        assigned_locations: { assignment_type: "ALL_CURRENT_AND_FUTURE_LOCATIONS" },
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                "fpgteZNMaf0qOK-a4t6P": {
                    team_member: {
                        id: "fpgteZNMaf0qOK-a4t6P",
                        reference_id: "reference_id_1",
                        is_owner: false,
                        status: "ACTIVE",
                        given_name: "Joe",
                        family_name: "Doe",
                        email_address: "joe_doe@example.com",
                        phone_number: "+14159283333",
                        created_at: "2020-03-24T18:14:00Z",
                        updated_at: "2020-03-24T18:18:00Z",
                        assigned_locations: {
                            assignment_type: "EXPLICIT_LOCATIONS",
                            location_ids: ["GA2Y9HSJ8KRYT", "YSGH2WBKG94QZ"],
                        },
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/team-members/bulk-update")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.teamMembers.batchUpdate({
            teamMembers: {
                "AFMwA08kR-MIF-3Vs0OE": {
                    teamMember: {
                        referenceId: "reference_id_2",
                        isOwner: false,
                        status: "ACTIVE",
                        givenName: "Jane",
                        familyName: "Smith",
                        emailAddress: "jane_smith@gmail.com",
                        phoneNumber: "+14159223334",
                        assignedLocations: {
                            assignmentType: "ALL_CURRENT_AND_FUTURE_LOCATIONS",
                        },
                    },
                },
                "fpgteZNMaf0qOK-a4t6P": {
                    teamMember: {
                        referenceId: "reference_id_1",
                        isOwner: false,
                        status: "ACTIVE",
                        givenName: "Joe",
                        familyName: "Doe",
                        emailAddress: "joe_doe@gmail.com",
                        phoneNumber: "+14159283333",
                        assignedLocations: {
                            assignmentType: "EXPLICIT_LOCATIONS",
                            locationIds: ["YSGH2WBKG94QZ", "GA2Y9HSJ8KRYT"],
                        },
                    },
                },
            },
        });
        expect(response).toEqual({
            teamMembers: {
                "AFMwA08kR-MIF-3Vs0OE": {
                    teamMember: {
                        id: "AFMwA08kR-MIF-3Vs0OE",
                        referenceId: "reference_id_2",
                        isOwner: false,
                        status: "ACTIVE",
                        givenName: "Jane",
                        familyName: "Smith",
                        emailAddress: "jane_smith@example.com",
                        phoneNumber: "+14159223334",
                        createdAt: "2020-03-24T18:14:00Z",
                        updatedAt: "2020-03-24T18:18:00Z",
                        assignedLocations: {
                            assignmentType: "ALL_CURRENT_AND_FUTURE_LOCATIONS",
                        },
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                "fpgteZNMaf0qOK-a4t6P": {
                    teamMember: {
                        id: "fpgteZNMaf0qOK-a4t6P",
                        referenceId: "reference_id_1",
                        isOwner: false,
                        status: "ACTIVE",
                        givenName: "Joe",
                        familyName: "Doe",
                        emailAddress: "joe_doe@example.com",
                        phoneNumber: "+14159283333",
                        createdAt: "2020-03-24T18:14:00Z",
                        updatedAt: "2020-03-24T18:18:00Z",
                        assignedLocations: {
                            assignmentType: "EXPLICIT_LOCATIONS",
                            locationIds: ["GA2Y9HSJ8KRYT", "YSGH2WBKG94QZ"],
                        },
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("search", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { query: { filter: { location_ids: ["0G5P3VGACMMQZ"], status: "ACTIVE" } }, limit: 10 };
        const rawResponseBody = {
            team_members: [
                {
                    id: "-3oZQKPKVk6gUXU_V5Qa",
                    reference_id: "12345678",
                    is_owner: false,
                    status: "ACTIVE",
                    given_name: "Johnny",
                    family_name: "Cash",
                    email_address: "johnny_cash@squareup.com",
                    phone_number: "phone_number",
                    created_at: "2019-07-10T17:26:48Z",
                    updated_at: "2020-04-28T21:49:28Z",
                    assigned_locations: { assignment_type: "ALL_CURRENT_AND_FUTURE_LOCATIONS" },
                    wage_setting: {
                        team_member_id: "-3oZQKPKVk6gUXU_V5Qa",
                        job_assignments: [
                            {
                                job_title: "Manager",
                                pay_type: "SALARY",
                                hourly_rate: { amount: BigInt(1443), currency: "USD" },
                                annual_rate: { amount: BigInt(3000000), currency: "USD" },
                                weekly_hours: 40,
                                job_id: "FjS8x95cqHiMenw4f1NAUH4P",
                            },
                            {
                                job_title: "Cashier",
                                pay_type: "HOURLY",
                                hourly_rate: { amount: BigInt(2000), currency: "USD" },
                                job_id: "VDNpRv8da51NU8qZFC5zDWpF",
                            },
                        ],
                        is_overtime_exempt: true,
                        version: 1,
                        created_at: "2021-06-11T22:55:45Z",
                        updated_at: "2021-06-11T22:55:45Z",
                    },
                },
                {
                    id: "1AVJj0DjkzbmbJw5r4KK",
                    reference_id: "abcded",
                    is_owner: false,
                    status: "ACTIVE",
                    given_name: "Lombard",
                    family_name: "Smith",
                    email_address: "email_address",
                    phone_number: "+14155552671",
                    created_at: "2020-03-24T18:14:01Z",
                    updated_at: "2020-06-09T17:38:05Z",
                    assigned_locations: { assignment_type: "ALL_CURRENT_AND_FUTURE_LOCATIONS" },
                    wage_setting: {
                        team_member_id: "1AVJj0DjkzbmbJw5r4KK",
                        job_assignments: [
                            {
                                job_title: "Cashier",
                                pay_type: "HOURLY",
                                hourly_rate: { amount: BigInt(2400), currency: "USD" },
                                job_id: "VDNpRv8da51NU8qZFC5zDWpF",
                            },
                        ],
                        is_overtime_exempt: true,
                        version: 2,
                        created_at: "2020-03-24T18:14:01Z",
                        updated_at: "2020-06-09T17:38:05Z",
                    },
                },
                {
                    id: "2JCmiJol_KKFs9z2Evim",
                    reference_id: "reference_id",
                    is_owner: false,
                    status: "ACTIVE",
                    given_name: "Monica",
                    family_name: "Sway",
                    email_address: "email_address",
                    phone_number: "phone_number",
                    created_at: "2020-03-24T01:09:25Z",
                    updated_at: "2020-03-24T01:11:25Z",
                    assigned_locations: { assignment_type: "ALL_CURRENT_AND_FUTURE_LOCATIONS" },
                    wage_setting: {
                        team_member_id: "2JCmiJol_KKFs9z2Evim",
                        job_assignments: [
                            {
                                job_title: "Cashier",
                                pay_type: "HOURLY",
                                hourly_rate: { amount: BigInt(2400), currency: "USD" },
                                job_id: "VDNpRv8da51NU8qZFC5zDWpF",
                            },
                        ],
                        is_overtime_exempt: true,
                        version: 1,
                        created_at: "2020-03-24T01:09:25Z",
                        updated_at: "2020-03-24T01:09:25Z",
                    },
                },
                {
                    id: "4uXcJQSLtbk3F0UQHFNQ",
                    reference_id: "reference_id",
                    is_owner: false,
                    status: "ACTIVE",
                    given_name: "Elton",
                    family_name: "Ipsum",
                    email_address: "email_address",
                    phone_number: "phone_number",
                    created_at: "2020-03-24T01:09:23Z",
                    updated_at: "2020-03-24T01:15:23Z",
                    assigned_locations: { assignment_type: "ALL_CURRENT_AND_FUTURE_LOCATIONS" },
                },
                {
                    id: "5CoUpyrw1YwGWcRd-eDL",
                    reference_id: "reference_id",
                    is_owner: false,
                    status: "ACTIVE",
                    given_name: "Steven",
                    family_name: "Lo",
                    email_address: "email_address",
                    phone_number: "phone_number",
                    created_at: "2020-03-24T01:09:23Z",
                    updated_at: "2020-03-24T01:19:23Z",
                    assigned_locations: { assignment_type: "ALL_CURRENT_AND_FUTURE_LOCATIONS" },
                },
                {
                    id: "5MRPTTp8MMBLVSmzrGha",
                    reference_id: "reference_id",
                    is_owner: false,
                    status: "ACTIVE",
                    given_name: "Patrick",
                    family_name: "Steward",
                    email_address: "email_address",
                    phone_number: "+14155552671",
                    created_at: "2020-03-24T18:14:03Z",
                    updated_at: "2020-03-24T18:18:03Z",
                    assigned_locations: { assignment_type: "ALL_CURRENT_AND_FUTURE_LOCATIONS" },
                    wage_setting: {
                        team_member_id: "5MRPTTp8MMBLVSmzrGha",
                        job_assignments: [
                            {
                                job_title: "Cashier",
                                pay_type: "HOURLY",
                                hourly_rate: { amount: BigInt(2000), currency: "USD" },
                                job_id: "VDNpRv8da51NU8qZFC5zDWpF",
                            },
                        ],
                        is_overtime_exempt: true,
                        version: 1,
                        created_at: "2020-03-24T18:14:03Z",
                        updated_at: "2020-03-24T18:14:03Z",
                    },
                },
                {
                    id: "7F5ZxsfRnkexhu1PTbfh",
                    reference_id: "reference_id",
                    is_owner: false,
                    status: "ACTIVE",
                    given_name: "Ivy",
                    family_name: "Manny",
                    email_address: "email_address",
                    phone_number: "phone_number",
                    created_at: "2020-03-24T01:09:25Z",
                    updated_at: "2020-03-24T01:09:25Z",
                    assigned_locations: { assignment_type: "ALL_CURRENT_AND_FUTURE_LOCATIONS" },
                },
                {
                    id: "808X9HR72yKvVaigQXf4",
                    reference_id: "reference_id",
                    is_owner: false,
                    status: "ACTIVE",
                    given_name: "John",
                    family_name: "Smith",
                    email_address: "john_smith@example.com",
                    phone_number: "+14155552671",
                    created_at: "2020-03-24T18:14:02Z",
                    updated_at: "2020-03-24T18:14:02Z",
                    assigned_locations: { assignment_type: "ALL_CURRENT_AND_FUTURE_LOCATIONS" },
                },
                {
                    id: "9MVDVoY4hazkWKGo_OuZ",
                    reference_id: "reference_id",
                    is_owner: false,
                    status: "ACTIVE",
                    given_name: "Robert",
                    family_name: "Wen",
                    email_address: "r_wen@example.com",
                    phone_number: "+14155552671",
                    created_at: "2020-03-24T18:14:00Z",
                    updated_at: "2020-03-24T18:14:00Z",
                    assigned_locations: { assignment_type: "ALL_CURRENT_AND_FUTURE_LOCATIONS" },
                },
                {
                    id: "9UglUjOXQ13-hMFypCft",
                    reference_id: "reference_id",
                    is_owner: false,
                    status: "ACTIVE",
                    given_name: "Ashley",
                    family_name: "Simpson",
                    email_address: "asimpson@example.com",
                    phone_number: "+14155552671",
                    created_at: "2020-03-24T18:14:00Z",
                    updated_at: "2020-03-24T18:18:00Z",
                    assigned_locations: { assignment_type: "ALL_CURRENT_AND_FUTURE_LOCATIONS" },
                    wage_setting: {
                        team_member_id: "9UglUjOXQ13-hMFypCft",
                        job_assignments: [
                            {
                                job_title: "Cashier",
                                pay_type: "HOURLY",
                                hourly_rate: { amount: BigInt(2000), currency: "USD" },
                                job_id: "VDNpRv8da51NU8qZFC5zDWpF",
                            },
                        ],
                        is_overtime_exempt: true,
                        version: 1,
                        created_at: "2020-03-24T18:14:00Z",
                        updated_at: "2020-03-24T18:14:03Z",
                    },
                },
            ],
            cursor: "N:9UglUjOXQ13-hMFypCft",
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/team-members/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.teamMembers.search({
            query: {
                filter: {
                    locationIds: ["0G5P3VGACMMQZ"],
                    status: "ACTIVE",
                },
            },
            limit: 10,
        });
        expect(response).toEqual({
            teamMembers: [
                {
                    id: "-3oZQKPKVk6gUXU_V5Qa",
                    referenceId: "12345678",
                    isOwner: false,
                    status: "ACTIVE",
                    givenName: "Johnny",
                    familyName: "Cash",
                    emailAddress: "johnny_cash@squareup.com",
                    phoneNumber: "phone_number",
                    createdAt: "2019-07-10T17:26:48Z",
                    updatedAt: "2020-04-28T21:49:28Z",
                    assignedLocations: {
                        assignmentType: "ALL_CURRENT_AND_FUTURE_LOCATIONS",
                    },
                    wageSetting: {
                        teamMemberId: "-3oZQKPKVk6gUXU_V5Qa",
                        jobAssignments: [
                            {
                                jobTitle: "Manager",
                                payType: "SALARY",
                                hourlyRate: {
                                    amount: BigInt("1443"),
                                    currency: "USD",
                                },
                                annualRate: {
                                    amount: BigInt("3000000"),
                                    currency: "USD",
                                },
                                weeklyHours: 40,
                                jobId: "FjS8x95cqHiMenw4f1NAUH4P",
                            },
                            {
                                jobTitle: "Cashier",
                                payType: "HOURLY",
                                hourlyRate: {
                                    amount: BigInt("2000"),
                                    currency: "USD",
                                },
                                jobId: "VDNpRv8da51NU8qZFC5zDWpF",
                            },
                        ],
                        isOvertimeExempt: true,
                        version: 1,
                        createdAt: "2021-06-11T22:55:45Z",
                        updatedAt: "2021-06-11T22:55:45Z",
                    },
                },
                {
                    id: "1AVJj0DjkzbmbJw5r4KK",
                    referenceId: "abcded",
                    isOwner: false,
                    status: "ACTIVE",
                    givenName: "Lombard",
                    familyName: "Smith",
                    emailAddress: "email_address",
                    phoneNumber: "+14155552671",
                    createdAt: "2020-03-24T18:14:01Z",
                    updatedAt: "2020-06-09T17:38:05Z",
                    assignedLocations: {
                        assignmentType: "ALL_CURRENT_AND_FUTURE_LOCATIONS",
                    },
                    wageSetting: {
                        teamMemberId: "1AVJj0DjkzbmbJw5r4KK",
                        jobAssignments: [
                            {
                                jobTitle: "Cashier",
                                payType: "HOURLY",
                                hourlyRate: {
                                    amount: BigInt("2400"),
                                    currency: "USD",
                                },
                                jobId: "VDNpRv8da51NU8qZFC5zDWpF",
                            },
                        ],
                        isOvertimeExempt: true,
                        version: 2,
                        createdAt: "2020-03-24T18:14:01Z",
                        updatedAt: "2020-06-09T17:38:05Z",
                    },
                },
                {
                    id: "2JCmiJol_KKFs9z2Evim",
                    referenceId: "reference_id",
                    isOwner: false,
                    status: "ACTIVE",
                    givenName: "Monica",
                    familyName: "Sway",
                    emailAddress: "email_address",
                    phoneNumber: "phone_number",
                    createdAt: "2020-03-24T01:09:25Z",
                    updatedAt: "2020-03-24T01:11:25Z",
                    assignedLocations: {
                        assignmentType: "ALL_CURRENT_AND_FUTURE_LOCATIONS",
                    },
                    wageSetting: {
                        teamMemberId: "2JCmiJol_KKFs9z2Evim",
                        jobAssignments: [
                            {
                                jobTitle: "Cashier",
                                payType: "HOURLY",
                                hourlyRate: {
                                    amount: BigInt("2400"),
                                    currency: "USD",
                                },
                                jobId: "VDNpRv8da51NU8qZFC5zDWpF",
                            },
                        ],
                        isOvertimeExempt: true,
                        version: 1,
                        createdAt: "2020-03-24T01:09:25Z",
                        updatedAt: "2020-03-24T01:09:25Z",
                    },
                },
                {
                    id: "4uXcJQSLtbk3F0UQHFNQ",
                    referenceId: "reference_id",
                    isOwner: false,
                    status: "ACTIVE",
                    givenName: "Elton",
                    familyName: "Ipsum",
                    emailAddress: "email_address",
                    phoneNumber: "phone_number",
                    createdAt: "2020-03-24T01:09:23Z",
                    updatedAt: "2020-03-24T01:15:23Z",
                    assignedLocations: {
                        assignmentType: "ALL_CURRENT_AND_FUTURE_LOCATIONS",
                    },
                },
                {
                    id: "5CoUpyrw1YwGWcRd-eDL",
                    referenceId: "reference_id",
                    isOwner: false,
                    status: "ACTIVE",
                    givenName: "Steven",
                    familyName: "Lo",
                    emailAddress: "email_address",
                    phoneNumber: "phone_number",
                    createdAt: "2020-03-24T01:09:23Z",
                    updatedAt: "2020-03-24T01:19:23Z",
                    assignedLocations: {
                        assignmentType: "ALL_CURRENT_AND_FUTURE_LOCATIONS",
                    },
                },
                {
                    id: "5MRPTTp8MMBLVSmzrGha",
                    referenceId: "reference_id",
                    isOwner: false,
                    status: "ACTIVE",
                    givenName: "Patrick",
                    familyName: "Steward",
                    emailAddress: "email_address",
                    phoneNumber: "+14155552671",
                    createdAt: "2020-03-24T18:14:03Z",
                    updatedAt: "2020-03-24T18:18:03Z",
                    assignedLocations: {
                        assignmentType: "ALL_CURRENT_AND_FUTURE_LOCATIONS",
                    },
                    wageSetting: {
                        teamMemberId: "5MRPTTp8MMBLVSmzrGha",
                        jobAssignments: [
                            {
                                jobTitle: "Cashier",
                                payType: "HOURLY",
                                hourlyRate: {
                                    amount: BigInt("2000"),
                                    currency: "USD",
                                },
                                jobId: "VDNpRv8da51NU8qZFC5zDWpF",
                            },
                        ],
                        isOvertimeExempt: true,
                        version: 1,
                        createdAt: "2020-03-24T18:14:03Z",
                        updatedAt: "2020-03-24T18:14:03Z",
                    },
                },
                {
                    id: "7F5ZxsfRnkexhu1PTbfh",
                    referenceId: "reference_id",
                    isOwner: false,
                    status: "ACTIVE",
                    givenName: "Ivy",
                    familyName: "Manny",
                    emailAddress: "email_address",
                    phoneNumber: "phone_number",
                    createdAt: "2020-03-24T01:09:25Z",
                    updatedAt: "2020-03-24T01:09:25Z",
                    assignedLocations: {
                        assignmentType: "ALL_CURRENT_AND_FUTURE_LOCATIONS",
                    },
                },
                {
                    id: "808X9HR72yKvVaigQXf4",
                    referenceId: "reference_id",
                    isOwner: false,
                    status: "ACTIVE",
                    givenName: "John",
                    familyName: "Smith",
                    emailAddress: "john_smith@example.com",
                    phoneNumber: "+14155552671",
                    createdAt: "2020-03-24T18:14:02Z",
                    updatedAt: "2020-03-24T18:14:02Z",
                    assignedLocations: {
                        assignmentType: "ALL_CURRENT_AND_FUTURE_LOCATIONS",
                    },
                },
                {
                    id: "9MVDVoY4hazkWKGo_OuZ",
                    referenceId: "reference_id",
                    isOwner: false,
                    status: "ACTIVE",
                    givenName: "Robert",
                    familyName: "Wen",
                    emailAddress: "r_wen@example.com",
                    phoneNumber: "+14155552671",
                    createdAt: "2020-03-24T18:14:00Z",
                    updatedAt: "2020-03-24T18:14:00Z",
                    assignedLocations: {
                        assignmentType: "ALL_CURRENT_AND_FUTURE_LOCATIONS",
                    },
                },
                {
                    id: "9UglUjOXQ13-hMFypCft",
                    referenceId: "reference_id",
                    isOwner: false,
                    status: "ACTIVE",
                    givenName: "Ashley",
                    familyName: "Simpson",
                    emailAddress: "asimpson@example.com",
                    phoneNumber: "+14155552671",
                    createdAt: "2020-03-24T18:14:00Z",
                    updatedAt: "2020-03-24T18:18:00Z",
                    assignedLocations: {
                        assignmentType: "ALL_CURRENT_AND_FUTURE_LOCATIONS",
                    },
                    wageSetting: {
                        teamMemberId: "9UglUjOXQ13-hMFypCft",
                        jobAssignments: [
                            {
                                jobTitle: "Cashier",
                                payType: "HOURLY",
                                hourlyRate: {
                                    amount: BigInt("2000"),
                                    currency: "USD",
                                },
                                jobId: "VDNpRv8da51NU8qZFC5zDWpF",
                            },
                        ],
                        isOvertimeExempt: true,
                        version: 1,
                        createdAt: "2020-03-24T18:14:00Z",
                        updatedAt: "2020-03-24T18:14:03Z",
                    },
                },
            ],
            cursor: "N:9UglUjOXQ13-hMFypCft",
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            team_member: {
                id: "1yJlHapkseYnNPETIU1B",
                reference_id: "reference_id_1",
                is_owner: false,
                status: "ACTIVE",
                given_name: "Joe",
                family_name: "Doe",
                email_address: "joe_doe@example.com",
                phone_number: "+14159283333",
                created_at: "2021-06-11T22:55:45Z",
                updated_at: "2021-06-15T17:38:05Z",
                assigned_locations: {
                    assignment_type: "EXPLICIT_LOCATIONS",
                    location_ids: ["GA2Y9HSJ8KRYT", "YSGH2WBKG94QZ"],
                },
                wage_setting: {
                    team_member_id: "1yJlHapkseYnNPETIU1B",
                    job_assignments: [
                        {
                            job_title: "Manager",
                            pay_type: "SALARY",
                            hourly_rate: { amount: BigInt(1443), currency: "USD" },
                            annual_rate: { amount: BigInt(3000000), currency: "USD" },
                            weekly_hours: 40,
                            job_id: "FjS8x95cqHiMenw4f1NAUH4P",
                        },
                        {
                            job_title: "Cashier",
                            pay_type: "HOURLY",
                            hourly_rate: { amount: BigInt(2000), currency: "USD" },
                            job_id: "VDNpRv8da51NU8qZFC5zDWpF",
                        },
                    ],
                    is_overtime_exempt: true,
                    version: 1,
                    created_at: "2021-06-11T22:55:45Z",
                    updated_at: "2021-06-11T22:55:45Z",
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/team-members/team_member_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.teamMembers.get({
            teamMemberId: "team_member_id",
        });
        expect(response).toEqual({
            teamMember: {
                id: "1yJlHapkseYnNPETIU1B",
                referenceId: "reference_id_1",
                isOwner: false,
                status: "ACTIVE",
                givenName: "Joe",
                familyName: "Doe",
                emailAddress: "joe_doe@example.com",
                phoneNumber: "+14159283333",
                createdAt: "2021-06-11T22:55:45Z",
                updatedAt: "2021-06-15T17:38:05Z",
                assignedLocations: {
                    assignmentType: "EXPLICIT_LOCATIONS",
                    locationIds: ["GA2Y9HSJ8KRYT", "YSGH2WBKG94QZ"],
                },
                wageSetting: {
                    teamMemberId: "1yJlHapkseYnNPETIU1B",
                    jobAssignments: [
                        {
                            jobTitle: "Manager",
                            payType: "SALARY",
                            hourlyRate: {
                                amount: BigInt("1443"),
                                currency: "USD",
                            },
                            annualRate: {
                                amount: BigInt("3000000"),
                                currency: "USD",
                            },
                            weeklyHours: 40,
                            jobId: "FjS8x95cqHiMenw4f1NAUH4P",
                        },
                        {
                            jobTitle: "Cashier",
                            payType: "HOURLY",
                            hourlyRate: {
                                amount: BigInt("2000"),
                                currency: "USD",
                            },
                            jobId: "VDNpRv8da51NU8qZFC5zDWpF",
                        },
                    ],
                    isOvertimeExempt: true,
                    version: 1,
                    createdAt: "2021-06-11T22:55:45Z",
                    updatedAt: "2021-06-11T22:55:45Z",
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            team_member: {
                reference_id: "reference_id_1",
                status: "ACTIVE",
                given_name: "Joe",
                family_name: "Doe",
                email_address: "joe_doe@gmail.com",
                phone_number: "+14159283333",
                assigned_locations: {
                    assignment_type: "EXPLICIT_LOCATIONS",
                    location_ids: ["YSGH2WBKG94QZ", "GA2Y9HSJ8KRYT"],
                },
                wage_setting: {
                    job_assignments: [
                        {
                            pay_type: "SALARY",
                            annual_rate: { amount: BigInt(3000000), currency: "USD" },
                            weekly_hours: 40,
                            job_id: "FjS8x95cqHiMenw4f1NAUH4P",
                        },
                        {
                            pay_type: "HOURLY",
                            hourly_rate: { amount: BigInt(1200), currency: "USD" },
                            job_id: "VDNpRv8da51NU8qZFC5zDWpF",
                        },
                    ],
                    is_overtime_exempt: true,
                },
            },
        };
        const rawResponseBody = {
            team_member: {
                id: "1yJlHapkseYnNPETIU1B",
                reference_id: "reference_id_1",
                is_owner: false,
                status: "ACTIVE",
                given_name: "Joe",
                family_name: "Doe",
                email_address: "joe_doe@example.com",
                phone_number: "+14159283333",
                created_at: "2021-06-11T22:55:45Z",
                updated_at: "2021-06-15T17:38:05Z",
                assigned_locations: {
                    assignment_type: "EXPLICIT_LOCATIONS",
                    location_ids: ["GA2Y9HSJ8KRYT", "YSGH2WBKG94QZ"],
                },
                wage_setting: {
                    team_member_id: "1yJlHapkseYnNPETIU1B",
                    job_assignments: [
                        {
                            job_title: "Manager",
                            pay_type: "SALARY",
                            hourly_rate: { amount: BigInt(1443), currency: "USD" },
                            annual_rate: { amount: BigInt(3000000), currency: "USD" },
                            weekly_hours: 40,
                            job_id: "FjS8x95cqHiMenw4f1NAUH4P",
                        },
                        {
                            job_title: "Cashier",
                            pay_type: "HOURLY",
                            hourly_rate: { amount: BigInt(1200), currency: "USD" },
                            job_id: "VDNpRv8da51NU8qZFC5zDWpF",
                        },
                    ],
                    is_overtime_exempt: true,
                    version: 1,
                    created_at: "2021-06-11T22:55:45Z",
                    updated_at: "2021-06-11T22:55:45Z",
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .put("/v2/team-members/team_member_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.teamMembers.update({
            teamMemberId: "team_member_id",
            body: {
                teamMember: {
                    referenceId: "reference_id_1",
                    status: "ACTIVE",
                    givenName: "Joe",
                    familyName: "Doe",
                    emailAddress: "joe_doe@gmail.com",
                    phoneNumber: "+14159283333",
                    assignedLocations: {
                        assignmentType: "EXPLICIT_LOCATIONS",
                        locationIds: ["YSGH2WBKG94QZ", "GA2Y9HSJ8KRYT"],
                    },
                    wageSetting: {
                        jobAssignments: [
                            {
                                payType: "SALARY",
                                annualRate: {
                                    amount: BigInt("3000000"),
                                    currency: "USD",
                                },
                                weeklyHours: 40,
                                jobId: "FjS8x95cqHiMenw4f1NAUH4P",
                            },
                            {
                                payType: "HOURLY",
                                hourlyRate: {
                                    amount: BigInt("1200"),
                                    currency: "USD",
                                },
                                jobId: "VDNpRv8da51NU8qZFC5zDWpF",
                            },
                        ],
                        isOvertimeExempt: true,
                    },
                },
            },
        });
        expect(response).toEqual({
            teamMember: {
                id: "1yJlHapkseYnNPETIU1B",
                referenceId: "reference_id_1",
                isOwner: false,
                status: "ACTIVE",
                givenName: "Joe",
                familyName: "Doe",
                emailAddress: "joe_doe@example.com",
                phoneNumber: "+14159283333",
                createdAt: "2021-06-11T22:55:45Z",
                updatedAt: "2021-06-15T17:38:05Z",
                assignedLocations: {
                    assignmentType: "EXPLICIT_LOCATIONS",
                    locationIds: ["GA2Y9HSJ8KRYT", "YSGH2WBKG94QZ"],
                },
                wageSetting: {
                    teamMemberId: "1yJlHapkseYnNPETIU1B",
                    jobAssignments: [
                        {
                            jobTitle: "Manager",
                            payType: "SALARY",
                            hourlyRate: {
                                amount: BigInt("1443"),
                                currency: "USD",
                            },
                            annualRate: {
                                amount: BigInt("3000000"),
                                currency: "USD",
                            },
                            weeklyHours: 40,
                            jobId: "FjS8x95cqHiMenw4f1NAUH4P",
                        },
                        {
                            jobTitle: "Cashier",
                            payType: "HOURLY",
                            hourlyRate: {
                                amount: BigInt("1200"),
                                currency: "USD",
                            },
                            jobId: "VDNpRv8da51NU8qZFC5zDWpF",
                        },
                    ],
                    isOvertimeExempt: true,
                    version: 1,
                    createdAt: "2021-06-11T22:55:45Z",
                    updatedAt: "2021-06-11T22:55:45Z",
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
