/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SquareClient } from "../../src/Client";

describe("Terminal", () => {
    test("DismissTerminalAction", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            action: {
                id: "termapia:abcdefg1234567",
                device_id: "DEVICE_ID",
                deadline_duration: "PT5M",
                status: "COMPLETED",
                cancel_reason: "BUYER_CANCELED",
                created_at: "2021-07-28T23:22:07.476Z",
                updated_at: "2021-07-28T23:22:29.511Z",
                app_id: "APP_ID",
                location_id: "location_id",
                type: "CONFIRMATION",
                qr_code_options: { title: "title", body: "body", barcode_contents: "barcode_contents" },
                save_card_options: { customer_id: "customer_id", card_id: "card_id", reference_id: "reference_id" },
                signature_options: { title: "title", body: "body", signature: [{}] },
                confirmation_options: {
                    title: "Marketing communications",
                    body: "I agree to receive promotional emails about future events and activities.",
                    agree_button_text: "Agree",
                    disagree_button_text: "Decline",
                    decision: { has_agreed: true },
                },
                receipt_options: { payment_id: "payment_id", print_only: true, is_duplicate: true },
                data_collection_options: { title: "title", body: "body", input_type: "EMAIL" },
                select_options: {
                    title: "title",
                    body: "body",
                    options: [{ reference_id: "reference_id", title: "title" }],
                    selected_option: { reference_id: "reference_id", title: "title" },
                },
                device_metadata: {
                    battery_percentage: "battery_percentage",
                    charging_state: "charging_state",
                    location_id: "location_id",
                    merchant_id: "merchant_id",
                    network_connection_type: "network_connection_type",
                    payment_region: "payment_region",
                    serial_number: "serial_number",
                    os_version: "os_version",
                    app_version: "app_version",
                    wifi_network_name: "wifi_network_name",
                    wifi_network_strength: "wifi_network_strength",
                    ip_address: "ip_address",
                },
                await_next_action: true,
                await_next_action_duration: "PT5M",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/terminals/actions/action_id/dismiss")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.terminal.dismissTerminalAction({
            actionId: "action_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            action: {
                id: "termapia:abcdefg1234567",
                deviceId: "DEVICE_ID",
                deadlineDuration: "PT5M",
                status: "COMPLETED",
                cancelReason: "BUYER_CANCELED",
                createdAt: "2021-07-28T23:22:07.476Z",
                updatedAt: "2021-07-28T23:22:29.511Z",
                appId: "APP_ID",
                locationId: "location_id",
                type: "CONFIRMATION",
                qrCodeOptions: {
                    title: "title",
                    body: "body",
                    barcodeContents: "barcode_contents",
                },
                saveCardOptions: {
                    customerId: "customer_id",
                    cardId: "card_id",
                    referenceId: "reference_id",
                },
                signatureOptions: {
                    title: "title",
                    body: "body",
                    signature: [{}],
                },
                confirmationOptions: {
                    title: "Marketing communications",
                    body: "I agree to receive promotional emails about future events and activities.",
                    agreeButtonText: "Agree",
                    disagreeButtonText: "Decline",
                    decision: {
                        hasAgreed: true,
                    },
                },
                receiptOptions: {
                    paymentId: "payment_id",
                    printOnly: true,
                    isDuplicate: true,
                },
                dataCollectionOptions: {
                    title: "title",
                    body: "body",
                    inputType: "EMAIL",
                },
                selectOptions: {
                    title: "title",
                    body: "body",
                    options: [
                        {
                            referenceId: "reference_id",
                            title: "title",
                        },
                    ],
                    selectedOption: {
                        referenceId: "reference_id",
                        title: "title",
                    },
                },
                deviceMetadata: {
                    batteryPercentage: "battery_percentage",
                    chargingState: "charging_state",
                    locationId: "location_id",
                    merchantId: "merchant_id",
                    networkConnectionType: "network_connection_type",
                    paymentRegion: "payment_region",
                    serialNumber: "serial_number",
                    osVersion: "os_version",
                    appVersion: "app_version",
                    wifiNetworkName: "wifi_network_name",
                    wifiNetworkStrength: "wifi_network_strength",
                    ipAddress: "ip_address",
                },
                awaitNextAction: true,
                awaitNextActionDuration: "PT5M",
            },
        });
    });

    test("DismissTerminalCheckout", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            checkout: {
                id: "LmZEKbo3SBfqO",
                amount_money: { amount: BigInt(2610), currency: "USD" },
                reference_id: "reference_id",
                note: "note",
                order_id: "order_id",
                payment_options: {
                    autocomplete: true,
                    delay_duration: "delay_duration",
                    accept_partial_authorization: true,
                    delay_action: "CANCEL",
                },
                device_options: {
                    device_id: "dbb5d83a-7838-11ea-bc55-0242ac130003",
                    skip_receipt_screen: false,
                    collect_signature: true,
                    tip_settings: { allow_tipping: true, separate_tip_screen: true, custom_tip_field: false },
                    show_itemized_cart: true,
                },
                deadline_duration: "PT5M",
                status: "COMPLETED",
                cancel_reason: "BUYER_CANCELED",
                payment_ids: ["D7vLJqMkvSoAlX4yyFzUitOy4EPZY"],
                created_at: "2023-11-29T14:59:50.682Z",
                updated_at: "2023-11-29T15:00:18.936Z",
                app_id: "APP_ID",
                location_id: "LOCATION_ID",
                payment_type: "CARD_PRESENT",
                team_member_id: "team_member_id",
                customer_id: "customer_id",
                app_fee_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                statement_description_identifier: "statement_description_identifier",
                tip_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
            },
        };
        server
            .mockEndpoint()
            .post("/v2/terminals/checkouts/checkout_id/dismiss")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.terminal.dismissTerminalCheckout({
            checkoutId: "checkout_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            checkout: {
                id: "LmZEKbo3SBfqO",
                amountMoney: {
                    amount: BigInt("2610"),
                    currency: "USD",
                },
                referenceId: "reference_id",
                note: "note",
                orderId: "order_id",
                paymentOptions: {
                    autocomplete: true,
                    delayDuration: "delay_duration",
                    acceptPartialAuthorization: true,
                    delayAction: "CANCEL",
                },
                deviceOptions: {
                    deviceId: "dbb5d83a-7838-11ea-bc55-0242ac130003",
                    skipReceiptScreen: false,
                    collectSignature: true,
                    tipSettings: {
                        allowTipping: true,
                        separateTipScreen: true,
                        customTipField: false,
                    },
                    showItemizedCart: true,
                },
                deadlineDuration: "PT5M",
                status: "COMPLETED",
                cancelReason: "BUYER_CANCELED",
                paymentIds: ["D7vLJqMkvSoAlX4yyFzUitOy4EPZY"],
                createdAt: "2023-11-29T14:59:50.682Z",
                updatedAt: "2023-11-29T15:00:18.936Z",
                appId: "APP_ID",
                locationId: "LOCATION_ID",
                paymentType: "CARD_PRESENT",
                teamMemberId: "team_member_id",
                customerId: "customer_id",
                appFeeMoney: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                statementDescriptionIdentifier: "statement_description_identifier",
                tipMoney: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
            },
        });
    });

    test("DismissTerminalRefund", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            refund: {
                id: "vjkNb2HD-xq5kiWWiJ7RhwrQnkxIn2N0l1nPZY",
                refund_id: "refund_id",
                payment_id: "xq5kiWWiJ7RhwrQnkxIn2N0l1nPZY",
                order_id: "s8OMhQcpEp1b61YywlccSHWqUaQZY",
                amount_money: { amount: BigInt(111), currency: "CAD" },
                reason: "Returning item",
                device_id: "47776348fd8b32b9",
                deadline_duration: "PT5M",
                status: "IN_PROGRESS",
                cancel_reason: "BUYER_CANCELED",
                created_at: "2023-11-30T16:16:39.299Z",
                updated_at: "2023-11-30T16:16:57.863Z",
                app_id: "APP_ID",
                location_id: "location_id",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/terminals/refunds/terminal_refund_id/dismiss")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.terminal.dismissTerminalRefund({
            terminalRefundId: "terminal_refund_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            refund: {
                id: "vjkNb2HD-xq5kiWWiJ7RhwrQnkxIn2N0l1nPZY",
                refundId: "refund_id",
                paymentId: "xq5kiWWiJ7RhwrQnkxIn2N0l1nPZY",
                orderId: "s8OMhQcpEp1b61YywlccSHWqUaQZY",
                amountMoney: {
                    amount: BigInt("111"),
                    currency: "CAD",
                },
                reason: "Returning item",
                deviceId: "47776348fd8b32b9",
                deadlineDuration: "PT5M",
                status: "IN_PROGRESS",
                cancelReason: "BUYER_CANCELED",
                createdAt: "2023-11-30T16:16:39.299Z",
                updatedAt: "2023-11-30T16:16:57.863Z",
                appId: "APP_ID",
                locationId: "location_id",
            },
        });
    });
});
