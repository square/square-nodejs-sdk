/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SquareClient } from "../../src/Client";

describe("Catalog", () => {
    test("batchDelete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { object_ids: ["W62UWFY35CWMYGVWK6TWJDNI", "AA27W3M2GGTF3H6AVPNB77CK"] };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            deleted_object_ids: ["W62UWFY35CWMYGVWK6TWJDNI", "AA27W3M2GGTF3H6AVPNB77CK"],
            deleted_at: "2016-11-16T22:25:24.878Z",
        };
        server
            .mockEndpoint()
            .post("/v2/catalog/batch-delete")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.catalog.batchDelete({
            objectIds: ["W62UWFY35CWMYGVWK6TWJDNI", "AA27W3M2GGTF3H6AVPNB77CK"],
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            deletedObjectIds: ["W62UWFY35CWMYGVWK6TWJDNI", "AA27W3M2GGTF3H6AVPNB77CK"],
            deletedAt: "2016-11-16T22:25:24.878Z",
        });
    });

    test("batchGet", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            object_ids: ["W62UWFY35CWMYGVWK6TWJDNI", "AA27W3M2GGTF3H6AVPNB77CK"],
            include_related_objects: true,
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            objects: [
                {
                    id: "id",
                    updated_at: "updated_at",
                    version: 1000000,
                    is_deleted: true,
                    custom_attribute_values: { key: {} },
                    catalog_v1_ids: [{}],
                    present_at_all_locations: true,
                    present_at_location_ids: ["present_at_location_ids"],
                    absent_at_location_ids: ["absent_at_location_ids"],
                    image_id: "image_id",
                    type: "ITEM",
                },
                {
                    id: "id",
                    updated_at: "updated_at",
                    version: 1000000,
                    is_deleted: true,
                    custom_attribute_values: { key: {} },
                    catalog_v1_ids: [{}],
                    present_at_all_locations: true,
                    present_at_location_ids: ["present_at_location_ids"],
                    absent_at_location_ids: ["absent_at_location_ids"],
                    image_id: "image_id",
                    type: "ITEM",
                },
            ],
            related_objects: [
                {
                    id: "id",
                    updated_at: "updated_at",
                    version: 1000000,
                    is_deleted: true,
                    custom_attribute_values: { key: {} },
                    catalog_v1_ids: [{}],
                    present_at_all_locations: true,
                    present_at_location_ids: ["present_at_location_ids"],
                    absent_at_location_ids: ["absent_at_location_ids"],
                    image_id: "image_id",
                    ordinal: 1000000,
                    type: "CATEGORY",
                },
                {
                    id: "id",
                    updated_at: "updated_at",
                    version: 1000000,
                    is_deleted: true,
                    custom_attribute_values: { key: {} },
                    catalog_v1_ids: [{}],
                    present_at_all_locations: true,
                    present_at_location_ids: ["present_at_location_ids"],
                    absent_at_location_ids: ["absent_at_location_ids"],
                    image_id: "image_id",
                    type: "TAX",
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/v2/catalog/batch-retrieve")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.catalog.batchGet({
            objectIds: ["W62UWFY35CWMYGVWK6TWJDNI", "AA27W3M2GGTF3H6AVPNB77CK"],
            includeRelatedObjects: true,
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            objects: [
                {
                    type: "ITEM",
                    id: "id",
                    updatedAt: "updated_at",
                    version: BigInt("1000000"),
                    isDeleted: true,
                    customAttributeValues: {
                        key: {},
                    },
                    catalogV1Ids: [{}],
                    presentAtAllLocations: true,
                    presentAtLocationIds: ["present_at_location_ids"],
                    absentAtLocationIds: ["absent_at_location_ids"],
                    imageId: "image_id",
                },
                {
                    type: "ITEM",
                    id: "id",
                    updatedAt: "updated_at",
                    version: BigInt("1000000"),
                    isDeleted: true,
                    customAttributeValues: {
                        key: {},
                    },
                    catalogV1Ids: [{}],
                    presentAtAllLocations: true,
                    presentAtLocationIds: ["present_at_location_ids"],
                    absentAtLocationIds: ["absent_at_location_ids"],
                    imageId: "image_id",
                },
            ],
            relatedObjects: [
                {
                    type: "CATEGORY",
                    id: "id",
                    updatedAt: "updated_at",
                    version: BigInt("1000000"),
                    isDeleted: true,
                    customAttributeValues: {
                        key: {},
                    },
                    catalogV1Ids: [{}],
                    presentAtAllLocations: true,
                    presentAtLocationIds: ["present_at_location_ids"],
                    absentAtLocationIds: ["absent_at_location_ids"],
                    imageId: "image_id",
                    ordinal: BigInt("1000000"),
                },
                {
                    type: "TAX",
                    id: "id",
                    updatedAt: "updated_at",
                    version: BigInt("1000000"),
                    isDeleted: true,
                    customAttributeValues: {
                        key: {},
                    },
                    catalogV1Ids: [{}],
                    presentAtAllLocations: true,
                    presentAtLocationIds: ["present_at_location_ids"],
                    absentAtLocationIds: ["absent_at_location_ids"],
                    imageId: "image_id",
                },
            ],
        });
    });

    test("batchUpsert", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "789ff020-f723-43a9-b4b5-43b5dc1fa3dc",
            batches: [
                {
                    objects: [
                        { id: "id", type: "ITEM" },
                        { id: "id", type: "ITEM" },
                        { id: "id", type: "ITEM" },
                        { id: "id", type: "TAX" },
                    ],
                },
            ],
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            objects: [
                {
                    id: "id",
                    updated_at: "updated_at",
                    version: 1000000,
                    is_deleted: true,
                    custom_attribute_values: { key: {} },
                    catalog_v1_ids: [{}],
                    present_at_all_locations: true,
                    present_at_location_ids: ["present_at_location_ids"],
                    absent_at_location_ids: ["absent_at_location_ids"],
                    image_id: "image_id",
                    type: "ITEM",
                },
                {
                    id: "id",
                    updated_at: "updated_at",
                    version: 1000000,
                    is_deleted: true,
                    custom_attribute_values: { key: {} },
                    catalog_v1_ids: [{}],
                    present_at_all_locations: true,
                    present_at_location_ids: ["present_at_location_ids"],
                    absent_at_location_ids: ["absent_at_location_ids"],
                    image_id: "image_id",
                    type: "ITEM",
                },
                {
                    id: "id",
                    updated_at: "updated_at",
                    version: 1000000,
                    is_deleted: true,
                    custom_attribute_values: { key: {} },
                    catalog_v1_ids: [{}],
                    present_at_all_locations: true,
                    present_at_location_ids: ["present_at_location_ids"],
                    absent_at_location_ids: ["absent_at_location_ids"],
                    image_id: "image_id",
                    ordinal: 1000000,
                    type: "CATEGORY",
                },
                {
                    id: "id",
                    updated_at: "updated_at",
                    version: 1000000,
                    is_deleted: true,
                    custom_attribute_values: { key: {} },
                    catalog_v1_ids: [{}],
                    present_at_all_locations: true,
                    present_at_location_ids: ["present_at_location_ids"],
                    absent_at_location_ids: ["absent_at_location_ids"],
                    image_id: "image_id",
                    type: "TAX",
                },
            ],
            updated_at: "updated_at",
            id_mappings: [
                { client_object_id: "#Tea", object_id: "67GA7XA2FWMRYY2VCONTYZJR" },
                { client_object_id: "#Coffee", object_id: "MQ4TZKOG3SR2EQI3TWEK4AH7" },
                { client_object_id: "#Beverages", object_id: "XCS4SCGN4WQYE2VU4U3TKXEH" },
                { client_object_id: "#SalesTax", object_id: "HP5VNYPKZKTNCKZ2Z5NPUH6A" },
                { client_object_id: "#Tea_Mug", object_id: "CAJBHUIQH7ONTSZI2KTVOUP6" },
                { client_object_id: "#Coffee_Regular", object_id: "GY2GXJTVVPQAPW43GFRR3NG6" },
                { client_object_id: "#Coffee_Large", object_id: "JE6VHPSRQL6IWSN26C36CJ7W" },
            ],
        };
        server
            .mockEndpoint()
            .post("/v2/catalog/batch-upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.catalog.batchUpsert({
            idempotencyKey: "789ff020-f723-43a9-b4b5-43b5dc1fa3dc",
            batches: [
                {
                    objects: [
                        {
                            type: "ITEM",
                            id: "id",
                        },
                        {
                            type: "ITEM",
                            id: "id",
                        },
                        {
                            type: "ITEM",
                            id: "id",
                        },
                        {
                            type: "TAX",
                            id: "id",
                        },
                    ],
                },
            ],
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            objects: [
                {
                    type: "ITEM",
                    id: "id",
                    updatedAt: "updated_at",
                    version: BigInt("1000000"),
                    isDeleted: true,
                    customAttributeValues: {
                        key: {},
                    },
                    catalogV1Ids: [{}],
                    presentAtAllLocations: true,
                    presentAtLocationIds: ["present_at_location_ids"],
                    absentAtLocationIds: ["absent_at_location_ids"],
                    imageId: "image_id",
                },
                {
                    type: "ITEM",
                    id: "id",
                    updatedAt: "updated_at",
                    version: BigInt("1000000"),
                    isDeleted: true,
                    customAttributeValues: {
                        key: {},
                    },
                    catalogV1Ids: [{}],
                    presentAtAllLocations: true,
                    presentAtLocationIds: ["present_at_location_ids"],
                    absentAtLocationIds: ["absent_at_location_ids"],
                    imageId: "image_id",
                },
                {
                    type: "CATEGORY",
                    id: "id",
                    updatedAt: "updated_at",
                    version: BigInt("1000000"),
                    isDeleted: true,
                    customAttributeValues: {
                        key: {},
                    },
                    catalogV1Ids: [{}],
                    presentAtAllLocations: true,
                    presentAtLocationIds: ["present_at_location_ids"],
                    absentAtLocationIds: ["absent_at_location_ids"],
                    imageId: "image_id",
                    ordinal: BigInt("1000000"),
                },
                {
                    type: "TAX",
                    id: "id",
                    updatedAt: "updated_at",
                    version: BigInt("1000000"),
                    isDeleted: true,
                    customAttributeValues: {
                        key: {},
                    },
                    catalogV1Ids: [{}],
                    presentAtAllLocations: true,
                    presentAtLocationIds: ["present_at_location_ids"],
                    absentAtLocationIds: ["absent_at_location_ids"],
                    imageId: "image_id",
                },
            ],
            updatedAt: "updated_at",
            idMappings: [
                {
                    clientObjectId: "#Tea",
                    objectId: "67GA7XA2FWMRYY2VCONTYZJR",
                },
                {
                    clientObjectId: "#Coffee",
                    objectId: "MQ4TZKOG3SR2EQI3TWEK4AH7",
                },
                {
                    clientObjectId: "#Beverages",
                    objectId: "XCS4SCGN4WQYE2VU4U3TKXEH",
                },
                {
                    clientObjectId: "#SalesTax",
                    objectId: "HP5VNYPKZKTNCKZ2Z5NPUH6A",
                },
                {
                    clientObjectId: "#Tea_Mug",
                    objectId: "CAJBHUIQH7ONTSZI2KTVOUP6",
                },
                {
                    clientObjectId: "#Coffee_Regular",
                    objectId: "GY2GXJTVVPQAPW43GFRR3NG6",
                },
                {
                    clientObjectId: "#Coffee_Large",
                    objectId: "JE6VHPSRQL6IWSN26C36CJ7W",
                },
            ],
        });
    });

    test("info", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            limits: {
                batch_upsert_max_objects_per_batch: 1000,
                batch_upsert_max_total_objects: 10000,
                batch_retrieve_max_object_ids: 1000,
                search_max_page_limit: 1000,
                batch_delete_max_object_ids: 200,
                update_item_taxes_max_item_ids: 1000,
                update_item_taxes_max_taxes_to_enable: 1000,
                update_item_taxes_max_taxes_to_disable: 1000,
                update_item_modifier_lists_max_item_ids: 1000,
                update_item_modifier_lists_max_modifier_lists_to_enable: 1000,
                update_item_modifier_lists_max_modifier_lists_to_disable: 1000,
            },
            standard_unit_description_group: { standard_unit_descriptions: [{}], language_code: "language_code" },
        };
        server.mockEndpoint().get("/v2/catalog/info").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.catalog.info();
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            limits: {
                batchUpsertMaxObjectsPerBatch: 1000,
                batchUpsertMaxTotalObjects: 10000,
                batchRetrieveMaxObjectIds: 1000,
                searchMaxPageLimit: 1000,
                batchDeleteMaxObjectIds: 200,
                updateItemTaxesMaxItemIds: 1000,
                updateItemTaxesMaxTaxesToEnable: 1000,
                updateItemTaxesMaxTaxesToDisable: 1000,
                updateItemModifierListsMaxItemIds: 1000,
                updateItemModifierListsMaxModifierListsToEnable: 1000,
                updateItemModifierListsMaxModifierListsToDisable: 1000,
            },
            standardUnitDescriptionGroup: {
                standardUnitDescriptions: [{}],
                languageCode: "language_code",
            },
        });
    });

    test("UpdateItemModifierLists", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            item_ids: ["H42BRLUJ5KTZTTMPVSLFAACQ", "2JXOBJIHCWBQ4NZ3RIXQGJA6"],
            modifier_lists_to_enable: ["H42BRLUJ5KTZTTMPVSLFAACQ", "2JXOBJIHCWBQ4NZ3RIXQGJA6"],
            modifier_lists_to_disable: ["7WRC16CJZDVLSNDQ35PP6YAD"],
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            updated_at: "2016-11-16T22:25:24.878Z",
        };
        server
            .mockEndpoint()
            .post("/v2/catalog/update-item-modifier-lists")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.catalog.updateItemModifierLists({
            itemIds: ["H42BRLUJ5KTZTTMPVSLFAACQ", "2JXOBJIHCWBQ4NZ3RIXQGJA6"],
            modifierListsToEnable: ["H42BRLUJ5KTZTTMPVSLFAACQ", "2JXOBJIHCWBQ4NZ3RIXQGJA6"],
            modifierListsToDisable: ["7WRC16CJZDVLSNDQ35PP6YAD"],
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            updatedAt: "2016-11-16T22:25:24.878Z",
        });
    });

    test("UpdateItemTaxes", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            item_ids: ["H42BRLUJ5KTZTTMPVSLFAACQ", "2JXOBJIHCWBQ4NZ3RIXQGJA6"],
            taxes_to_enable: ["4WRCNHCJZDVLSNDQ35PP6YAD"],
            taxes_to_disable: ["AQCEGCEBBQONINDOHRGZISEX"],
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            updated_at: "2016-11-16T22:25:24.878Z",
        };
        server
            .mockEndpoint()
            .post("/v2/catalog/update-item-taxes")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.catalog.updateItemTaxes({
            itemIds: ["H42BRLUJ5KTZTTMPVSLFAACQ", "2JXOBJIHCWBQ4NZ3RIXQGJA6"],
            taxesToEnable: ["4WRCNHCJZDVLSNDQ35PP6YAD"],
            taxesToDisable: ["AQCEGCEBBQONINDOHRGZISEX"],
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            updatedAt: "2016-11-16T22:25:24.878Z",
        });
    });
});
