// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Transactions", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            transactions: [
                {
                    id: "KnL67ZIwXCPtzOrqj0HrkxMF",
                    location_id: "18YC4JDH91E1H",
                    created_at: "2016-01-20T22:57:56Z",
                    tenders: [
                        {
                            id: "MtZRYYdDrYNQbOvV7nbuBvMF",
                            location_id: "18YC4JDH91E1H",
                            transaction_id: "KnL67ZIwXCPtzOrqj0HrkxMF",
                            created_at: "2016-01-20T22:57:56Z",
                            note: "some optional note",
                            amount_money: { amount: BigInt(5000), currency: "USD" },
                            processing_fee_money: { amount: BigInt(138), currency: "USD" },
                            type: "CARD",
                            card_details: {
                                status: "CAPTURED",
                                card: { card_brand: "VISA", last_4: "1111" },
                                entry_method: "KEYED",
                            },
                            additional_recipients: [
                                {
                                    location_id: "057P5VYJ4A5X1",
                                    description: "Application fees",
                                    amount_money: { amount: BigInt(20), currency: "USD" },
                                },
                            ],
                        },
                    ],
                    refunds: [
                        {
                            id: "7a5RcVI0CxbOcJ2wMOkE",
                            location_id: "18YC4JDH91E1H",
                            transaction_id: "KnL67ZIwXCPtzOrqj0HrkxMF",
                            tender_id: "MtZRYYdDrYNQbOvV7nbuBvMF",
                            created_at: "2016-01-20T22:59:20Z",
                            reason: "some reason why",
                            amount_money: { amount: BigInt(5000), currency: "USD" },
                            status: "APPROVED",
                            processing_fee_money: { amount: BigInt(138), currency: "USD" },
                            additional_recipients: [
                                {
                                    location_id: "057P5VYJ4A5X1",
                                    description: "Application fees",
                                    amount_money: { amount: BigInt(100), currency: "USD" },
                                },
                            ],
                        },
                    ],
                    reference_id: "some optional reference id",
                    product: "EXTERNAL_API",
                    client_id: "client_id",
                    order_id: "order_id",
                },
            ],
            cursor: "cursor",
        };
        server
            .mockEndpoint()
            .get("/v2/locations/location_id/transactions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.locations.transactions.list({
            locationId: "location_id",
            beginTime: "begin_time",
            endTime: "end_time",
            sortOrder: "DESC",
            cursor: "cursor",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            transactions: [
                {
                    id: "KnL67ZIwXCPtzOrqj0HrkxMF",
                    locationId: "18YC4JDH91E1H",
                    createdAt: "2016-01-20T22:57:56Z",
                    tenders: [
                        {
                            id: "MtZRYYdDrYNQbOvV7nbuBvMF",
                            locationId: "18YC4JDH91E1H",
                            transactionId: "KnL67ZIwXCPtzOrqj0HrkxMF",
                            createdAt: "2016-01-20T22:57:56Z",
                            note: "some optional note",
                            amountMoney: {
                                amount: BigInt("5000"),
                                currency: "USD",
                            },
                            processingFeeMoney: {
                                amount: BigInt("138"),
                                currency: "USD",
                            },
                            type: "CARD",
                            cardDetails: {
                                status: "CAPTURED",
                                card: {
                                    cardBrand: "VISA",
                                    last4: "1111",
                                },
                                entryMethod: "KEYED",
                            },
                            additionalRecipients: [
                                {
                                    locationId: "057P5VYJ4A5X1",
                                    description: "Application fees",
                                    amountMoney: {
                                        amount: BigInt("20"),
                                        currency: "USD",
                                    },
                                },
                            ],
                        },
                    ],
                    refunds: [
                        {
                            id: "7a5RcVI0CxbOcJ2wMOkE",
                            locationId: "18YC4JDH91E1H",
                            transactionId: "KnL67ZIwXCPtzOrqj0HrkxMF",
                            tenderId: "MtZRYYdDrYNQbOvV7nbuBvMF",
                            createdAt: "2016-01-20T22:59:20Z",
                            reason: "some reason why",
                            amountMoney: {
                                amount: BigInt("5000"),
                                currency: "USD",
                            },
                            status: "APPROVED",
                            processingFeeMoney: {
                                amount: BigInt("138"),
                                currency: "USD",
                            },
                            additionalRecipients: [
                                {
                                    locationId: "057P5VYJ4A5X1",
                                    description: "Application fees",
                                    amountMoney: {
                                        amount: BigInt("100"),
                                        currency: "USD",
                                    },
                                },
                            ],
                        },
                    ],
                    referenceId: "some optional reference id",
                    product: "EXTERNAL_API",
                    clientId: "client_id",
                    orderId: "order_id",
                },
            ],
            cursor: "cursor",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            transaction: {
                id: "KnL67ZIwXCPtzOrqj0HrkxMF",
                location_id: "18YC4JDH91E1H",
                created_at: "2016-03-10T22:57:56Z",
                tenders: [
                    {
                        id: "MtZRYYdDrYNQbOvV7nbuBvMF",
                        location_id: "18YC4JDH91E1H",
                        transaction_id: "KnL67ZIwXCPtzOrqj0HrkxMF",
                        created_at: "2016-03-10T22:57:56Z",
                        note: "some optional note",
                        amount_money: { amount: BigInt(5000), currency: "USD" },
                        processing_fee_money: { amount: BigInt(138), currency: "USD" },
                        type: "CARD",
                        card_details: {
                            status: "CAPTURED",
                            card: { card_brand: "VISA", last_4: "1111" },
                            entry_method: "KEYED",
                        },
                        additional_recipients: [
                            {
                                location_id: "057P5VYJ4A5X1",
                                description: "Application fees",
                                amount_money: { amount: BigInt(20), currency: "USD" },
                            },
                        ],
                    },
                ],
                refunds: [
                    { id: "id", location_id: "location_id", reason: "reason", amount_money: {}, status: "PENDING" },
                ],
                reference_id: "some optional reference id",
                product: "EXTERNAL_API",
                client_id: "client_id",
                shipping_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                order_id: "order_id",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/locations/location_id/transactions/transaction_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.locations.transactions.get({
            locationId: "location_id",
            transactionId: "transaction_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            transaction: {
                id: "KnL67ZIwXCPtzOrqj0HrkxMF",
                locationId: "18YC4JDH91E1H",
                createdAt: "2016-03-10T22:57:56Z",
                tenders: [
                    {
                        id: "MtZRYYdDrYNQbOvV7nbuBvMF",
                        locationId: "18YC4JDH91E1H",
                        transactionId: "KnL67ZIwXCPtzOrqj0HrkxMF",
                        createdAt: "2016-03-10T22:57:56Z",
                        note: "some optional note",
                        amountMoney: {
                            amount: BigInt("5000"),
                            currency: "USD",
                        },
                        processingFeeMoney: {
                            amount: BigInt("138"),
                            currency: "USD",
                        },
                        type: "CARD",
                        cardDetails: {
                            status: "CAPTURED",
                            card: {
                                cardBrand: "VISA",
                                last4: "1111",
                            },
                            entryMethod: "KEYED",
                        },
                        additionalRecipients: [
                            {
                                locationId: "057P5VYJ4A5X1",
                                description: "Application fees",
                                amountMoney: {
                                    amount: BigInt("20"),
                                    currency: "USD",
                                },
                            },
                        ],
                    },
                ],
                refunds: [
                    {
                        id: "id",
                        locationId: "location_id",
                        reason: "reason",
                        amountMoney: {},
                        status: "PENDING",
                    },
                ],
                referenceId: "some optional reference id",
                product: "EXTERNAL_API",
                clientId: "client_id",
                shippingAddress: {
                    addressLine1: "address_line_1",
                    addressLine2: "address_line_2",
                    addressLine3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality2: "sublocality_2",
                    sublocality3: "sublocality_3",
                    administrativeDistrictLevel1: "administrative_district_level_1",
                    administrativeDistrictLevel2: "administrative_district_level_2",
                    administrativeDistrictLevel3: "administrative_district_level_3",
                    postalCode: "postal_code",
                    country: "ZZ",
                    firstName: "first_name",
                    lastName: "last_name",
                },
                orderId: "order_id",
            },
        });
    });

    test("capture", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/locations/location_id/transactions/transaction_id/capture")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.locations.transactions.capture({
            locationId: "location_id",
            transactionId: "transaction_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("void", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/locations/location_id/transactions/transaction_id/void")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.locations.transactions.void({
            locationId: "location_id",
            transactionId: "transaction_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
