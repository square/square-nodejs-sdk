// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("CustomAttributes", () => {
    test("batchDelete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            values: { id1: { key: "bestseller" }, id2: { key: "bestseller" }, id3: { key: "phone-number" } },
        };
        const rawResponseBody = {
            values: {
                id1: {
                    location_id: "L0TBCBTB7P8RQ",
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                id2: {
                    location_id: "L9XMD04V3STJX",
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                id3: {
                    location_id: "L0TBCBTB7P8RQ",
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/locations/custom-attributes/bulk-delete")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.locations.customAttributes.batchDelete({
            values: {
                id1: {
                    key: "bestseller",
                },
                id2: {
                    key: "bestseller",
                },
                id3: {
                    key: "phone-number",
                },
            },
        });
        expect(response).toEqual({
            values: {
                id1: {
                    locationId: "L0TBCBTB7P8RQ",
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                id2: {
                    locationId: "L9XMD04V3STJX",
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                id3: {
                    locationId: "L0TBCBTB7P8RQ",
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("batchUpsert", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            values: {
                id1: { location_id: "L0TBCBTB7P8RQ", custom_attribute: { key: "bestseller", value: "hot cocoa" } },
                id2: { location_id: "L9XMD04V3STJX", custom_attribute: { key: "bestseller", value: "berry smoothie" } },
                id3: { location_id: "L0TBCBTB7P8RQ", custom_attribute: { key: "phone-number", value: "+12223334444" } },
            },
        };
        const rawResponseBody = {
            values: {
                id1: {
                    location_id: "L0TBCBTB7P8RQ",
                    custom_attribute: {
                        key: "bestseller",
                        value: "hot cocoa",
                        version: 2,
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updated_at: "2023-01-09T19:21:04.551Z",
                        created_at: "2023-01-09T19:02:58.647Z",
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                id2: {
                    location_id: "L9XMD04V3STJX",
                    custom_attribute: {
                        key: "bestseller",
                        value: "berry smoothie",
                        version: 1,
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updated_at: "2023-01-09T19:21:04.551Z",
                        created_at: "2023-01-09T19:02:58.647Z",
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                id3: {
                    location_id: "L0TBCBTB7P8RQ",
                    custom_attribute: {
                        key: "phone-number",
                        value: "+12239903892",
                        version: 2,
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updated_at: "2023-01-09T19:21:04.563Z",
                        created_at: "2023-01-09T19:04:57.985Z",
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/locations/custom-attributes/bulk-upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.locations.customAttributes.batchUpsert({
            values: {
                id1: {
                    locationId: "L0TBCBTB7P8RQ",
                    customAttribute: {
                        key: "bestseller",
                        value: "hot cocoa",
                    },
                },
                id2: {
                    locationId: "L9XMD04V3STJX",
                    customAttribute: {
                        key: "bestseller",
                        value: "berry smoothie",
                    },
                },
                id3: {
                    locationId: "L0TBCBTB7P8RQ",
                    customAttribute: {
                        key: "phone-number",
                        value: "+12223334444",
                    },
                },
            },
        });
        expect(response).toEqual({
            values: {
                id1: {
                    locationId: "L0TBCBTB7P8RQ",
                    customAttribute: {
                        key: "bestseller",
                        value: "hot cocoa",
                        version: 2,
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updatedAt: "2023-01-09T19:21:04.551Z",
                        createdAt: "2023-01-09T19:02:58.647Z",
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                id2: {
                    locationId: "L9XMD04V3STJX",
                    customAttribute: {
                        key: "bestseller",
                        value: "berry smoothie",
                        version: 1,
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updatedAt: "2023-01-09T19:21:04.551Z",
                        createdAt: "2023-01-09T19:02:58.647Z",
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                id3: {
                    locationId: "L0TBCBTB7P8RQ",
                    customAttribute: {
                        key: "phone-number",
                        value: "+12239903892",
                        version: 2,
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updatedAt: "2023-01-09T19:21:04.563Z",
                        createdAt: "2023-01-09T19:04:57.985Z",
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            custom_attributes: [
                {
                    key: "phone-number",
                    value: "+12223334444",
                    version: 1,
                    visibility: "VISIBILITY_READ_WRITE_VALUES",
                    updated_at: "2022-12-12T18:13:03.745Z",
                    created_at: "2022-12-12T18:13:03.745Z",
                },
                {
                    key: "bestseller",
                    value: "hot cocoa",
                    version: 1,
                    visibility: "VISIBILITY_READ_WRITE_VALUES",
                    updated_at: "2022-12-12T19:27:57.975Z",
                    created_at: "2022-12-12T19:27:57.975Z",
                },
            ],
            cursor: "cursor",
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/locations/location_id/custom-attributes")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            customAttributes: [
                {
                    key: "phone-number",
                    value: "+12223334444",
                    version: 1,
                    visibility: "VISIBILITY_READ_WRITE_VALUES",
                    updatedAt: "2022-12-12T18:13:03.745Z",
                    createdAt: "2022-12-12T18:13:03.745Z",
                },
                {
                    key: "bestseller",
                    value: "hot cocoa",
                    version: 1,
                    visibility: "VISIBILITY_READ_WRITE_VALUES",
                    updatedAt: "2022-12-12T19:27:57.975Z",
                    createdAt: "2022-12-12T19:27:57.975Z",
                },
            ],
            cursor: "cursor",
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        };
        const page = await client.locations.customAttributes.list({
            locationId: "location_id",
            visibilityFilter: "ALL",
            limit: 1,
            cursor: "cursor",
            withDefinitions: true,
        });

        expect(expected.customAttributes).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.customAttributes).toEqual(nextPage.data);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            custom_attribute: {
                key: "bestseller",
                value: "hot cocoa",
                version: 2,
                visibility: "VISIBILITY_READ_WRITE_VALUES",
                definition: {
                    key: "key",
                    schema: { key: "value" },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updated_at: "updated_at",
                    created_at: "created_at",
                },
                updated_at: "2023-01-09T19:21:04.551Z",
                created_at: "2023-01-09T19:02:58.647Z",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/locations/location_id/custom-attributes/key")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.locations.customAttributes.get({
            locationId: "location_id",
            key: "key",
            withDefinition: true,
            version: 1,
        });
        expect(response).toEqual({
            customAttribute: {
                key: "bestseller",
                value: "hot cocoa",
                version: 2,
                visibility: "VISIBILITY_READ_WRITE_VALUES",
                definition: {
                    key: "key",
                    schema: {
                        key: "value",
                    },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updatedAt: "updated_at",
                    createdAt: "created_at",
                },
                updatedAt: "2023-01-09T19:21:04.551Z",
                createdAt: "2023-01-09T19:02:58.647Z",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("upsert", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { custom_attribute: { value: "hot cocoa" } };
        const rawResponseBody = {
            custom_attribute: {
                key: "bestseller",
                value: "hot cocoa",
                version: 2,
                visibility: "VISIBILITY_READ_WRITE_VALUES",
                definition: {
                    key: "key",
                    schema: { key: "value" },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updated_at: "updated_at",
                    created_at: "created_at",
                },
                updated_at: "2023-01-09T19:21:04.551Z",
                created_at: "2023-01-09T19:02:58.647Z",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/locations/location_id/custom-attributes/key")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.locations.customAttributes.upsert({
            locationId: "location_id",
            key: "key",
            customAttribute: {
                value: "hot cocoa",
            },
        });
        expect(response).toEqual({
            customAttribute: {
                key: "bestseller",
                value: "hot cocoa",
                version: 2,
                visibility: "VISIBILITY_READ_WRITE_VALUES",
                definition: {
                    key: "key",
                    schema: {
                        key: "value",
                    },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updatedAt: "updated_at",
                    createdAt: "created_at",
                },
                updatedAt: "2023-01-09T19:21:04.551Z",
                createdAt: "2023-01-09T19:02:58.647Z",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/locations/location_id/custom-attributes/key")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.locations.customAttributes.delete({
            locationId: "location_id",
            key: "key",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
