/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { SquareClient } from "../../../src/Client";

describe("Codes", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "01bb00a6-0c86-4770-94ed-f5fca973cd56",
            device_code: { name: "Counter 1", product_type: "TERMINAL_API", location_id: "B5E4484SHHNYH" },
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            device_code: {
                id: "B3Z6NAMYQSMTM",
                name: "Counter 1",
                code: "EBCARJ",
                device_id: "device_id",
                product_type: "TERMINAL_API",
                location_id: "B5E4484SHHNYH",
                status: "UNPAIRED",
                pair_by: "2020-02-06T18:49:33.000Z",
                created_at: "2020-02-06T18:44:33.000Z",
                status_changed_at: "2020-02-06T18:44:33.000Z",
                paired_at: "paired_at",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/devices/codes")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.devices.codes.create({
            idempotency_key: "01bb00a6-0c86-4770-94ed-f5fca973cd56",
            device_code: {
                name: "Counter 1",
                product_type: "TERMINAL_API",
                location_id: "B5E4484SHHNYH",
            },
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            device_code: {
                id: "B3Z6NAMYQSMTM",
                name: "Counter 1",
                code: "EBCARJ",
                device_id: "device_id",
                product_type: "TERMINAL_API",
                location_id: "B5E4484SHHNYH",
                status: "UNPAIRED",
                pair_by: "2020-02-06T18:49:33.000Z",
                created_at: "2020-02-06T18:44:33.000Z",
                status_changed_at: "2020-02-06T18:44:33.000Z",
                paired_at: "paired_at",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            device_code: {
                id: "B3Z6NAMYQSMTM",
                name: "Counter 1",
                code: "EBCARJ",
                device_id: "907CS13101300122",
                product_type: "TERMINAL_API",
                location_id: "B5E4484SHHNYH",
                status: "PAIRED",
                pair_by: "2020-02-06T18:49:33.000Z",
                created_at: "2020-02-06T18:44:33.000Z",
                status_changed_at: "2020-02-06T18:47:28.000Z",
                paired_at: "paired_at",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/devices/codes/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.devices.codes.get({
            id: "id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            device_code: {
                id: "B3Z6NAMYQSMTM",
                name: "Counter 1",
                code: "EBCARJ",
                device_id: "907CS13101300122",
                product_type: "TERMINAL_API",
                location_id: "B5E4484SHHNYH",
                status: "PAIRED",
                pair_by: "2020-02-06T18:49:33.000Z",
                created_at: "2020-02-06T18:44:33.000Z",
                status_changed_at: "2020-02-06T18:47:28.000Z",
                paired_at: "paired_at",
            },
        });
    });
});
