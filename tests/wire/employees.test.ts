// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("Employees", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            employees: [
                {
                    id: "id",
                    first_name: "first_name",
                    last_name: "last_name",
                    email: "email",
                    phone_number: "phone_number",
                    location_ids: ["location_ids"],
                    status: "ACTIVE",
                    is_owner: true,
                    created_at: "created_at",
                    updated_at: "updated_at",
                },
            ],
            cursor: "cursor",
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server.mockEndpoint().get("/v2/employees").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            employees: [
                {
                    id: "id",
                    firstName: "first_name",
                    lastName: "last_name",
                    email: "email",
                    phoneNumber: "phone_number",
                    locationIds: ["location_ids"],
                    status: "ACTIVE",
                    isOwner: true,
                    createdAt: "created_at",
                    updatedAt: "updated_at",
                },
            ],
            cursor: "cursor",
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        };
        const page = await client.employees.list({
            locationId: "location_id",
            status: "ACTIVE",
            limit: 1,
            cursor: "cursor",
        });

        expect(expected.employees).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.employees).toEqual(nextPage.data);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            employee: {
                id: "id",
                first_name: "first_name",
                last_name: "last_name",
                email: "email",
                phone_number: "phone_number",
                location_ids: ["location_ids"],
                status: "ACTIVE",
                is_owner: true,
                created_at: "created_at",
                updated_at: "updated_at",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server.mockEndpoint().get("/v2/employees/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.employees.get({
            id: "id",
        });
        expect(response).toEqual({
            employee: {
                id: "id",
                firstName: "first_name",
                lastName: "last_name",
                email: "email",
                phoneNumber: "phone_number",
                locationIds: ["location_ids"],
                status: "ACTIVE",
                isOwner: true,
                createdAt: "created_at",
                updatedAt: "updated_at",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
