/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SquareClient } from "../../src/Client";

describe("Snippets", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            snippet: {
                id: "snippet_5d178150-a6c0-11eb-a9f1-437e6a2881e7",
                site_id: "site_278075276488921835",
                content: "<script>var js = 1;</script>",
                created_at: "2021-03-11T25:40:09.000000Z",
                updated_at: "2021-03-11T25:40:09.000000Z",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/sites/site_id/snippet")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.snippets.get({
            site_id: "site_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            snippet: {
                id: "snippet_5d178150-a6c0-11eb-a9f1-437e6a2881e7",
                site_id: "site_278075276488921835",
                content: "<script>var js = 1;</script>",
                created_at: "2021-03-11T25:40:09.000000Z",
                updated_at: "2021-03-11T25:40:09.000000Z",
            },
        });
    });

    test("upsert", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { snippet: { content: "<script>var js = 1;</script>" } };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            snippet: {
                id: "snippet_5d178150-a6c0-11eb-a9f1-437e6a2881e7",
                site_id: "site_278075276488921835",
                content: "<script>var js = 1;</script>",
                created_at: "2021-03-11T25:40:09.000000Z",
                updated_at: "2021-03-11T25:40:09.000000Z",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/sites/site_id/snippet")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.snippets.upsert({
            site_id: "site_id",
            snippet: {
                content: "<script>var js = 1;</script>",
            },
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            snippet: {
                id: "snippet_5d178150-a6c0-11eb-a9f1-437e6a2881e7",
                site_id: "site_278075276488921835",
                content: "<script>var js = 1;</script>",
                created_at: "2021-03-11T25:40:09.000000Z",
                updated_at: "2021-03-11T25:40:09.000000Z",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/sites/site_id/snippet")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.snippets.delete({
            site_id: "site_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
