/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { SquareClient } from "../../../src/Client";

describe("CustomAttributes", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            custom_attribute: {
                key: "favoritemovie",
                value: "Dune",
                version: 1,
                visibility: "VISIBILITY_READ_ONLY",
                definition: {
                    key: "key",
                    schema: { key: "value" },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updated_at: "updated_at",
                    created_at: "created_at",
                },
                updated_at: "2022-04-26T15:50:27Z",
                created_at: "2022-04-26T15:50:27Z",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/customers/customer_id/custom-attributes/key")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.customAttributes.get({
            customerId: "customer_id",
            key: "key",
        });
        expect(response).toEqual({
            customAttribute: {
                key: "favoritemovie",
                value: "Dune",
                version: 1,
                visibility: "VISIBILITY_READ_ONLY",
                definition: {
                    key: "key",
                    schema: {
                        key: "value",
                    },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updatedAt: "updated_at",
                    createdAt: "created_at",
                },
                updatedAt: "2022-04-26T15:50:27Z",
                createdAt: "2022-04-26T15:50:27Z",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("upsert", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { custom_attribute: { value: "Dune" } };
        const rawResponseBody = {
            custom_attribute: {
                key: "favoritemovie",
                value: "Dune",
                version: 1,
                visibility: "VISIBILITY_READ_ONLY",
                definition: {
                    key: "key",
                    schema: { key: "value" },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updated_at: "updated_at",
                    created_at: "created_at",
                },
                updated_at: "2022-04-26T15:50:27Z",
                created_at: "2022-04-26T15:50:27Z",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/customers/customer_id/custom-attributes/key")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.customAttributes.upsert({
            customerId: "customer_id",
            key: "key",
            customAttribute: {
                value: "Dune",
            },
        });
        expect(response).toEqual({
            customAttribute: {
                key: "favoritemovie",
                value: "Dune",
                version: 1,
                visibility: "VISIBILITY_READ_ONLY",
                definition: {
                    key: "key",
                    schema: {
                        key: "value",
                    },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updatedAt: "updated_at",
                    createdAt: "created_at",
                },
                updatedAt: "2022-04-26T15:50:27Z",
                createdAt: "2022-04-26T15:50:27Z",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/customers/customer_id/custom-attributes/key")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.customAttributes.delete({
            customerId: "customer_id",
            key: "key",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
