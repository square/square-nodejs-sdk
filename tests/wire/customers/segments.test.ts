// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Segments", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            segments: [
                {
                    id: "GMNXRZVEXNQDF.CHURN_RISK",
                    name: "Lapsed",
                    created_at: "2020-01-09T19:33:24.469Z",
                    updated_at: "2020-04-13T21:47:04Z",
                },
                {
                    id: "GMNXRZVEXNQDF.LOYAL",
                    name: "Regulars",
                    created_at: "2020-01-09T19:33:24.486Z",
                    updated_at: "2020-04-13T21:47:04Z",
                },
                {
                    id: "GMNXRZVEXNQDF.REACHABLE",
                    name: "Reachable",
                    created_at: "2020-01-09T19:33:21.813Z",
                    updated_at: "2020-04-13T21:47:04Z",
                },
                {
                    id: "gv2:KF92J19VXN5FK30GX2E8HSGQ20",
                    name: "Instant Profile",
                    created_at: "2020-01-09T19:33:25Z",
                    updated_at: "2020-04-13T23:01:03Z",
                },
            ],
            cursor: "cursor",
        };
        server
            .mockEndpoint()
            .get("/v2/customers/segments")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            segments: [
                {
                    id: "GMNXRZVEXNQDF.CHURN_RISK",
                    name: "Lapsed",
                    createdAt: "2020-01-09T19:33:24.469Z",
                    updatedAt: "2020-04-13T21:47:04Z",
                },
                {
                    id: "GMNXRZVEXNQDF.LOYAL",
                    name: "Regulars",
                    createdAt: "2020-01-09T19:33:24.486Z",
                    updatedAt: "2020-04-13T21:47:04Z",
                },
                {
                    id: "GMNXRZVEXNQDF.REACHABLE",
                    name: "Reachable",
                    createdAt: "2020-01-09T19:33:21.813Z",
                    updatedAt: "2020-04-13T21:47:04Z",
                },
                {
                    id: "gv2:KF92J19VXN5FK30GX2E8HSGQ20",
                    name: "Instant Profile",
                    createdAt: "2020-01-09T19:33:25Z",
                    updatedAt: "2020-04-13T23:01:03Z",
                },
            ],
            cursor: "cursor",
        };
        const page = await client.customers.segments.list({
            cursor: "cursor",
            limit: 1,
        });

        expect(expected.segments).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.segments).toEqual(nextPage.data);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            segment: {
                id: "GMNXRZVEXNQDF.CHURN_RISK",
                name: "Lapsed",
                created_at: "2020-01-09T19:33:24.469Z",
                updated_at: "2020-04-13T23:01:13Z",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/customers/segments/segment_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.segments.get({
            segmentId: "segment_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            segment: {
                id: "GMNXRZVEXNQDF.CHURN_RISK",
                name: "Lapsed",
                createdAt: "2020-01-09T19:33:24.469Z",
                updatedAt: "2020-04-13T23:01:13Z",
            },
        });
    });
});
