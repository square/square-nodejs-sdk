// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Cards", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            card_nonce: "YOUR_CARD_NONCE",
            billing_address: {
                address_line_1: "500 Electric Ave",
                address_line_2: "Suite 600",
                locality: "New York",
                administrative_district_level_1: "NY",
                postal_code: "10003",
                country: "US",
            },
            cardholder_name: "Amelia Earhart",
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            card: {
                id: "icard-card_id",
                card_brand: "VISA",
                last_4: "1111",
                exp_month: BigInt(11),
                exp_year: BigInt(2018),
                cardholder_name: "Amelia Earhart",
                billing_address: {
                    address_line_1: "500 Electric Ave",
                    address_line_2: "Suite 600",
                    address_line_3: "address_line_3",
                    locality: "New York",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "NY",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "10003",
                    country: "US",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                fingerprint: "fingerprint",
                customer_id: "customer_id",
                merchant_id: "merchant_id",
                reference_id: "reference_id",
                enabled: true,
                card_type: "UNKNOWN_CARD_TYPE",
                prepaid_type: "UNKNOWN_PREPAID_TYPE",
                bin: "bin",
                version: BigInt(1000000),
                card_co_brand: "UNKNOWN",
                issuer_alert: "ISSUER_ALERT_CARD_CLOSED",
                issuer_alert_at: "issuer_alert_at",
                hsa_fsa: true,
            },
        };
        server
            .mockEndpoint()
            .post("/v2/customers/customer_id/cards")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.cards.create({
            customerId: "customer_id",
            cardNonce: "YOUR_CARD_NONCE",
            billingAddress: {
                addressLine1: "500 Electric Ave",
                addressLine2: "Suite 600",
                locality: "New York",
                administrativeDistrictLevel1: "NY",
                postalCode: "10003",
                country: "US",
            },
            cardholderName: "Amelia Earhart",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            card: {
                id: "icard-card_id",
                cardBrand: "VISA",
                last4: "1111",
                expMonth: BigInt("11"),
                expYear: BigInt("2018"),
                cardholderName: "Amelia Earhart",
                billingAddress: {
                    addressLine1: "500 Electric Ave",
                    addressLine2: "Suite 600",
                    addressLine3: "address_line_3",
                    locality: "New York",
                    sublocality: "sublocality",
                    sublocality2: "sublocality_2",
                    sublocality3: "sublocality_3",
                    administrativeDistrictLevel1: "NY",
                    administrativeDistrictLevel2: "administrative_district_level_2",
                    administrativeDistrictLevel3: "administrative_district_level_3",
                    postalCode: "10003",
                    country: "US",
                    firstName: "first_name",
                    lastName: "last_name",
                },
                fingerprint: "fingerprint",
                customerId: "customer_id",
                merchantId: "merchant_id",
                referenceId: "reference_id",
                enabled: true,
                cardType: "UNKNOWN_CARD_TYPE",
                prepaidType: "UNKNOWN_PREPAID_TYPE",
                bin: "bin",
                version: BigInt("1000000"),
                cardCoBrand: "UNKNOWN",
                issuerAlert: "ISSUER_ALERT_CARD_CLOSED",
                issuerAlertAt: "issuer_alert_at",
                hsaFsa: true,
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/customers/customer_id/cards/card_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.cards.delete({
            customerId: "customer_id",
            cardId: "card_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
