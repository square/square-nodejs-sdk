// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Groups", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            groups: [
                {
                    id: "2TAT3CMH4Q0A9M87XJZED0WMR3",
                    name: "Loyal Customers",
                    created_at: "2020-04-13T21:54:57.863Z",
                    updated_at: "2020-04-13T21:54:58Z",
                },
                {
                    id: "4XMEHESXJBNE9S9JAKZD2FGB14",
                    name: "Super Loyal Customers",
                    created_at: "2020-04-13T21:55:18.795Z",
                    updated_at: "2020-04-13T21:55:19Z",
                },
            ],
            cursor: "cursor",
        };
        server
            .mockEndpoint()
            .get("/v2/customers/groups")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            groups: [
                {
                    id: "2TAT3CMH4Q0A9M87XJZED0WMR3",
                    name: "Loyal Customers",
                    createdAt: "2020-04-13T21:54:57.863Z",
                    updatedAt: "2020-04-13T21:54:58Z",
                },
                {
                    id: "4XMEHESXJBNE9S9JAKZD2FGB14",
                    name: "Super Loyal Customers",
                    createdAt: "2020-04-13T21:55:18.795Z",
                    updatedAt: "2020-04-13T21:55:19Z",
                },
            ],
            cursor: "cursor",
        };
        const page = await client.customers.groups.list({
            cursor: "cursor",
            limit: 1,
        });

        expect(expected.groups).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.groups).toEqual(nextPage.data);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { group: { name: "Loyal Customers" } };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            group: {
                id: "2TAT3CMH4Q0A9M87XJZED0WMR3",
                name: "Loyal Customers",
                created_at: "2020-04-13T21:54:57.863Z",
                updated_at: "2020-04-13T21:54:58Z",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/customers/groups")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.groups.create({
            group: {
                name: "Loyal Customers",
            },
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            group: {
                id: "2TAT3CMH4Q0A9M87XJZED0WMR3",
                name: "Loyal Customers",
                createdAt: "2020-04-13T21:54:57.863Z",
                updatedAt: "2020-04-13T21:54:58Z",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            group: {
                id: "2TAT3CMH4Q0A9M87XJZED0WMR3",
                name: "Loyal Customers",
                created_at: "2020-04-13T21:54:57.863Z",
                updated_at: "2020-04-13T21:54:58Z",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/customers/groups/group_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.groups.get({
            groupId: "group_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            group: {
                id: "2TAT3CMH4Q0A9M87XJZED0WMR3",
                name: "Loyal Customers",
                createdAt: "2020-04-13T21:54:57.863Z",
                updatedAt: "2020-04-13T21:54:58Z",
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { group: { name: "Loyal Customers" } };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            group: {
                id: "2TAT3CMH4Q0A9M87XJZED0WMR3",
                name: "Loyal Customers",
                created_at: "2020-04-13T21:54:57.863Z",
                updated_at: "2020-04-13T21:54:58Z",
            },
        };
        server
            .mockEndpoint()
            .put("/v2/customers/groups/group_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.groups.update({
            groupId: "group_id",
            group: {
                name: "Loyal Customers",
            },
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            group: {
                id: "2TAT3CMH4Q0A9M87XJZED0WMR3",
                name: "Loyal Customers",
                createdAt: "2020-04-13T21:54:57.863Z",
                updatedAt: "2020-04-13T21:54:58Z",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/customers/groups/group_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.groups.delete({
            groupId: "group_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("add", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .put("/v2/customers/customer_id/groups/group_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.groups.add({
            customerId: "customer_id",
            groupId: "group_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("remove", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/customers/customer_id/groups/group_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.groups.remove({
            customerId: "customer_id",
            groupId: "group_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
