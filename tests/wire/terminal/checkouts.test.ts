// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Checkouts", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "28a0c3bc-7839-11ea-bc55-0242ac130003",
            checkout: {
                amount_money: { amount: BigInt(2610), currency: "USD" },
                reference_id: "id11572",
                note: "A brief note",
                device_options: { device_id: "dbb5d83a-7838-11ea-bc55-0242ac130003" },
            },
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            checkout: {
                id: "08YceKh7B3ZqO",
                amount_money: { amount: BigInt(2610), currency: "USD" },
                reference_id: "id11572",
                note: "A brief note",
                order_id: "order_id",
                payment_options: {
                    autocomplete: true,
                    delay_duration: "delay_duration",
                    accept_partial_authorization: true,
                    delay_action: "CANCEL",
                },
                device_options: {
                    device_id: "dbb5d83a-7838-11ea-bc55-0242ac130003",
                    skip_receipt_screen: false,
                    collect_signature: true,
                    tip_settings: { allow_tipping: false },
                    show_itemized_cart: true,
                },
                deadline_duration: "PT5M",
                status: "PENDING",
                cancel_reason: "BUYER_CANCELED",
                payment_ids: ["payment_ids"],
                created_at: "2020-04-06T16:39:32.545Z",
                updated_at: "2020-04-06T16:39:32.545Z",
                app_id: "APP_ID",
                location_id: "LOCATION_ID",
                payment_type: "CARD_PRESENT",
                team_member_id: "team_member_id",
                customer_id: "customer_id",
                app_fee_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                statement_description_identifier: "statement_description_identifier",
                tip_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
            },
        };
        server
            .mockEndpoint()
            .post("/v2/terminals/checkouts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.terminal.checkouts.create({
            idempotencyKey: "28a0c3bc-7839-11ea-bc55-0242ac130003",
            checkout: {
                amountMoney: {
                    amount: BigInt("2610"),
                    currency: "USD",
                },
                referenceId: "id11572",
                note: "A brief note",
                deviceOptions: {
                    deviceId: "dbb5d83a-7838-11ea-bc55-0242ac130003",
                },
            },
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            checkout: {
                id: "08YceKh7B3ZqO",
                amountMoney: {
                    amount: BigInt("2610"),
                    currency: "USD",
                },
                referenceId: "id11572",
                note: "A brief note",
                orderId: "order_id",
                paymentOptions: {
                    autocomplete: true,
                    delayDuration: "delay_duration",
                    acceptPartialAuthorization: true,
                    delayAction: "CANCEL",
                },
                deviceOptions: {
                    deviceId: "dbb5d83a-7838-11ea-bc55-0242ac130003",
                    skipReceiptScreen: false,
                    collectSignature: true,
                    tipSettings: {
                        allowTipping: false,
                    },
                    showItemizedCart: true,
                },
                deadlineDuration: "PT5M",
                status: "PENDING",
                cancelReason: "BUYER_CANCELED",
                paymentIds: ["payment_ids"],
                createdAt: "2020-04-06T16:39:32.545Z",
                updatedAt: "2020-04-06T16:39:32.545Z",
                appId: "APP_ID",
                locationId: "LOCATION_ID",
                paymentType: "CARD_PRESENT",
                teamMemberId: "team_member_id",
                customerId: "customer_id",
                appFeeMoney: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                statementDescriptionIdentifier: "statement_description_identifier",
                tipMoney: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
            },
        });
    });

    test("search", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { query: { filter: { status: "COMPLETED" } }, limit: 2 };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            checkouts: [
                {
                    id: "tsQPvzwBpMqqO",
                    amount_money: { amount: BigInt(2610), currency: "USD" },
                    reference_id: "id14467",
                    note: "A brief note",
                    order_id: "order_id",
                    device_options: {
                        device_id: "dbb5d83a-7838-11ea-bc55-0242ac130003",
                        skip_receipt_screen: false,
                        tip_settings: { allow_tipping: false },
                    },
                    deadline_duration: "PT5M",
                    status: "COMPLETED",
                    cancel_reason: "BUYER_CANCELED",
                    payment_ids: ["rXnhZzywrEk4vR6pw76fPZfgvaB"],
                    created_at: "2020-03-31T18:13:15.921Z",
                    updated_at: "2020-03-31T18:13:52.725Z",
                    app_id: "APP_ID",
                    location_id: "location_id",
                    payment_type: "CARD_PRESENT",
                    team_member_id: "team_member_id",
                    customer_id: "customer_id",
                    statement_description_identifier: "statement_description_identifier",
                },
                {
                    id: "XlOPTgcEhrbqO",
                    amount_money: { amount: BigInt(2610), currency: "USD" },
                    reference_id: "id41623",
                    note: "A brief note",
                    order_id: "order_id",
                    device_options: {
                        device_id: "dbb5d83a-7838-11ea-bc55-0242ac130003",
                        skip_receipt_screen: true,
                        tip_settings: { allow_tipping: false },
                    },
                    deadline_duration: "PT5M",
                    status: "COMPLETED",
                    cancel_reason: "BUYER_CANCELED",
                    payment_ids: ["VYBF861PaoKPP7Pih0TlbZiNvaB"],
                    created_at: "2020-03-31T18:08:31.882Z",
                    updated_at: "2020-03-31T18:08:41.635Z",
                    app_id: "APP_ID",
                    location_id: "location_id",
                    payment_type: "CARD_PRESENT",
                    team_member_id: "team_member_id",
                    customer_id: "customer_id",
                    statement_description_identifier: "statement_description_identifier",
                },
            ],
            cursor: "RiTJqBoTuXlbLmmrPvEkX9iG7XnQ4W4RjGnH",
        };
        server
            .mockEndpoint()
            .post("/v2/terminals/checkouts/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.terminal.checkouts.search({
            query: {
                filter: {
                    status: "COMPLETED",
                },
            },
            limit: 2,
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            checkouts: [
                {
                    id: "tsQPvzwBpMqqO",
                    amountMoney: {
                        amount: BigInt("2610"),
                        currency: "USD",
                    },
                    referenceId: "id14467",
                    note: "A brief note",
                    orderId: "order_id",
                    deviceOptions: {
                        deviceId: "dbb5d83a-7838-11ea-bc55-0242ac130003",
                        skipReceiptScreen: false,
                        tipSettings: {
                            allowTipping: false,
                        },
                    },
                    deadlineDuration: "PT5M",
                    status: "COMPLETED",
                    cancelReason: "BUYER_CANCELED",
                    paymentIds: ["rXnhZzywrEk4vR6pw76fPZfgvaB"],
                    createdAt: "2020-03-31T18:13:15.921Z",
                    updatedAt: "2020-03-31T18:13:52.725Z",
                    appId: "APP_ID",
                    locationId: "location_id",
                    paymentType: "CARD_PRESENT",
                    teamMemberId: "team_member_id",
                    customerId: "customer_id",
                    statementDescriptionIdentifier: "statement_description_identifier",
                },
                {
                    id: "XlOPTgcEhrbqO",
                    amountMoney: {
                        amount: BigInt("2610"),
                        currency: "USD",
                    },
                    referenceId: "id41623",
                    note: "A brief note",
                    orderId: "order_id",
                    deviceOptions: {
                        deviceId: "dbb5d83a-7838-11ea-bc55-0242ac130003",
                        skipReceiptScreen: true,
                        tipSettings: {
                            allowTipping: false,
                        },
                    },
                    deadlineDuration: "PT5M",
                    status: "COMPLETED",
                    cancelReason: "BUYER_CANCELED",
                    paymentIds: ["VYBF861PaoKPP7Pih0TlbZiNvaB"],
                    createdAt: "2020-03-31T18:08:31.882Z",
                    updatedAt: "2020-03-31T18:08:41.635Z",
                    appId: "APP_ID",
                    locationId: "location_id",
                    paymentType: "CARD_PRESENT",
                    teamMemberId: "team_member_id",
                    customerId: "customer_id",
                    statementDescriptionIdentifier: "statement_description_identifier",
                },
            ],
            cursor: "RiTJqBoTuXlbLmmrPvEkX9iG7XnQ4W4RjGnH",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            checkout: {
                id: "08YceKh7B3ZqO",
                amount_money: { amount: BigInt(2610), currency: "USD" },
                reference_id: "id11572",
                note: "A brief note",
                order_id: "order_id",
                payment_options: {
                    autocomplete: true,
                    delay_duration: "delay_duration",
                    accept_partial_authorization: true,
                    delay_action: "CANCEL",
                },
                device_options: {
                    device_id: "dbb5d83a-7838-11ea-bc55-0242ac130003",
                    skip_receipt_screen: false,
                    collect_signature: true,
                    tip_settings: { allow_tipping: false },
                    show_itemized_cart: true,
                },
                deadline_duration: "PT5M",
                status: "IN_PROGRESS",
                cancel_reason: "BUYER_CANCELED",
                payment_ids: ["payment_ids"],
                created_at: "2020-04-06T16:39:32.545Z",
                updated_at: "2020-04-06T16:39:323.001Z",
                app_id: "APP_ID",
                location_id: "LOCATION_ID",
                payment_type: "CARD_PRESENT",
                team_member_id: "team_member_id",
                customer_id: "customer_id",
                app_fee_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                statement_description_identifier: "statement_description_identifier",
                tip_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
            },
        };
        server
            .mockEndpoint()
            .get("/v2/terminals/checkouts/checkout_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.terminal.checkouts.get({
            checkoutId: "checkout_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            checkout: {
                id: "08YceKh7B3ZqO",
                amountMoney: {
                    amount: BigInt("2610"),
                    currency: "USD",
                },
                referenceId: "id11572",
                note: "A brief note",
                orderId: "order_id",
                paymentOptions: {
                    autocomplete: true,
                    delayDuration: "delay_duration",
                    acceptPartialAuthorization: true,
                    delayAction: "CANCEL",
                },
                deviceOptions: {
                    deviceId: "dbb5d83a-7838-11ea-bc55-0242ac130003",
                    skipReceiptScreen: false,
                    collectSignature: true,
                    tipSettings: {
                        allowTipping: false,
                    },
                    showItemizedCart: true,
                },
                deadlineDuration: "PT5M",
                status: "IN_PROGRESS",
                cancelReason: "BUYER_CANCELED",
                paymentIds: ["payment_ids"],
                createdAt: "2020-04-06T16:39:32.545Z",
                updatedAt: "2020-04-06T16:39:323.001Z",
                appId: "APP_ID",
                locationId: "LOCATION_ID",
                paymentType: "CARD_PRESENT",
                teamMemberId: "team_member_id",
                customerId: "customer_id",
                appFeeMoney: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                statementDescriptionIdentifier: "statement_description_identifier",
                tipMoney: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
            },
        });
    });

    test("cancel", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            checkout: {
                id: "S1yDlPQx7slqO",
                amount_money: { amount: BigInt(123), currency: "USD" },
                reference_id: "id36815",
                note: "note",
                order_id: "order_id",
                payment_options: {
                    autocomplete: true,
                    delay_duration: "delay_duration",
                    accept_partial_authorization: true,
                    delay_action: "CANCEL",
                },
                device_options: {
                    device_id: "dbb5d83a-7838-11ea-bc55-0242ac130003",
                    skip_receipt_screen: true,
                    collect_signature: true,
                    tip_settings: { allow_tipping: true },
                    show_itemized_cart: true,
                },
                deadline_duration: "PT5M",
                status: "CANCELED",
                cancel_reason: "SELLER_CANCELED",
                payment_ids: ["payment_ids"],
                created_at: "2020-03-16T15:31:19.934Z",
                updated_at: "2020-03-16T15:31:45.787Z",
                app_id: "APP_ID",
                location_id: "LOCATION_ID",
                payment_type: "CARD_PRESENT",
                team_member_id: "team_member_id",
                customer_id: "customer_id",
                app_fee_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                statement_description_identifier: "statement_description_identifier",
                tip_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
            },
        };
        server
            .mockEndpoint()
            .post("/v2/terminals/checkouts/checkout_id/cancel")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.terminal.checkouts.cancel({
            checkoutId: "checkout_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            checkout: {
                id: "S1yDlPQx7slqO",
                amountMoney: {
                    amount: BigInt("123"),
                    currency: "USD",
                },
                referenceId: "id36815",
                note: "note",
                orderId: "order_id",
                paymentOptions: {
                    autocomplete: true,
                    delayDuration: "delay_duration",
                    acceptPartialAuthorization: true,
                    delayAction: "CANCEL",
                },
                deviceOptions: {
                    deviceId: "dbb5d83a-7838-11ea-bc55-0242ac130003",
                    skipReceiptScreen: true,
                    collectSignature: true,
                    tipSettings: {
                        allowTipping: true,
                    },
                    showItemizedCart: true,
                },
                deadlineDuration: "PT5M",
                status: "CANCELED",
                cancelReason: "SELLER_CANCELED",
                paymentIds: ["payment_ids"],
                createdAt: "2020-03-16T15:31:19.934Z",
                updatedAt: "2020-03-16T15:31:45.787Z",
                appId: "APP_ID",
                locationId: "LOCATION_ID",
                paymentType: "CARD_PRESENT",
                teamMemberId: "team_member_id",
                customerId: "customer_id",
                appFeeMoney: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                statementDescriptionIdentifier: "statement_description_identifier",
                tipMoney: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
            },
        });
    });
});
