/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SquareClient } from "../../src/Client";

describe("Payouts", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            payout: {
                id: "po_f3c0fb38-a5ce-427d-b858-52b925b72e45",
                status: "PAID",
                location_id: "L88917AVBK2S5",
                created_at: "2022-03-24T03:07:09Z",
                updated_at: "2022-03-24T03:07:09Z",
                amount_money: { amount: BigInt(-103), currency: "UNKNOWN_CURRENCY" },
                destination: { type: "BANK_ACCOUNT", id: "bact:ZPp3oedR3AeEUNd3z7" },
                version: 1,
                type: "BATCH",
                payout_fee: [{}],
                arrival_date: "2022-03-24",
                end_to_end_id: "end_to_end_id",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/payouts/payout_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.payouts.get({
            payout_id: "payout_id",
        });
        expect(response).toEqual({
            payout: {
                id: "po_f3c0fb38-a5ce-427d-b858-52b925b72e45",
                status: "PAID",
                location_id: "L88917AVBK2S5",
                created_at: "2022-03-24T03:07:09Z",
                updated_at: "2022-03-24T03:07:09Z",
                amount_money: {
                    amount: BigInt("-103"),
                    currency: "UNKNOWN_CURRENCY",
                },
                destination: {
                    type: "BANK_ACCOUNT",
                    id: "bact:ZPp3oedR3AeEUNd3z7",
                },
                version: 1,
                type: "BATCH",
                payout_fee: [{}],
                arrival_date: "2022-03-24",
                end_to_end_id: "end_to_end_id",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
