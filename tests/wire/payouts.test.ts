// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("Payouts", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            payouts: [
                {
                    id: "po_b345d2c7-90b3-4f0b-a2aa-df1def7f8afc",
                    status: "PAID",
                    location_id: "L88917AVBK2S5",
                    created_at: "2022-03-29T16:12:31Z",
                    updated_at: "2022-03-30T01:07:22.875Z",
                    amount_money: { amount: BigInt(6259) },
                    destination: { type: "CARD", id: "ccof:ZPp3oedR3AeEUNd3z7" },
                    version: 2,
                    type: "BATCH",
                    payout_fee: [
                        {
                            amount_money: { amount: BigInt(95) },
                            effective_at: "2022-03-29T16:12:31Z",
                            type: "TRANSFER_FEE",
                        },
                    ],
                    arrival_date: "2022-03-29",
                    end_to_end_id: "L2100000005",
                },
                {
                    id: "po_f3c0fb38-a5ce-427d-b858-52b925b72e45",
                    status: "PAID",
                    location_id: "L88917AVBK2S5",
                    created_at: "2022-03-24T03:07:09Z",
                    updated_at: "2022-03-24T03:07:09Z",
                    amount_money: { amount: BigInt(-103) },
                    destination: { type: "BANK_ACCOUNT", id: "bact:ZPp3oedR3AeEUNd3z7" },
                    version: 1,
                    type: "BATCH",
                    payout_fee: [{}],
                    arrival_date: "2022-03-24",
                    end_to_end_id: "L2100000006",
                },
            ],
            cursor: "EMPCyStibo64hS8wLayZPp3oedR3AeEUNd3z7u6zphi72LQZFIEMbkKVvot9eefpU",
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server.mockEndpoint().get("/v2/payouts").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            payouts: [
                {
                    id: "po_b345d2c7-90b3-4f0b-a2aa-df1def7f8afc",
                    status: "PAID",
                    locationId: "L88917AVBK2S5",
                    createdAt: "2022-03-29T16:12:31Z",
                    updatedAt: "2022-03-30T01:07:22.875Z",
                    amountMoney: {
                        amount: BigInt("6259"),
                    },
                    destination: {
                        type: "CARD",
                        id: "ccof:ZPp3oedR3AeEUNd3z7",
                    },
                    version: 2,
                    type: "BATCH",
                    payoutFee: [
                        {
                            amountMoney: {
                                amount: BigInt("95"),
                            },
                            effectiveAt: "2022-03-29T16:12:31Z",
                            type: "TRANSFER_FEE",
                        },
                    ],
                    arrivalDate: "2022-03-29",
                    endToEndId: "L2100000005",
                },
                {
                    id: "po_f3c0fb38-a5ce-427d-b858-52b925b72e45",
                    status: "PAID",
                    locationId: "L88917AVBK2S5",
                    createdAt: "2022-03-24T03:07:09Z",
                    updatedAt: "2022-03-24T03:07:09Z",
                    amountMoney: {
                        amount: BigInt("-103"),
                    },
                    destination: {
                        type: "BANK_ACCOUNT",
                        id: "bact:ZPp3oedR3AeEUNd3z7",
                    },
                    version: 1,
                    type: "BATCH",
                    payoutFee: [{}],
                    arrivalDate: "2022-03-24",
                    endToEndId: "L2100000006",
                },
            ],
            cursor: "EMPCyStibo64hS8wLayZPp3oedR3AeEUNd3z7u6zphi72LQZFIEMbkKVvot9eefpU",
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        };
        const page = await client.payouts.list({
            locationId: "location_id",
            status: "SENT",
            beginTime: "begin_time",
            endTime: "end_time",
            sortOrder: "DESC",
            cursor: "cursor",
            limit: 1,
        });

        expect(expected.payouts).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.payouts).toEqual(nextPage.data);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            payout: {
                id: "po_f3c0fb38-a5ce-427d-b858-52b925b72e45",
                status: "PAID",
                location_id: "L88917AVBK2S5",
                created_at: "2022-03-24T03:07:09Z",
                updated_at: "2022-03-24T03:07:09Z",
                amount_money: { amount: BigInt(-103), currency: "UNKNOWN_CURRENCY" },
                destination: { type: "BANK_ACCOUNT", id: "bact:ZPp3oedR3AeEUNd3z7" },
                version: 1,
                type: "BATCH",
                payout_fee: [{}],
                arrival_date: "2022-03-24",
                end_to_end_id: "end_to_end_id",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/payouts/payout_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.payouts.get({
            payoutId: "payout_id",
        });
        expect(response).toEqual({
            payout: {
                id: "po_f3c0fb38-a5ce-427d-b858-52b925b72e45",
                status: "PAID",
                locationId: "L88917AVBK2S5",
                createdAt: "2022-03-24T03:07:09Z",
                updatedAt: "2022-03-24T03:07:09Z",
                amountMoney: {
                    amount: BigInt("-103"),
                    currency: "UNKNOWN_CURRENCY",
                },
                destination: {
                    type: "BANK_ACCOUNT",
                    id: "bact:ZPp3oedR3AeEUNd3z7",
                },
                version: 1,
                type: "BATCH",
                payoutFee: [{}],
                arrivalDate: "2022-03-24",
                endToEndId: "end_to_end_id",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("ListEntries", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            payout_entries: [
                {
                    id: "poe_ZQWcw41d0SGJS6IWd4cSi8mKHk",
                    payout_id: "po_4d28e6c4-7dd5-4de4-8ec9-a059277646a6",
                    effective_at: "2021-12-14T23:31:49Z",
                    type: "REFUND",
                    gross_amount_money: { amount: BigInt(-50) },
                    fee_amount_money: { amount: BigInt(-2) },
                    net_amount_money: { amount: BigInt(-48) },
                    type_refund_details: {
                        payment_id: "HVdG62HeMlti8YYf94oxrN",
                        refund_id: "HVdG62HeMlti8YYf94oxrN_dR8Nztxg7umf94oxrN12Ji5r2KW14FAY",
                    },
                },
                {
                    id: "poe_EibbY9Ob1d0SGJS6IWd4cSiSi6wkaPk",
                    payout_id: "po_4d28e6c4-7dd5-4de4-8ec9-a059277646a6",
                    effective_at: "2021-12-14T23:31:49Z",
                    type: "CHARGE",
                    gross_amount_money: { amount: BigInt(100) },
                    fee_amount_money: { amount: BigInt(19) },
                    net_amount_money: { amount: BigInt(81) },
                    type_charge_details: { payment_id: "HVdG62H5K3291d0SGJS6IWd4cSi8YY" },
                },
            ],
            cursor: "TbfI80z98Xc2LdApCyZ2NvCYLpkPurYLR16GRIttpMJ55mrSIMzHgtkcRQdT0mOnTtfHO",
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/payouts/payout_id/payout-entries")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            payoutEntries: [
                {
                    id: "poe_ZQWcw41d0SGJS6IWd4cSi8mKHk",
                    payoutId: "po_4d28e6c4-7dd5-4de4-8ec9-a059277646a6",
                    effectiveAt: "2021-12-14T23:31:49Z",
                    type: "REFUND",
                    grossAmountMoney: {
                        amount: BigInt("-50"),
                    },
                    feeAmountMoney: {
                        amount: BigInt("-2"),
                    },
                    netAmountMoney: {
                        amount: BigInt("-48"),
                    },
                    typeRefundDetails: {
                        paymentId: "HVdG62HeMlti8YYf94oxrN",
                        refundId: "HVdG62HeMlti8YYf94oxrN_dR8Nztxg7umf94oxrN12Ji5r2KW14FAY",
                    },
                },
                {
                    id: "poe_EibbY9Ob1d0SGJS6IWd4cSiSi6wkaPk",
                    payoutId: "po_4d28e6c4-7dd5-4de4-8ec9-a059277646a6",
                    effectiveAt: "2021-12-14T23:31:49Z",
                    type: "CHARGE",
                    grossAmountMoney: {
                        amount: BigInt("100"),
                    },
                    feeAmountMoney: {
                        amount: BigInt("19"),
                    },
                    netAmountMoney: {
                        amount: BigInt("81"),
                    },
                    typeChargeDetails: {
                        paymentId: "HVdG62H5K3291d0SGJS6IWd4cSi8YY",
                    },
                },
            ],
            cursor: "TbfI80z98Xc2LdApCyZ2NvCYLpkPurYLR16GRIttpMJ55mrSIMzHgtkcRQdT0mOnTtfHO",
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        };
        const page = await client.payouts.listEntries({
            payoutId: "payout_id",
            sortOrder: "DESC",
            cursor: "cursor",
            limit: 1,
        });

        expect(expected.payoutEntries).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.payoutEntries).toEqual(nextPage.data);
    });
});
