/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SquareClient } from "../../src/Client";

describe("Bookings", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { booking: {} };
        const rawResponseBody = {
            booking: {
                id: "zkras0xv0xwswx",
                version: 0,
                status: "ACCEPTED",
                created_at: "2020-10-28T15:47:41Z",
                updated_at: "2020-10-28T15:47:41Z",
                start_at: "2020-11-26T13:00:00Z",
                location_id: "LEQHH0YY8B42M",
                customer_id: "EX2QSVGTZN4K1E5QE1CBFNVQ8M",
                customer_note: "",
                seller_note: "",
                appointment_segments: [
                    {
                        duration_minutes: 60,
                        service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                        team_member_id: "TMXUrsBWWcHTt79t",
                        service_variation_version: BigInt(1599775456731),
                    },
                ],
                transition_time_minutes: 1,
                all_day: true,
                location_type: "BUSINESS_LOCATION",
                creator_details: {
                    creator_type: "TEAM_MEMBER",
                    team_member_id: "team_member_id",
                    customer_id: "customer_id",
                },
                source: "FIRST_PARTY_MERCHANT",
                address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/bookings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bookings.create({
            booking: {},
        });
        expect(response).toEqual({
            booking: {
                id: "zkras0xv0xwswx",
                version: 0,
                status: "ACCEPTED",
                created_at: "2020-10-28T15:47:41Z",
                updated_at: "2020-10-28T15:47:41Z",
                start_at: "2020-11-26T13:00:00Z",
                location_id: "LEQHH0YY8B42M",
                customer_id: "EX2QSVGTZN4K1E5QE1CBFNVQ8M",
                customer_note: "",
                seller_note: "",
                appointment_segments: [
                    {
                        duration_minutes: 60,
                        service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                        team_member_id: "TMXUrsBWWcHTt79t",
                        service_variation_version: BigInt("1599775456731"),
                    },
                ],
                transition_time_minutes: 1,
                all_day: true,
                location_type: "BUSINESS_LOCATION",
                creator_details: {
                    creator_type: "TEAM_MEMBER",
                    team_member_id: "team_member_id",
                    customer_id: "customer_id",
                },
                source: "FIRST_PARTY_MERCHANT",
                address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("SearchAvailability", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { query: { filter: { start_at_range: {} } } };
        const rawResponseBody = {
            availabilities: [
                {
                    start_at: "2020-11-26T13:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMXUrsBWWcHTt79t",
                            service_variation_version: BigInt(1599775456731),
                        },
                    ],
                },
                {
                    start_at: "2020-11-26T13:30:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMXUrsBWWcHTt79t",
                            service_variation_version: BigInt(1599775456731),
                        },
                    ],
                },
                {
                    start_at: "2020-11-26T14:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt(1599775456731),
                        },
                    ],
                },
                {
                    start_at: "2020-11-26T14:30:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt(1599775456731),
                        },
                    ],
                },
                {
                    start_at: "2020-11-26T15:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt(1599775456731),
                        },
                    ],
                },
                {
                    start_at: "2020-11-26T15:30:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt(1599775456731),
                        },
                    ],
                },
                {
                    start_at: "2020-11-26T16:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt(1599775456731),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T09:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMXUrsBWWcHTt79t",
                            service_variation_version: BigInt(1599775456731),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T09:30:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt(1599775456731),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T10:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMXUrsBWWcHTt79t",
                            service_variation_version: BigInt(1599775456731),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T10:30:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMXUrsBWWcHTt79t",
                            service_variation_version: BigInt(1599775456731),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T11:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMXUrsBWWcHTt79t",
                            service_variation_version: BigInt(1599775456731),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T11:30:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt(1599775456731),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T12:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt(1599775456731),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T12:30:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt(1599775456731),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T13:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMXUrsBWWcHTt79t",
                            service_variation_version: BigInt(1599775456731),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T13:30:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMXUrsBWWcHTt79t",
                            service_variation_version: BigInt(1599775456731),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T14:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt(1599775456731),
                        },
                    ],
                },
            ],
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/bookings/availability/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bookings.searchAvailability({
            query: {
                filter: {
                    start_at_range: {},
                },
            },
        });
        expect(response).toEqual({
            availabilities: [
                {
                    start_at: "2020-11-26T13:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMXUrsBWWcHTt79t",
                            service_variation_version: BigInt("1599775456731"),
                        },
                    ],
                },
                {
                    start_at: "2020-11-26T13:30:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMXUrsBWWcHTt79t",
                            service_variation_version: BigInt("1599775456731"),
                        },
                    ],
                },
                {
                    start_at: "2020-11-26T14:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt("1599775456731"),
                        },
                    ],
                },
                {
                    start_at: "2020-11-26T14:30:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt("1599775456731"),
                        },
                    ],
                },
                {
                    start_at: "2020-11-26T15:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt("1599775456731"),
                        },
                    ],
                },
                {
                    start_at: "2020-11-26T15:30:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt("1599775456731"),
                        },
                    ],
                },
                {
                    start_at: "2020-11-26T16:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt("1599775456731"),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T09:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMXUrsBWWcHTt79t",
                            service_variation_version: BigInt("1599775456731"),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T09:30:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt("1599775456731"),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T10:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMXUrsBWWcHTt79t",
                            service_variation_version: BigInt("1599775456731"),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T10:30:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMXUrsBWWcHTt79t",
                            service_variation_version: BigInt("1599775456731"),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T11:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMXUrsBWWcHTt79t",
                            service_variation_version: BigInt("1599775456731"),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T11:30:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt("1599775456731"),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T12:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt("1599775456731"),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T12:30:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt("1599775456731"),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T13:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMXUrsBWWcHTt79t",
                            service_variation_version: BigInt("1599775456731"),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T13:30:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMXUrsBWWcHTt79t",
                            service_variation_version: BigInt("1599775456731"),
                        },
                    ],
                },
                {
                    start_at: "2020-11-27T14:00:00Z",
                    location_id: "LEQHH0YY8B42M",
                    appointment_segments: [
                        {
                            duration_minutes: 60,
                            service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                            team_member_id: "TMaJcbiRqPIGZuS9",
                            service_variation_version: BigInt("1599775456731"),
                        },
                    ],
                },
            ],
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("BulkRetrieveBookings", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { booking_ids: ["booking_ids"] };
        const rawResponseBody = {
            bookings: {
                sc3p3m7dvctfr1: {
                    booking: {
                        id: "sc3p3m7dvctfr1",
                        version: 0,
                        status: "ACCEPTED",
                        created_at: "2023-04-26T18:19:21Z",
                        updated_at: "2023-04-26T18:19:21Z",
                        start_at: "2023-05-01T14:00:00Z",
                        location_id: "LY6WNBPVM6VGV",
                        customer_id: "4TDWKN9E8165X8Z77MRS0VFMJM",
                        appointment_segments: [
                            {
                                duration_minutes: 60,
                                service_variation_id: "VG4FYBKK3UL6UITOEYQ6MFLS",
                                team_member_id: "TMjiqI3PxyLMKr4k",
                                service_variation_version: BigInt(1641341724039),
                                any_team_member: false,
                            },
                        ],
                        all_day: false,
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                tdegug1dvctdef: {
                    errors: [
                        {
                            category: "INVALID_REQUEST_ERROR",
                            code: "NOT_FOUND",
                            detail: "Specified booking was not found.",
                            field: "booking_id",
                        },
                    ],
                },
                tdegug1fqni3wh: {
                    booking: {
                        id: "tdegug1fqni3wh",
                        version: 0,
                        status: "ACCEPTED",
                        created_at: "2023-04-26T18:19:30Z",
                        updated_at: "2023-04-26T18:19:30Z",
                        start_at: "2023-05-02T14:00:00Z",
                        location_id: "LY6WNBPVM6VGV",
                        customer_id: "4TDWKN9E8165X8Z77MRS0VFMJM",
                        appointment_segments: [
                            {
                                duration_minutes: 60,
                                service_variation_id: "VG4FYBKK3UL6UITOEYQ6MFLS",
                                team_member_id: "TMjiqI3PxyLMKr4k",
                                service_variation_version: BigInt(1641341724039),
                                any_team_member: false,
                            },
                        ],
                        all_day: false,
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/bookings/bulk-retrieve")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bookings.bulkRetrieveBookings({
            booking_ids: ["booking_ids"],
        });
        expect(response).toEqual({
            bookings: {
                sc3p3m7dvctfr1: {
                    booking: {
                        id: "sc3p3m7dvctfr1",
                        version: 0,
                        status: "ACCEPTED",
                        created_at: "2023-04-26T18:19:21Z",
                        updated_at: "2023-04-26T18:19:21Z",
                        start_at: "2023-05-01T14:00:00Z",
                        location_id: "LY6WNBPVM6VGV",
                        customer_id: "4TDWKN9E8165X8Z77MRS0VFMJM",
                        appointment_segments: [
                            {
                                duration_minutes: 60,
                                service_variation_id: "VG4FYBKK3UL6UITOEYQ6MFLS",
                                team_member_id: "TMjiqI3PxyLMKr4k",
                                service_variation_version: BigInt("1641341724039"),
                                any_team_member: false,
                            },
                        ],
                        all_day: false,
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                tdegug1dvctdef: {
                    errors: [
                        {
                            category: "INVALID_REQUEST_ERROR",
                            code: "NOT_FOUND",
                            detail: "Specified booking was not found.",
                            field: "booking_id",
                        },
                    ],
                },
                tdegug1fqni3wh: {
                    booking: {
                        id: "tdegug1fqni3wh",
                        version: 0,
                        status: "ACCEPTED",
                        created_at: "2023-04-26T18:19:30Z",
                        updated_at: "2023-04-26T18:19:30Z",
                        start_at: "2023-05-02T14:00:00Z",
                        location_id: "LY6WNBPVM6VGV",
                        customer_id: "4TDWKN9E8165X8Z77MRS0VFMJM",
                        appointment_segments: [
                            {
                                duration_minutes: 60,
                                service_variation_id: "VG4FYBKK3UL6UITOEYQ6MFLS",
                                team_member_id: "TMjiqI3PxyLMKr4k",
                                service_variation_version: BigInt("1641341724039"),
                                any_team_member: false,
                            },
                        ],
                        all_day: false,
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("getBusinessProfile", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            business_booking_profile: {
                seller_id: "MLJQYZZRM0D3Y",
                created_at: "2020-09-10T21:40:38Z",
                booking_enabled: true,
                customer_timezone_choice: "CUSTOMER_CHOICE",
                booking_policy: "ACCEPT_ALL",
                allow_user_cancel: true,
                business_appointment_settings: {
                    location_types: ["BUSINESS_LOCATION"],
                    alignment_time: "HALF_HOURLY",
                    min_booking_lead_time_seconds: 0,
                    max_booking_lead_time_seconds: 31536000,
                    any_team_member_booking_enabled: true,
                    multiple_service_booking_enabled: true,
                    max_appointments_per_day_limit_type: "PER_TEAM_MEMBER",
                    max_appointments_per_day_limit: 1,
                    cancellation_window_seconds: 1,
                    cancellation_fee_money: { currency: "USD" },
                    cancellation_policy: "CUSTOM_POLICY",
                    cancellation_policy_text: "cancellation_policy_text",
                    skip_booking_flow_staff_selection: false,
                },
                support_seller_level_writes: true,
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/bookings/business-booking-profile")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bookings.getBusinessProfile();
        expect(response).toEqual({
            business_booking_profile: {
                seller_id: "MLJQYZZRM0D3Y",
                created_at: "2020-09-10T21:40:38Z",
                booking_enabled: true,
                customer_timezone_choice: "CUSTOMER_CHOICE",
                booking_policy: "ACCEPT_ALL",
                allow_user_cancel: true,
                business_appointment_settings: {
                    location_types: ["BUSINESS_LOCATION"],
                    alignment_time: "HALF_HOURLY",
                    min_booking_lead_time_seconds: 0,
                    max_booking_lead_time_seconds: 31536000,
                    any_team_member_booking_enabled: true,
                    multiple_service_booking_enabled: true,
                    max_appointments_per_day_limit_type: "PER_TEAM_MEMBER",
                    max_appointments_per_day_limit: 1,
                    cancellation_window_seconds: 1,
                    cancellation_fee_money: {
                        currency: "USD",
                    },
                    cancellation_policy: "CUSTOM_POLICY",
                    cancellation_policy_text: "cancellation_policy_text",
                    skip_booking_flow_staff_selection: false,
                },
                support_seller_level_writes: true,
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("RetrieveLocationBookingProfile", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            location_booking_profile: {
                location_id: "L3HETDGYQ4A2C",
                booking_site_url: "https://square.site/book/L3HETDGYQ4A2C/prod-business",
                online_booking_enabled: true,
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/bookings/location-booking-profiles/location_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bookings.retrieveLocationBookingProfile({
            location_id: "location_id",
        });
        expect(response).toEqual({
            location_booking_profile: {
                location_id: "L3HETDGYQ4A2C",
                booking_site_url: "https://square.site/book/L3HETDGYQ4A2C/prod-business",
                online_booking_enabled: true,
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("BulkRetrieveTeamMemberBookingProfiles", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { team_member_ids: ["team_member_ids"] };
        const rawResponseBody = {
            team_member_booking_profiles: {
                TMXUrsBWWcHTt79t: {
                    errors: [{ category: "INVALID_REQUEST_ERROR", code: "NOT_FOUND", detail: "Resource not found." }],
                },
                TMaJcbiRqPIGZuS9: {
                    team_member_booking_profile: {
                        team_member_id: "TMaJcbiRqPIGZuS9",
                        display_name: "Sandbox Staff 1",
                        is_bookable: true,
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                TMtdegug1fqni3wh: {
                    team_member_booking_profile: {
                        team_member_id: "TMtdegug1fqni3wh",
                        display_name: "Sandbox Staff 2",
                        is_bookable: true,
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/bookings/team-member-booking-profiles/bulk-retrieve")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bookings.bulkRetrieveTeamMemberBookingProfiles({
            team_member_ids: ["team_member_ids"],
        });
        expect(response).toEqual({
            team_member_booking_profiles: {
                TMXUrsBWWcHTt79t: {
                    errors: [
                        {
                            category: "INVALID_REQUEST_ERROR",
                            code: "NOT_FOUND",
                            detail: "Resource not found.",
                        },
                    ],
                },
                TMaJcbiRqPIGZuS9: {
                    team_member_booking_profile: {
                        team_member_id: "TMaJcbiRqPIGZuS9",
                        display_name: "Sandbox Staff 1",
                        is_bookable: true,
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                TMtdegug1fqni3wh: {
                    team_member_booking_profile: {
                        team_member_id: "TMtdegug1fqni3wh",
                        display_name: "Sandbox Staff 2",
                        is_bookable: true,
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            booking: {
                id: "zkras0xv0xwswx",
                version: 1,
                status: "ACCEPTED",
                created_at: "2020-10-28T15:47:41Z",
                updated_at: "2020-10-28T15:49:25Z",
                start_at: "2020-11-26T13:00:00Z",
                location_id: "LEQHH0YY8B42M",
                customer_id: "EX2QSVGTZN4K1E5QE1CBFNVQ8M",
                customer_note: "",
                seller_note: "",
                appointment_segments: [
                    {
                        duration_minutes: 60,
                        service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                        team_member_id: "TMXUrsBWWcHTt79t",
                        service_variation_version: BigInt(1599775456731),
                    },
                ],
                transition_time_minutes: 1,
                all_day: true,
                location_type: "BUSINESS_LOCATION",
                creator_details: {
                    creator_type: "TEAM_MEMBER",
                    team_member_id: "team_member_id",
                    customer_id: "customer_id",
                },
                source: "FIRST_PARTY_MERCHANT",
                address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/bookings/booking_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bookings.get({
            booking_id: "booking_id",
        });
        expect(response).toEqual({
            booking: {
                id: "zkras0xv0xwswx",
                version: 1,
                status: "ACCEPTED",
                created_at: "2020-10-28T15:47:41Z",
                updated_at: "2020-10-28T15:49:25Z",
                start_at: "2020-11-26T13:00:00Z",
                location_id: "LEQHH0YY8B42M",
                customer_id: "EX2QSVGTZN4K1E5QE1CBFNVQ8M",
                customer_note: "",
                seller_note: "",
                appointment_segments: [
                    {
                        duration_minutes: 60,
                        service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                        team_member_id: "TMXUrsBWWcHTt79t",
                        service_variation_version: BigInt("1599775456731"),
                    },
                ],
                transition_time_minutes: 1,
                all_day: true,
                location_type: "BUSINESS_LOCATION",
                creator_details: {
                    creator_type: "TEAM_MEMBER",
                    team_member_id: "team_member_id",
                    customer_id: "customer_id",
                },
                source: "FIRST_PARTY_MERCHANT",
                address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { booking: {} };
        const rawResponseBody = {
            booking: {
                id: "zkras0xv0xwswx",
                version: 2,
                status: "ACCEPTED",
                created_at: "2020-10-28T15:47:41Z",
                updated_at: "2020-10-28T15:49:25Z",
                start_at: "2020-11-26T13:00:00Z",
                location_id: "LEQHH0YY8B42M",
                customer_id: "EX2QSVGTZN4K1E5QE1CBFNVQ8M",
                customer_note: "I would like to sit near the window please",
                seller_note: "",
                appointment_segments: [
                    {
                        duration_minutes: 60,
                        service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                        team_member_id: "TMXUrsBWWcHTt79t",
                        service_variation_version: BigInt(1599775456731),
                    },
                ],
                transition_time_minutes: 1,
                all_day: true,
                location_type: "CUSTOMER_LOCATION",
                creator_details: {
                    creator_type: "TEAM_MEMBER",
                    team_member_id: "team_member_id",
                    customer_id: "customer_id",
                },
                source: "FIRST_PARTY_MERCHANT",
                address: {
                    address_line_1: "1955 Broadway",
                    address_line_2: "Suite 600",
                    address_line_3: "address_line_3",
                    locality: "Oakland",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "CA",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "94612",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .put("/v2/bookings/booking_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bookings.update({
            booking_id: "booking_id",
            booking: {},
        });
        expect(response).toEqual({
            booking: {
                id: "zkras0xv0xwswx",
                version: 2,
                status: "ACCEPTED",
                created_at: "2020-10-28T15:47:41Z",
                updated_at: "2020-10-28T15:49:25Z",
                start_at: "2020-11-26T13:00:00Z",
                location_id: "LEQHH0YY8B42M",
                customer_id: "EX2QSVGTZN4K1E5QE1CBFNVQ8M",
                customer_note: "I would like to sit near the window please",
                seller_note: "",
                appointment_segments: [
                    {
                        duration_minutes: 60,
                        service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                        team_member_id: "TMXUrsBWWcHTt79t",
                        service_variation_version: BigInt("1599775456731"),
                    },
                ],
                transition_time_minutes: 1,
                all_day: true,
                location_type: "CUSTOMER_LOCATION",
                creator_details: {
                    creator_type: "TEAM_MEMBER",
                    team_member_id: "team_member_id",
                    customer_id: "customer_id",
                },
                source: "FIRST_PARTY_MERCHANT",
                address: {
                    address_line_1: "1955 Broadway",
                    address_line_2: "Suite 600",
                    address_line_3: "address_line_3",
                    locality: "Oakland",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "CA",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "94612",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("cancel", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            booking: {
                id: "zkras0xv0xwswx",
                version: 1,
                status: "CANCELLED_BY_CUSTOMER",
                created_at: "2020-10-28T15:47:41Z",
                updated_at: "2020-10-28T15:49:25Z",
                start_at: "2020-11-26T13:00:00Z",
                location_id: "LEQHH0YY8B42M",
                customer_id: "EX2QSVGTZN4K1E5QE1CBFNVQ8M",
                customer_note: "",
                seller_note: "",
                appointment_segments: [
                    {
                        duration_minutes: 60,
                        service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                        team_member_id: "TMXUrsBWWcHTt79t",
                        service_variation_version: BigInt(1599775456731),
                    },
                ],
                transition_time_minutes: 1,
                all_day: true,
                location_type: "BUSINESS_LOCATION",
                creator_details: {
                    creator_type: "TEAM_MEMBER",
                    team_member_id: "team_member_id",
                    customer_id: "customer_id",
                },
                source: "FIRST_PARTY_MERCHANT",
                address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/bookings/booking_id/cancel")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bookings.cancel({
            booking_id: "booking_id",
        });
        expect(response).toEqual({
            booking: {
                id: "zkras0xv0xwswx",
                version: 1,
                status: "CANCELLED_BY_CUSTOMER",
                created_at: "2020-10-28T15:47:41Z",
                updated_at: "2020-10-28T15:49:25Z",
                start_at: "2020-11-26T13:00:00Z",
                location_id: "LEQHH0YY8B42M",
                customer_id: "EX2QSVGTZN4K1E5QE1CBFNVQ8M",
                customer_note: "",
                seller_note: "",
                appointment_segments: [
                    {
                        duration_minutes: 60,
                        service_variation_id: "RU3PBTZTK7DXZDQFCJHOK2MC",
                        team_member_id: "TMXUrsBWWcHTt79t",
                        service_variation_version: BigInt("1599775456731"),
                    },
                ],
                transition_time_minutes: 1,
                all_day: true,
                location_type: "BUSINESS_LOCATION",
                creator_details: {
                    creator_type: "TEAM_MEMBER",
                    team_member_id: "team_member_id",
                    customer_id: "customer_id",
                },
                source: "FIRST_PARTY_MERCHANT",
                address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
