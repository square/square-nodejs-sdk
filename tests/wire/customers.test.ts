/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SquareClient } from "../../src/Client";

describe("Customers", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            given_name: "Amelia",
            family_name: "Earhart",
            email_address: "Amelia.Earhart@example.com",
            address: {
                address_line_1: "500 Electric Ave",
                address_line_2: "Suite 600",
                locality: "New York",
                administrative_district_level_1: "NY",
                postal_code: "10003",
                country: "US",
            },
            phone_number: "+1-212-555-4240",
            reference_id: "YOUR_REFERENCE_ID",
            note: "a customer",
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            customer: {
                id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                created_at: "2016-03-23T20:21:54.859Z",
                updated_at: "2016-03-23T20:21:54.859Z",
                given_name: "Amelia",
                family_name: "Earhart",
                nickname: "nickname",
                company_name: "company_name",
                email_address: "Amelia.Earhart@example.com",
                address: {
                    address_line_1: "500 Electric Ave",
                    address_line_2: "Suite 600",
                    address_line_3: "address_line_3",
                    locality: "New York",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "NY",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "10003",
                    country: "US",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                phone_number: "+1-212-555-4240",
                birthday: "birthday",
                reference_id: "YOUR_REFERENCE_ID",
                note: "a customer",
                preferences: { email_unsubscribed: false },
                creation_source: "THIRD_PARTY",
                group_ids: ["group_ids"],
                segment_ids: ["segment_ids"],
                version: BigInt(0),
                tax_ids: { eu_vat: "eu_vat" },
            },
        };
        server
            .mockEndpoint()
            .post("/v2/customers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.create({
            givenName: "Amelia",
            familyName: "Earhart",
            emailAddress: "Amelia.Earhart@example.com",
            address: {
                addressLine1: "500 Electric Ave",
                addressLine2: "Suite 600",
                locality: "New York",
                administrativeDistrictLevel1: "NY",
                postalCode: "10003",
                country: "US",
            },
            phoneNumber: "+1-212-555-4240",
            referenceId: "YOUR_REFERENCE_ID",
            note: "a customer",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            customer: {
                id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                createdAt: "2016-03-23T20:21:54.859Z",
                updatedAt: "2016-03-23T20:21:54.859Z",
                givenName: "Amelia",
                familyName: "Earhart",
                nickname: "nickname",
                companyName: "company_name",
                emailAddress: "Amelia.Earhart@example.com",
                address: {
                    addressLine1: "500 Electric Ave",
                    addressLine2: "Suite 600",
                    addressLine3: "address_line_3",
                    locality: "New York",
                    sublocality: "sublocality",
                    sublocality2: "sublocality_2",
                    sublocality3: "sublocality_3",
                    administrativeDistrictLevel1: "NY",
                    administrativeDistrictLevel2: "administrative_district_level_2",
                    administrativeDistrictLevel3: "administrative_district_level_3",
                    postalCode: "10003",
                    country: "US",
                    firstName: "first_name",
                    lastName: "last_name",
                },
                phoneNumber: "+1-212-555-4240",
                birthday: "birthday",
                referenceId: "YOUR_REFERENCE_ID",
                note: "a customer",
                preferences: {
                    emailUnsubscribed: false,
                },
                creationSource: "THIRD_PARTY",
                groupIds: ["group_ids"],
                segmentIds: ["segment_ids"],
                version: BigInt("0"),
                taxIds: {
                    euVat: "eu_vat",
                },
            },
        });
    });

    test("batchCreate", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customers: {
                "8bb76c4f-e35d-4c5b-90de-1194cd9179f0": {
                    given_name: "Amelia",
                    family_name: "Earhart",
                    email_address: "Amelia.Earhart@example.com",
                    address: {
                        address_line_1: "500 Electric Ave",
                        address_line_2: "Suite 600",
                        locality: "New York",
                        administrative_district_level_1: "NY",
                        postal_code: "10003",
                        country: "US",
                    },
                    phone_number: "+1-212-555-4240",
                    reference_id: "YOUR_REFERENCE_ID",
                    note: "a customer",
                },
                "d1689f23-b25d-4932-b2f0-aed00f5e2029": {
                    given_name: "Marie",
                    family_name: "Curie",
                    email_address: "Marie.Curie@example.com",
                    address: {
                        address_line_1: "500 Electric Ave",
                        address_line_2: "Suite 601",
                        locality: "New York",
                        administrative_district_level_1: "NY",
                        postal_code: "10003",
                        country: "US",
                    },
                    phone_number: "+1-212-444-4240",
                    reference_id: "YOUR_REFERENCE_ID",
                    note: "another customer",
                },
            },
        };
        const rawResponseBody = {
            responses: {
                "8bb76c4f-e35d-4c5b-90de-1194cd9179f4": {
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                    customer: {
                        id: "8DDA5NZVBZFGAX0V3HPF81HHE0",
                        created_at: "2024-03-23T20:21:54.859Z",
                        updated_at: "2024-03-23T20:21:54.859Z",
                        given_name: "Amelia",
                        family_name: "Earhart",
                        email_address: "Amelia.Earhart@example.com",
                        address: {
                            address_line_1: "500 Electric Ave",
                            address_line_2: "Suite 600",
                            locality: "New York",
                            administrative_district_level_1: "NY",
                            postal_code: "10003",
                            country: "US",
                        },
                        phone_number: "+1-212-555-4240",
                        reference_id: "YOUR_REFERENCE_ID",
                        note: "a customer",
                        preferences: { email_unsubscribed: false },
                        creation_source: "THIRD_PARTY",
                        version: BigInt(0),
                    },
                },
                "d1689f23-b25d-4932-b2f0-aed00f5e2029": {
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                    customer: {
                        id: "N18CPRVXR5214XPBBA6BZQWF3C",
                        created_at: "2024-03-23T20:21:54.859Z",
                        updated_at: "2024-03-23T20:21:54.859Z",
                        given_name: "Marie",
                        family_name: "Curie",
                        email_address: "Marie.Curie@example.com",
                        address: {
                            address_line_1: "500 Electric Ave",
                            address_line_2: "Suite 601",
                            locality: "New York",
                            administrative_district_level_1: "NY",
                            postal_code: "10003",
                            country: "US",
                        },
                        phone_number: "+1-212-444-4240",
                        reference_id: "YOUR_REFERENCE_ID",
                        note: "another customer",
                        preferences: { email_unsubscribed: false },
                        creation_source: "THIRD_PARTY",
                        version: BigInt(0),
                    },
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/customers/bulk-create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.batchCreate({
            customers: {
                "8bb76c4f-e35d-4c5b-90de-1194cd9179f0": {
                    givenName: "Amelia",
                    familyName: "Earhart",
                    emailAddress: "Amelia.Earhart@example.com",
                    address: {
                        addressLine1: "500 Electric Ave",
                        addressLine2: "Suite 600",
                        locality: "New York",
                        administrativeDistrictLevel1: "NY",
                        postalCode: "10003",
                        country: "US",
                    },
                    phoneNumber: "+1-212-555-4240",
                    referenceId: "YOUR_REFERENCE_ID",
                    note: "a customer",
                },
                "d1689f23-b25d-4932-b2f0-aed00f5e2029": {
                    givenName: "Marie",
                    familyName: "Curie",
                    emailAddress: "Marie.Curie@example.com",
                    address: {
                        addressLine1: "500 Electric Ave",
                        addressLine2: "Suite 601",
                        locality: "New York",
                        administrativeDistrictLevel1: "NY",
                        postalCode: "10003",
                        country: "US",
                    },
                    phoneNumber: "+1-212-444-4240",
                    referenceId: "YOUR_REFERENCE_ID",
                    note: "another customer",
                },
            },
        });
        expect(response).toEqual({
            responses: {
                "8bb76c4f-e35d-4c5b-90de-1194cd9179f4": {
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                    customer: {
                        id: "8DDA5NZVBZFGAX0V3HPF81HHE0",
                        createdAt: "2024-03-23T20:21:54.859Z",
                        updatedAt: "2024-03-23T20:21:54.859Z",
                        givenName: "Amelia",
                        familyName: "Earhart",
                        emailAddress: "Amelia.Earhart@example.com",
                        address: {
                            addressLine1: "500 Electric Ave",
                            addressLine2: "Suite 600",
                            locality: "New York",
                            administrativeDistrictLevel1: "NY",
                            postalCode: "10003",
                            country: "US",
                        },
                        phoneNumber: "+1-212-555-4240",
                        referenceId: "YOUR_REFERENCE_ID",
                        note: "a customer",
                        preferences: {
                            emailUnsubscribed: false,
                        },
                        creationSource: "THIRD_PARTY",
                        version: BigInt("0"),
                    },
                },
                "d1689f23-b25d-4932-b2f0-aed00f5e2029": {
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                    customer: {
                        id: "N18CPRVXR5214XPBBA6BZQWF3C",
                        createdAt: "2024-03-23T20:21:54.859Z",
                        updatedAt: "2024-03-23T20:21:54.859Z",
                        givenName: "Marie",
                        familyName: "Curie",
                        emailAddress: "Marie.Curie@example.com",
                        address: {
                            addressLine1: "500 Electric Ave",
                            addressLine2: "Suite 601",
                            locality: "New York",
                            administrativeDistrictLevel1: "NY",
                            postalCode: "10003",
                            country: "US",
                        },
                        phoneNumber: "+1-212-444-4240",
                        referenceId: "YOUR_REFERENCE_ID",
                        note: "another customer",
                        preferences: {
                            emailUnsubscribed: false,
                        },
                        creationSource: "THIRD_PARTY",
                        version: BigInt("0"),
                    },
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("BulkDeleteCustomers", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customer_ids: ["8DDA5NZVBZFGAX0V3HPF81HHE0", "N18CPRVXR5214XPBBA6BZQWF3C", "2GYD7WNXF7BJZW1PMGNXZ3Y8M8"],
        };
        const rawResponseBody = {
            responses: {
                "2GYD7WNXF7BJZW1PMGNXZ3Y8M8": {
                    errors: [
                        {
                            category: "INVALID_REQUEST_ERROR",
                            code: "NOT_FOUND",
                            detail: "Customer with ID `2GYD7WNXF7BJZW1PMGNXZ3Y8M8` not found.",
                        },
                    ],
                },
                "8DDA5NZVBZFGAX0V3HPF81HHE0": { errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }] },
                N18CPRVXR5214XPBBA6BZQWF3C: { errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }] },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/customers/bulk-delete")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.bulkDeleteCustomers({
            customerIds: ["8DDA5NZVBZFGAX0V3HPF81HHE0", "N18CPRVXR5214XPBBA6BZQWF3C", "2GYD7WNXF7BJZW1PMGNXZ3Y8M8"],
        });
        expect(response).toEqual({
            responses: {
                "2GYD7WNXF7BJZW1PMGNXZ3Y8M8": {
                    errors: [
                        {
                            category: "INVALID_REQUEST_ERROR",
                            code: "NOT_FOUND",
                            detail: "Customer with ID `2GYD7WNXF7BJZW1PMGNXZ3Y8M8` not found.",
                        },
                    ],
                },
                "8DDA5NZVBZFGAX0V3HPF81HHE0": {
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                N18CPRVXR5214XPBBA6BZQWF3C: {
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("BulkRetrieveCustomers", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customer_ids: ["8DDA5NZVBZFGAX0V3HPF81HHE0", "N18CPRVXR5214XPBBA6BZQWF3C", "2GYD7WNXF7BJZW1PMGNXZ3Y8M8"],
        };
        const rawResponseBody = {
            responses: {
                "2GYD7WNXF7BJZW1PMGNXZ3Y8M8": {
                    errors: [
                        {
                            category: "INVALID_REQUEST_ERROR",
                            code: "NOT_FOUND",
                            detail: "Customer with ID `2GYD7WNXF7BJZW1PMGNXZ3Y8M8` not found.",
                        },
                    ],
                },
                "8DDA5NZVBZFGAX0V3HPF81HHE0": {
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                    customer: {
                        id: "8DDA5NZVBZFGAX0V3HPF81HHE0",
                        created_at: "2024-01-19T00:27:54.59Z",
                        updated_at: "2024-01-19T00:38:06Z",
                        given_name: "Amelia",
                        family_name: "Earhart",
                        email_address: "New.Amelia.Earhart@example.com",
                        birthday: "1897-07-24",
                        note: "updated customer note",
                        preferences: { email_unsubscribed: false },
                        creation_source: "THIRD_PARTY",
                        version: BigInt(3),
                    },
                },
                N18CPRVXR5214XPBBA6BZQWF3C: {
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                    customer: {
                        id: "N18CPRVXR5214XPBBA6BZQWF3C",
                        created_at: "2024-01-19T00:27:54.59Z",
                        updated_at: "2024-01-19T00:38:06Z",
                        given_name: "Marie",
                        family_name: "Curie",
                        preferences: { email_unsubscribed: false },
                        creation_source: "THIRD_PARTY",
                        version: BigInt(1),
                    },
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/customers/bulk-retrieve")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.bulkRetrieveCustomers({
            customerIds: ["8DDA5NZVBZFGAX0V3HPF81HHE0", "N18CPRVXR5214XPBBA6BZQWF3C", "2GYD7WNXF7BJZW1PMGNXZ3Y8M8"],
        });
        expect(response).toEqual({
            responses: {
                "2GYD7WNXF7BJZW1PMGNXZ3Y8M8": {
                    errors: [
                        {
                            category: "INVALID_REQUEST_ERROR",
                            code: "NOT_FOUND",
                            detail: "Customer with ID `2GYD7WNXF7BJZW1PMGNXZ3Y8M8` not found.",
                        },
                    ],
                },
                "8DDA5NZVBZFGAX0V3HPF81HHE0": {
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                    customer: {
                        id: "8DDA5NZVBZFGAX0V3HPF81HHE0",
                        createdAt: "2024-01-19T00:27:54.59Z",
                        updatedAt: "2024-01-19T00:38:06Z",
                        givenName: "Amelia",
                        familyName: "Earhart",
                        emailAddress: "New.Amelia.Earhart@example.com",
                        birthday: "1897-07-24",
                        note: "updated customer note",
                        preferences: {
                            emailUnsubscribed: false,
                        },
                        creationSource: "THIRD_PARTY",
                        version: BigInt("3"),
                    },
                },
                N18CPRVXR5214XPBBA6BZQWF3C: {
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                    customer: {
                        id: "N18CPRVXR5214XPBBA6BZQWF3C",
                        createdAt: "2024-01-19T00:27:54.59Z",
                        updatedAt: "2024-01-19T00:38:06Z",
                        givenName: "Marie",
                        familyName: "Curie",
                        preferences: {
                            emailUnsubscribed: false,
                        },
                        creationSource: "THIRD_PARTY",
                        version: BigInt("1"),
                    },
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("BulkUpdateCustomers", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customers: {
                "8DDA5NZVBZFGAX0V3HPF81HHE0": {
                    email_address: "New.Amelia.Earhart@example.com",
                    note: "updated customer note",
                    version: BigInt(2),
                },
                N18CPRVXR5214XPBBA6BZQWF3C: { given_name: "Marie", family_name: "Curie", version: BigInt(0) },
            },
        };
        const rawResponseBody = {
            responses: {
                "8DDA5NZVBZFGAX0V3HPF81HHE0": {
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                    customer: {
                        id: "8DDA5NZVBZFGAX0V3HPF81HHE0",
                        created_at: "2024-01-19T00:27:54.59Z",
                        updated_at: "2024-01-19T00:38:06Z",
                        given_name: "Amelia",
                        family_name: "Earhart",
                        email_address: "New.Amelia.Earhart@example.com",
                        birthday: "1897-07-24",
                        note: "updated customer note",
                        preferences: { email_unsubscribed: false },
                        creation_source: "THIRD_PARTY",
                        version: BigInt(3),
                    },
                },
                N18CPRVXR5214XPBBA6BZQWF3C: {
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                    customer: {
                        id: "N18CPRVXR5214XPBBA6BZQWF3C",
                        created_at: "2024-01-19T00:27:54.59Z",
                        updated_at: "2024-01-19T00:38:06Z",
                        given_name: "Marie",
                        family_name: "Curie",
                        preferences: { email_unsubscribed: false },
                        creation_source: "THIRD_PARTY",
                        version: BigInt(1),
                    },
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/customers/bulk-update")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.bulkUpdateCustomers({
            customers: {
                "8DDA5NZVBZFGAX0V3HPF81HHE0": {
                    emailAddress: "New.Amelia.Earhart@example.com",
                    note: "updated customer note",
                    version: BigInt("2"),
                },
                N18CPRVXR5214XPBBA6BZQWF3C: {
                    givenName: "Marie",
                    familyName: "Curie",
                    version: BigInt("0"),
                },
            },
        });
        expect(response).toEqual({
            responses: {
                "8DDA5NZVBZFGAX0V3HPF81HHE0": {
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                    customer: {
                        id: "8DDA5NZVBZFGAX0V3HPF81HHE0",
                        createdAt: "2024-01-19T00:27:54.59Z",
                        updatedAt: "2024-01-19T00:38:06Z",
                        givenName: "Amelia",
                        familyName: "Earhart",
                        emailAddress: "New.Amelia.Earhart@example.com",
                        birthday: "1897-07-24",
                        note: "updated customer note",
                        preferences: {
                            emailUnsubscribed: false,
                        },
                        creationSource: "THIRD_PARTY",
                        version: BigInt("3"),
                    },
                },
                N18CPRVXR5214XPBBA6BZQWF3C: {
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                    customer: {
                        id: "N18CPRVXR5214XPBBA6BZQWF3C",
                        createdAt: "2024-01-19T00:27:54.59Z",
                        updatedAt: "2024-01-19T00:38:06Z",
                        givenName: "Marie",
                        familyName: "Curie",
                        preferences: {
                            emailUnsubscribed: false,
                        },
                        creationSource: "THIRD_PARTY",
                        version: BigInt("1"),
                    },
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("search", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            limit: BigInt(2),
            query: {
                filter: {
                    creation_source: { values: ["THIRD_PARTY"], rule: "INCLUDE" },
                    created_at: { start_at: "2018-01-01T00:00:00-00:00", end_at: "2018-02-01T00:00:00-00:00" },
                    email_address: { fuzzy: "example.com" },
                    group_ids: { all: ["545AXB44B4XXWMVQ4W8SBT3HHF"] },
                },
                sort: { field: "CREATED_AT", order: "ASC" },
            },
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            customers: [
                {
                    id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                    created_at: "2018-01-23T20:21:54.859Z",
                    updated_at: "2020-04-20T10:02:43.083Z",
                    given_name: "James",
                    family_name: "Bond",
                    nickname: "nickname",
                    company_name: "company_name",
                    email_address: "james.bond@example.com",
                    address: {
                        address_line_1: "505 Electric Ave",
                        address_line_2: "Suite 600",
                        locality: "New York",
                        administrative_district_level_1: "NY",
                        postal_code: "10003",
                        country: "US",
                    },
                    phone_number: "+1-212-555-4250",
                    birthday: "birthday",
                    reference_id: "YOUR_REFERENCE_ID_2",
                    note: "note",
                    preferences: { email_unsubscribed: false },
                    creation_source: "DIRECTORY",
                    group_ids: ["545AXB44B4XXWMVQ4W8SBT3HHF"],
                    segment_ids: ["1KB9JE5EGJXCW.REACHABLE"],
                    version: BigInt(7),
                },
                {
                    id: "A9641GZW2H7Z56YYSD41Q12HDW",
                    created_at: "2018-01-30T14:10:54.859Z",
                    updated_at: "2018-03-08T18:25:21.342Z",
                    given_name: "Amelia",
                    family_name: "Earhart",
                    nickname: "nickname",
                    company_name: "company_name",
                    email_address: "amelia.earhart@example.com",
                    address: {
                        address_line_1: "500 Electric Ave",
                        address_line_2: "Suite 600",
                        locality: "New York",
                        administrative_district_level_1: "NY",
                        postal_code: "10003",
                        country: "US",
                    },
                    phone_number: "+1-212-555-9238",
                    birthday: "birthday",
                    reference_id: "YOUR_REFERENCE_ID_1",
                    note: "a customer",
                    preferences: { email_unsubscribed: false },
                    creation_source: "THIRD_PARTY",
                    group_ids: ["545AXB44B4XXWMVQ4W8SBT3HHF"],
                    segment_ids: ["1KB9JE5EGJXCW.REACHABLE"],
                    version: BigInt(1),
                },
            ],
            cursor: "9dpS093Uy12AzeE",
            count: BigInt(1000000),
        };
        server
            .mockEndpoint()
            .post("/v2/customers/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.search({
            limit: BigInt("2"),
            query: {
                filter: {
                    creationSource: {
                        values: ["THIRD_PARTY"],
                        rule: "INCLUDE",
                    },
                    createdAt: {
                        startAt: "2018-01-01T00:00:00-00:00",
                        endAt: "2018-02-01T00:00:00-00:00",
                    },
                    emailAddress: {
                        fuzzy: "example.com",
                    },
                    groupIds: {
                        all: ["545AXB44B4XXWMVQ4W8SBT3HHF"],
                    },
                },
                sort: {
                    field: "CREATED_AT",
                    order: "ASC",
                },
            },
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            customers: [
                {
                    id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                    createdAt: "2018-01-23T20:21:54.859Z",
                    updatedAt: "2020-04-20T10:02:43.083Z",
                    givenName: "James",
                    familyName: "Bond",
                    nickname: "nickname",
                    companyName: "company_name",
                    emailAddress: "james.bond@example.com",
                    address: {
                        addressLine1: "505 Electric Ave",
                        addressLine2: "Suite 600",
                        locality: "New York",
                        administrativeDistrictLevel1: "NY",
                        postalCode: "10003",
                        country: "US",
                    },
                    phoneNumber: "+1-212-555-4250",
                    birthday: "birthday",
                    referenceId: "YOUR_REFERENCE_ID_2",
                    note: "note",
                    preferences: {
                        emailUnsubscribed: false,
                    },
                    creationSource: "DIRECTORY",
                    groupIds: ["545AXB44B4XXWMVQ4W8SBT3HHF"],
                    segmentIds: ["1KB9JE5EGJXCW.REACHABLE"],
                    version: BigInt("7"),
                },
                {
                    id: "A9641GZW2H7Z56YYSD41Q12HDW",
                    createdAt: "2018-01-30T14:10:54.859Z",
                    updatedAt: "2018-03-08T18:25:21.342Z",
                    givenName: "Amelia",
                    familyName: "Earhart",
                    nickname: "nickname",
                    companyName: "company_name",
                    emailAddress: "amelia.earhart@example.com",
                    address: {
                        addressLine1: "500 Electric Ave",
                        addressLine2: "Suite 600",
                        locality: "New York",
                        administrativeDistrictLevel1: "NY",
                        postalCode: "10003",
                        country: "US",
                    },
                    phoneNumber: "+1-212-555-9238",
                    birthday: "birthday",
                    referenceId: "YOUR_REFERENCE_ID_1",
                    note: "a customer",
                    preferences: {
                        emailUnsubscribed: false,
                    },
                    creationSource: "THIRD_PARTY",
                    groupIds: ["545AXB44B4XXWMVQ4W8SBT3HHF"],
                    segmentIds: ["1KB9JE5EGJXCW.REACHABLE"],
                    version: BigInt("1"),
                },
            ],
            cursor: "9dpS093Uy12AzeE",
            count: BigInt("1000000"),
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            customer: {
                id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                created_at: "2016-03-23T20:21:54.859Z",
                updated_at: "2016-03-23T20:21:54.859Z",
                given_name: "Amelia",
                family_name: "Earhart",
                nickname: "nickname",
                company_name: "company_name",
                email_address: "Amelia.Earhart@example.com",
                address: {
                    address_line_1: "500 Electric Ave",
                    address_line_2: "Suite 600",
                    address_line_3: "address_line_3",
                    locality: "New York",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "NY",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "10003",
                    country: "US",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                phone_number: "+1-212-555-4240",
                birthday: "birthday",
                reference_id: "YOUR_REFERENCE_ID",
                note: "a customer",
                preferences: { email_unsubscribed: false },
                creation_source: "THIRD_PARTY",
                group_ids: ["545AXB44B4XXWMVQ4W8SBT3HHF"],
                segment_ids: ["1KB9JE5EGJXCW.REACHABLE"],
                version: BigInt(1),
                tax_ids: { eu_vat: "eu_vat" },
            },
        };
        server
            .mockEndpoint()
            .get("/v2/customers/customer_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.get({
            customerId: "customer_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            customer: {
                id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                createdAt: "2016-03-23T20:21:54.859Z",
                updatedAt: "2016-03-23T20:21:54.859Z",
                givenName: "Amelia",
                familyName: "Earhart",
                nickname: "nickname",
                companyName: "company_name",
                emailAddress: "Amelia.Earhart@example.com",
                address: {
                    addressLine1: "500 Electric Ave",
                    addressLine2: "Suite 600",
                    addressLine3: "address_line_3",
                    locality: "New York",
                    sublocality: "sublocality",
                    sublocality2: "sublocality_2",
                    sublocality3: "sublocality_3",
                    administrativeDistrictLevel1: "NY",
                    administrativeDistrictLevel2: "administrative_district_level_2",
                    administrativeDistrictLevel3: "administrative_district_level_3",
                    postalCode: "10003",
                    country: "US",
                    firstName: "first_name",
                    lastName: "last_name",
                },
                phoneNumber: "+1-212-555-4240",
                birthday: "birthday",
                referenceId: "YOUR_REFERENCE_ID",
                note: "a customer",
                preferences: {
                    emailUnsubscribed: false,
                },
                creationSource: "THIRD_PARTY",
                groupIds: ["545AXB44B4XXWMVQ4W8SBT3HHF"],
                segmentIds: ["1KB9JE5EGJXCW.REACHABLE"],
                version: BigInt("1"),
                taxIds: {
                    euVat: "eu_vat",
                },
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            email_address: "New.Amelia.Earhart@example.com",
            note: "updated customer note",
            version: BigInt(2),
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            customer: {
                id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                created_at: "2016-03-23T20:21:54.859Z",
                updated_at: "2016-05-15T20:21:55Z",
                given_name: "Amelia",
                family_name: "Earhart",
                nickname: "nickname",
                company_name: "company_name",
                email_address: "New.Amelia.Earhart@example.com",
                address: {
                    address_line_1: "500 Electric Ave",
                    address_line_2: "Suite 600",
                    address_line_3: "address_line_3",
                    locality: "New York",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "NY",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "10003",
                    country: "US",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                phone_number: "phone_number",
                birthday: "birthday",
                reference_id: "YOUR_REFERENCE_ID",
                note: "updated customer note",
                preferences: { email_unsubscribed: false },
                creation_source: "THIRD_PARTY",
                group_ids: ["group_ids"],
                segment_ids: ["segment_ids"],
                version: BigInt(3),
                tax_ids: { eu_vat: "eu_vat" },
            },
        };
        server
            .mockEndpoint()
            .put("/v2/customers/customer_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.update({
            customerId: "customer_id",
            emailAddress: "New.Amelia.Earhart@example.com",
            note: "updated customer note",
            version: BigInt("2"),
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            customer: {
                id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                createdAt: "2016-03-23T20:21:54.859Z",
                updatedAt: "2016-05-15T20:21:55Z",
                givenName: "Amelia",
                familyName: "Earhart",
                nickname: "nickname",
                companyName: "company_name",
                emailAddress: "New.Amelia.Earhart@example.com",
                address: {
                    addressLine1: "500 Electric Ave",
                    addressLine2: "Suite 600",
                    addressLine3: "address_line_3",
                    locality: "New York",
                    sublocality: "sublocality",
                    sublocality2: "sublocality_2",
                    sublocality3: "sublocality_3",
                    administrativeDistrictLevel1: "NY",
                    administrativeDistrictLevel2: "administrative_district_level_2",
                    administrativeDistrictLevel3: "administrative_district_level_3",
                    postalCode: "10003",
                    country: "US",
                    firstName: "first_name",
                    lastName: "last_name",
                },
                phoneNumber: "phone_number",
                birthday: "birthday",
                referenceId: "YOUR_REFERENCE_ID",
                note: "updated customer note",
                preferences: {
                    emailUnsubscribed: false,
                },
                creationSource: "THIRD_PARTY",
                groupIds: ["group_ids"],
                segmentIds: ["segment_ids"],
                version: BigInt("3"),
                taxIds: {
                    euVat: "eu_vat",
                },
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/customers/customer_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customers.delete({
            customerId: "customer_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
