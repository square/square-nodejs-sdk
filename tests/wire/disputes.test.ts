/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SquareClient } from "../../src/Client";

describe("Disputes", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            dispute: {
                dispute_id: "dispute_id",
                id: "XDgyFu7yo1E2S5lQGGpYn",
                amount_money: { amount: BigInt(2500), currency: "USD" },
                reason: "NO_KNOWLEDGE",
                state: "ACCEPTED",
                due_at: "2022-07-13T00:00:00.000Z",
                disputed_payment: { payment_id: "zhyh1ch64kRBrrlfVhwjCEjZWzNZY" },
                evidence_ids: ["evidence_ids"],
                card_brand: "VISA",
                created_at: "2022-06-29T18:45:22.265Z",
                updated_at: "2022-07-07T19:14:42.650Z",
                brand_dispute_id: "100000809947",
                reported_date: "reported_date",
                reported_at: "2022-06-29T00:00:00.000Z",
                version: 2,
                location_id: "L1HN3ZMQK64X9",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/disputes/dispute_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.disputes.get({
            dispute_id: "dispute_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            dispute: {
                dispute_id: "dispute_id",
                id: "XDgyFu7yo1E2S5lQGGpYn",
                amount_money: {
                    amount: BigInt("2500"),
                    currency: "USD",
                },
                reason: "NO_KNOWLEDGE",
                state: "ACCEPTED",
                due_at: "2022-07-13T00:00:00.000Z",
                disputed_payment: {
                    payment_id: "zhyh1ch64kRBrrlfVhwjCEjZWzNZY",
                },
                evidence_ids: ["evidence_ids"],
                card_brand: "VISA",
                created_at: "2022-06-29T18:45:22.265Z",
                updated_at: "2022-07-07T19:14:42.650Z",
                brand_dispute_id: "100000809947",
                reported_date: "reported_date",
                reported_at: "2022-06-29T00:00:00.000Z",
                version: 2,
                location_id: "L1HN3ZMQK64X9",
            },
        });
    });

    test("accept", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            dispute: {
                dispute_id: "dispute_id",
                id: "XDgyFu7yo1E2S5lQGGpYn",
                amount_money: { amount: BigInt(2500), currency: "USD" },
                reason: "NO_KNOWLEDGE",
                state: "ACCEPTED",
                due_at: "2022-07-13T00:00:00.000Z",
                disputed_payment: { payment_id: "zhyh1ch64kRBrrlfVhwjCEjZWzNZY" },
                evidence_ids: ["evidence_ids"],
                card_brand: "VISA",
                created_at: "2022-06-29T18:45:22.265Z",
                updated_at: "2022-07-07T19:14:42.650Z",
                brand_dispute_id: "100000809947",
                reported_date: "reported_date",
                reported_at: "2022-06-29T00:00:00.000Z",
                version: 2,
                location_id: "L1HN3ZMQK64X9",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/disputes/dispute_id/accept")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.disputes.accept({
            dispute_id: "dispute_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            dispute: {
                dispute_id: "dispute_id",
                id: "XDgyFu7yo1E2S5lQGGpYn",
                amount_money: {
                    amount: BigInt("2500"),
                    currency: "USD",
                },
                reason: "NO_KNOWLEDGE",
                state: "ACCEPTED",
                due_at: "2022-07-13T00:00:00.000Z",
                disputed_payment: {
                    payment_id: "zhyh1ch64kRBrrlfVhwjCEjZWzNZY",
                },
                evidence_ids: ["evidence_ids"],
                card_brand: "VISA",
                created_at: "2022-06-29T18:45:22.265Z",
                updated_at: "2022-07-07T19:14:42.650Z",
                brand_dispute_id: "100000809947",
                reported_date: "reported_date",
                reported_at: "2022-06-29T00:00:00.000Z",
                version: 2,
                location_id: "L1HN3ZMQK64X9",
            },
        });
    });

    test("CreateEvidenceText", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "ed3ee3933d946f1514d505d173c82648",
            evidence_type: "TRACKING_NUMBER",
            evidence_text: "1Z8888888888888888",
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            evidence: {
                evidence_id: "evidence_id",
                id: "TOomLInj6iWmP3N8qfCXrB",
                dispute_id: "bVTprrwk0gygTLZ96VX1oB",
                evidence_file: { filename: "filename", filetype: "filetype" },
                evidence_text: "The customer purchased the item twice, on April 11 and April 28.",
                uploaded_at: "2022-05-18T16:01:10.000Z",
                evidence_type: "REBUTTAL_EXPLANATION",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/disputes/dispute_id/evidence-text")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.disputes.createEvidenceText({
            dispute_id: "dispute_id",
            idempotency_key: "ed3ee3933d946f1514d505d173c82648",
            evidence_type: "TRACKING_NUMBER",
            evidence_text: "1Z8888888888888888",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            evidence: {
                evidence_id: "evidence_id",
                id: "TOomLInj6iWmP3N8qfCXrB",
                dispute_id: "bVTprrwk0gygTLZ96VX1oB",
                evidence_file: {
                    filename: "filename",
                    filetype: "filetype",
                },
                evidence_text: "The customer purchased the item twice, on April 11 and April 28.",
                uploaded_at: "2022-05-18T16:01:10.000Z",
                evidence_type: "REBUTTAL_EXPLANATION",
            },
        });
    });

    test("SubmitEvidence", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            dispute: {
                dispute_id: "dispute_id",
                id: "EAZoK70gX3fyvibecLwIGB",
                amount_money: { amount: BigInt(4350), currency: "USD" },
                reason: "CUSTOMER_REQUESTS_CREDIT",
                state: "PROCESSING",
                due_at: "2022-06-01T00:00:00.000Z",
                disputed_payment: { payment_id: "2yeBUWJzllJTpmnSqtMRAL19taB" },
                evidence_ids: ["evidence_ids"],
                card_brand: "VISA",
                created_at: "2022-05-18T16:02:15.313Z",
                updated_at: "2022-05-18T16:02:15.313Z",
                brand_dispute_id: "100000399240",
                reported_date: "reported_date",
                reported_at: "2022-05-18T00:00:00.000Z",
                version: 4,
                location_id: "LSY8XKGSMMX94",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/disputes/dispute_id/submit-evidence")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.disputes.submitEvidence({
            dispute_id: "dispute_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            dispute: {
                dispute_id: "dispute_id",
                id: "EAZoK70gX3fyvibecLwIGB",
                amount_money: {
                    amount: BigInt("4350"),
                    currency: "USD",
                },
                reason: "CUSTOMER_REQUESTS_CREDIT",
                state: "PROCESSING",
                due_at: "2022-06-01T00:00:00.000Z",
                disputed_payment: {
                    payment_id: "2yeBUWJzllJTpmnSqtMRAL19taB",
                },
                evidence_ids: ["evidence_ids"],
                card_brand: "VISA",
                created_at: "2022-05-18T16:02:15.313Z",
                updated_at: "2022-05-18T16:02:15.313Z",
                brand_dispute_id: "100000399240",
                reported_date: "reported_date",
                reported_at: "2022-05-18T00:00:00.000Z",
                version: 4,
                location_id: "LSY8XKGSMMX94",
            },
        });
    });
});
