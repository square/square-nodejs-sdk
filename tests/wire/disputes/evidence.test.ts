// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Evidence", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            evidence: [
                {
                    evidence_id: "evidence_id",
                    id: "CpfnkwGselCwS8QFvxN6",
                    dispute_id: "bVTprrwk0gygTLZ96VX1oB",
                    evidence_file: { filename: "customer-interaction", filetype: "JPG" },
                    evidence_text: "evidence_text",
                    uploaded_at: "2022-05-10T15:57:13.802Z",
                    evidence_type: "CARDHOLDER_COMMUNICATION",
                },
                {
                    evidence_id: "evidence_id",
                    id: "TOomLInj6iWmP3N8qfCXrB",
                    dispute_id: "bVTprrwk0gygTLZ96VX1oB",
                    evidence_file: { filename: "", filetype: "" },
                    evidence_text: "evidence_text",
                    uploaded_at: "2022-05-18T16:01:10.000Z",
                    evidence_type: "REBUTTAL_EXPLANATION",
                },
            ],
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            cursor: "cursor",
        };
        server
            .mockEndpoint()
            .get("/v2/disputes/dispute_id/evidence")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            evidence: [
                {
                    evidenceId: "evidence_id",
                    id: "CpfnkwGselCwS8QFvxN6",
                    disputeId: "bVTprrwk0gygTLZ96VX1oB",
                    evidenceFile: {
                        filename: "customer-interaction",
                        filetype: "JPG",
                    },
                    evidenceText: "evidence_text",
                    uploadedAt: "2022-05-10T15:57:13.802Z",
                    evidenceType: "CARDHOLDER_COMMUNICATION",
                },
                {
                    evidenceId: "evidence_id",
                    id: "TOomLInj6iWmP3N8qfCXrB",
                    disputeId: "bVTprrwk0gygTLZ96VX1oB",
                    evidenceFile: {
                        filename: "",
                        filetype: "",
                    },
                    evidenceText: "evidence_text",
                    uploadedAt: "2022-05-18T16:01:10.000Z",
                    evidenceType: "REBUTTAL_EXPLANATION",
                },
            ],
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            cursor: "cursor",
        };
        const page = await client.disputes.evidence.list({
            disputeId: "dispute_id",
            cursor: "cursor",
        });

        expect(expected.evidence).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.evidence).toEqual(nextPage.data);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            evidence: {
                evidence_id: "evidence_id",
                id: "TOomLInj6iWmP3N8qfCXrB",
                dispute_id: "bVTprrwk0gygTLZ96VX1oB",
                evidence_file: { filename: "customer-interaction.jpg", filetype: "image/jpeg" },
                evidence_text: "evidence_text",
                uploaded_at: "2022-05-18T16:01:10.000Z",
                evidence_type: "CARDHOLDER_COMMUNICATION",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/disputes/dispute_id/evidence/evidence_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.disputes.evidence.get({
            disputeId: "dispute_id",
            evidenceId: "evidence_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            evidence: {
                evidenceId: "evidence_id",
                id: "TOomLInj6iWmP3N8qfCXrB",
                disputeId: "bVTprrwk0gygTLZ96VX1oB",
                evidenceFile: {
                    filename: "customer-interaction.jpg",
                    filetype: "image/jpeg",
                },
                evidenceText: "evidence_text",
                uploadedAt: "2022-05-18T16:01:10.000Z",
                evidenceType: "CARDHOLDER_COMMUNICATION",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/disputes/dispute_id/evidence/evidence_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.disputes.evidence.delete({
            disputeId: "dispute_id",
            evidenceId: "evidence_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
