/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { SquareClient } from "../../../src/Client";

describe("Evidence", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            evidence: {
                evidence_id: "evidence_id",
                id: "TOomLInj6iWmP3N8qfCXrB",
                dispute_id: "bVTprrwk0gygTLZ96VX1oB",
                evidence_file: { filename: "customer-interaction.jpg", filetype: "image/jpeg" },
                evidence_text: "evidence_text",
                uploaded_at: "2022-05-18T16:01:10.000Z",
                evidence_type: "CARDHOLDER_COMMUNICATION",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/disputes/dispute_id/evidence/evidence_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.disputes.evidence.get({
            dispute_id: "dispute_id",
            evidence_id: "evidence_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            evidence: {
                evidence_id: "evidence_id",
                id: "TOomLInj6iWmP3N8qfCXrB",
                dispute_id: "bVTprrwk0gygTLZ96VX1oB",
                evidence_file: {
                    filename: "customer-interaction.jpg",
                    filetype: "image/jpeg",
                },
                evidence_text: "evidence_text",
                uploaded_at: "2022-05-18T16:01:10.000Z",
                evidence_type: "CARDHOLDER_COMMUNICATION",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/disputes/dispute_id/evidence/evidence_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.disputes.evidence.delete({
            dispute_id: "dispute_id",
            evidence_id: "evidence_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
