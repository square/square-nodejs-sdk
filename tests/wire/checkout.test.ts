/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SquareClient } from "../../src/Client";

describe("Checkout", () => {
    test("RetrieveLocationSettings", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            location_settings: {
                location_id: "LOCATION_ID_1",
                customer_notes_enabled: true,
                policies: [{ uid: "POLICY_ID_1", title: "Return Policy", description: "This is my Return Policy" }],
                branding: { header_type: "FRAMED_LOGO", button_color: "#ffffff", button_shape: "ROUNDED" },
                tipping: {
                    percentages: [10, 15, 20],
                    smart_tipping_enabled: true,
                    default_percent: 15,
                    smart_tips: [{}],
                },
                coupons: { enabled: true },
                updated_at: "2022-06-16T22:25:35Z",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/online-checkout/location-settings/location_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.checkout.retrieveLocationSettings({
            locationId: "location_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            locationSettings: {
                locationId: "LOCATION_ID_1",
                customerNotesEnabled: true,
                policies: [
                    {
                        uid: "POLICY_ID_1",
                        title: "Return Policy",
                        description: "This is my Return Policy",
                    },
                ],
                branding: {
                    headerType: "FRAMED_LOGO",
                    buttonColor: "#ffffff",
                    buttonShape: "ROUNDED",
                },
                tipping: {
                    percentages: [10, 15, 20],
                    smartTippingEnabled: true,
                    defaultPercent: 15,
                    smartTips: [{}],
                },
                coupons: {
                    enabled: true,
                },
                updatedAt: "2022-06-16T22:25:35Z",
            },
        });
    });

    test("UpdateLocationSettings", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { location_settings: {} };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            location_settings: {
                location_id: "LOCATION_ID_1",
                customer_notes_enabled: false,
                policies: [
                    { uid: "POLICY_ID_1", title: "Return Policy", description: "This is my Return Policy" },
                    {
                        uid: "POLICY_ID_2",
                        title: "Return Policy",
                        description: "Items may be returned within 30 days of purchase.",
                    },
                ],
                branding: { header_type: "FRAMED_LOGO", button_color: "#00b23b", button_shape: "ROUNDED" },
                tipping: {
                    percentages: [15, 20, 25],
                    smart_tipping_enabled: true,
                    default_percent: 20,
                    smart_tips: [{}],
                },
                coupons: { enabled: true },
                updated_at: "2022-06-16T22:25:35Z",
            },
        };
        server
            .mockEndpoint()
            .put("/v2/online-checkout/location-settings/location_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.checkout.updateLocationSettings({
            locationId: "location_id",
            locationSettings: {},
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            locationSettings: {
                locationId: "LOCATION_ID_1",
                customerNotesEnabled: false,
                policies: [
                    {
                        uid: "POLICY_ID_1",
                        title: "Return Policy",
                        description: "This is my Return Policy",
                    },
                    {
                        uid: "POLICY_ID_2",
                        title: "Return Policy",
                        description: "Items may be returned within 30 days of purchase.",
                    },
                ],
                branding: {
                    headerType: "FRAMED_LOGO",
                    buttonColor: "#00b23b",
                    buttonShape: "ROUNDED",
                },
                tipping: {
                    percentages: [15, 20, 25],
                    smartTippingEnabled: true,
                    defaultPercent: 20,
                    smartTips: [{}],
                },
                coupons: {
                    enabled: true,
                },
                updatedAt: "2022-06-16T22:25:35Z",
            },
        });
    });

    test("RetrieveMerchantSettings", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            merchant_settings: {
                payment_methods: {
                    apple_pay: { enabled: true },
                    google_pay: { enabled: true },
                    afterpay_clearpay: {
                        order_eligibility_range: {
                            min: { amount: BigInt(100), currency: "USD" },
                            max: { amount: BigInt(10000), currency: "USD" },
                        },
                        item_eligibility_range: {
                            min: { amount: BigInt(100), currency: "USD" },
                            max: { amount: BigInt(10000), currency: "USD" },
                        },
                        enabled: true,
                    },
                },
                updated_at: "2022-06-16T22:25:35Z",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/online-checkout/merchant-settings")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.checkout.retrieveMerchantSettings();
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            merchantSettings: {
                paymentMethods: {
                    applePay: {
                        enabled: true,
                    },
                    googlePay: {
                        enabled: true,
                    },
                    afterpayClearpay: {
                        orderEligibilityRange: {
                            min: {
                                amount: BigInt("100"),
                                currency: "USD",
                            },
                            max: {
                                amount: BigInt("10000"),
                                currency: "USD",
                            },
                        },
                        itemEligibilityRange: {
                            min: {
                                amount: BigInt("100"),
                                currency: "USD",
                            },
                            max: {
                                amount: BigInt("10000"),
                                currency: "USD",
                            },
                        },
                        enabled: true,
                    },
                },
                updatedAt: "2022-06-16T22:25:35Z",
            },
        });
    });

    test("UpdateMerchantSettings", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { merchant_settings: {} };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            merchant_settings: {
                payment_methods: {
                    apple_pay: { enabled: false },
                    google_pay: { enabled: true },
                    afterpay_clearpay: {
                        order_eligibility_range: {
                            min: { amount: BigInt(100), currency: "USD" },
                            max: { amount: BigInt(10000), currency: "USD" },
                        },
                        item_eligibility_range: {
                            min: { amount: BigInt(100), currency: "USD" },
                            max: { amount: BigInt(10000), currency: "USD" },
                        },
                        enabled: true,
                    },
                },
                updated_at: "2022-06-16T22:25:35Z",
            },
        };
        server
            .mockEndpoint()
            .put("/v2/online-checkout/merchant-settings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.checkout.updateMerchantSettings({
            merchantSettings: {},
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            merchantSettings: {
                paymentMethods: {
                    applePay: {
                        enabled: false,
                    },
                    googlePay: {
                        enabled: true,
                    },
                    afterpayClearpay: {
                        orderEligibilityRange: {
                            min: {
                                amount: BigInt("100"),
                                currency: "USD",
                            },
                            max: {
                                amount: BigInt("10000"),
                                currency: "USD",
                            },
                        },
                        itemEligibilityRange: {
                            min: {
                                amount: BigInt("100"),
                                currency: "USD",
                            },
                            max: {
                                amount: BigInt("10000"),
                                currency: "USD",
                            },
                        },
                        enabled: true,
                    },
                },
                updatedAt: "2022-06-16T22:25:35Z",
            },
        });
    });
});
