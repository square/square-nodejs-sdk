/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { SquareClient } from "../../../src/Client";

describe("CustomAttributes", () => {
    test("batchDelete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            values: {
                "cover-count": { key: "cover-count", order_id: "7BbXGEIWNldxAzrtGf9GPVZTwZ4F" },
                "table-number": { key: "table-number", order_id: "7BbXGEIWNldxAzrtGf9GPVZTwZ4F" },
            },
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            values: {
                "cover-count": { errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }] },
                "table-number": { errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }] },
            },
        };
        server
            .mockEndpoint()
            .post("/v2/orders/custom-attributes/bulk-delete")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.orders.customAttributes.batchDelete({
            values: {
                "cover-count": {
                    key: "cover-count",
                    order_id: "7BbXGEIWNldxAzrtGf9GPVZTwZ4F",
                },
                "table-number": {
                    key: "table-number",
                    order_id: "7BbXGEIWNldxAzrtGf9GPVZTwZ4F",
                },
            },
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            values: {
                "cover-count": {
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                "table-number": {
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
            },
        });
    });

    test("batchUpsert", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            values: {
                "cover-count": {
                    custom_attribute: { key: "cover-count", value: "6", version: 2 },
                    order_id: "7BbXGEIWNldxAzrtGf9GPVZTwZ4F",
                },
                "table-number": {
                    custom_attribute: { key: "table-number", value: "11", version: 4 },
                    order_id: "7BbXGEIWNldxAzrtGf9GPVZTwZ4F",
                },
            },
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            values: {
                "cover-count": {
                    custom_attribute: {
                        key: "cover-count",
                        value: "6",
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updated_at: "2022-11-22T21:28:35.721Z",
                        created_at: "2022-11-22T21:27:33.429Z",
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                "table-number": {
                    custom_attribute: {
                        key: "table-number",
                        value: "11",
                        visibility: "VISIBILITY_HIDDEN",
                        updated_at: "2022-11-22T21:28:35.726Z",
                        created_at: "2022-11-22T21:24:57.823Z",
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
            },
        };
        server
            .mockEndpoint()
            .post("/v2/orders/custom-attributes/bulk-upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.orders.customAttributes.batchUpsert({
            values: {
                "cover-count": {
                    custom_attribute: {
                        key: "cover-count",
                        value: "6",
                        version: 2,
                    },
                    order_id: "7BbXGEIWNldxAzrtGf9GPVZTwZ4F",
                },
                "table-number": {
                    custom_attribute: {
                        key: "table-number",
                        value: "11",
                        version: 4,
                    },
                    order_id: "7BbXGEIWNldxAzrtGf9GPVZTwZ4F",
                },
            },
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            values: {
                "cover-count": {
                    custom_attribute: {
                        key: "cover-count",
                        value: "6",
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updated_at: "2022-11-22T21:28:35.721Z",
                        created_at: "2022-11-22T21:27:33.429Z",
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                "table-number": {
                    custom_attribute: {
                        key: "table-number",
                        value: "11",
                        visibility: "VISIBILITY_HIDDEN",
                        updated_at: "2022-11-22T21:28:35.726Z",
                        created_at: "2022-11-22T21:24:57.823Z",
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            custom_attribute: {
                key: "cover-count",
                value: "6",
                version: 1,
                visibility: "VISIBILITY_READ_WRITE_VALUES",
                definition: {
                    key: "key",
                    schema: { key: "value" },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updated_at: "updated_at",
                    created_at: "created_at",
                },
                updated_at: "2022-11-22T21:28:35.721Z",
                created_at: "2022-11-22T21:27:33.429Z",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/orders/order_id/custom-attributes/custom_attribute_key")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.orders.customAttributes.get({
            order_id: "order_id",
            custom_attribute_key: "custom_attribute_key",
        });
        expect(response).toEqual({
            custom_attribute: {
                key: "cover-count",
                value: "6",
                version: 1,
                visibility: "VISIBILITY_READ_WRITE_VALUES",
                definition: {
                    key: "key",
                    schema: {
                        key: "value",
                    },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updated_at: "updated_at",
                    created_at: "created_at",
                },
                updated_at: "2022-11-22T21:28:35.721Z",
                created_at: "2022-11-22T21:27:33.429Z",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("upsert", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { custom_attribute: { key: "table-number", value: "42", version: 1 } };
        const rawResponseBody = {
            custom_attribute: {
                key: "table-number",
                value: "42",
                version: 1,
                visibility: "VISIBILITY_READ_WRITE_VALUES",
                definition: {
                    key: "key",
                    schema: { key: "value" },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updated_at: "updated_at",
                    created_at: "created_at",
                },
                updated_at: "2022-10-06T20:41:22.673Z",
                created_at: "2022-10-06T20:41:22.673Z",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/orders/order_id/custom-attributes/custom_attribute_key")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.orders.customAttributes.upsert({
            order_id: "order_id",
            custom_attribute_key: "custom_attribute_key",
            custom_attribute: {
                key: "table-number",
                value: "42",
                version: 1,
            },
        });
        expect(response).toEqual({
            custom_attribute: {
                key: "table-number",
                value: "42",
                version: 1,
                visibility: "VISIBILITY_READ_WRITE_VALUES",
                definition: {
                    key: "key",
                    schema: {
                        key: "value",
                    },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updated_at: "updated_at",
                    created_at: "created_at",
                },
                updated_at: "2022-10-06T20:41:22.673Z",
                created_at: "2022-10-06T20:41:22.673Z",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/orders/order_id/custom-attributes/custom_attribute_key")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.orders.customAttributes.delete({
            order_id: "order_id",
            custom_attribute_key: "custom_attribute_key",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
