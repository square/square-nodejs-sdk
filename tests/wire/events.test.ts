/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SquareClient } from "../../src/Client";

describe("Events", () => {
    test("SearchEvents", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            events: [
                {
                    merchant_id: "0HPGX5JYE6EE1",
                    location_id: "VJDQQP3CG14EY",
                    type: "dispute.state.updated",
                    event_id: "73ecd468-0aba-424f-b862-583d44efe7c8",
                    created_at: "2022-04-26T10:08:40.454726",
                    data: {
                        type: "dispute",
                        id: "ORSEVtZAJxb37RA1EiGw",
                        object: {
                            dispute: {
                                amount_money: { amount: 8801, currency: "USD" },
                                brand_dispute_id: "r9rKGSBBQbywBNnWWIiGFg",
                                card_brand: "VISA",
                                created_at: "2020-02-19T21:24:53.258Z",
                                disputed_payment: { payment_id: "fbmsaEOpoARDKxiSGH1fqPuqoqFZY" },
                                due_at: "2020-03-04T00:00:00.000Z",
                                id: "ORSEVtZAJxb37RA1EiGw",
                                location_id: "VJDQQP3CG14EY",
                                reason: "AMOUNT_DIFFERS",
                                reported_at: "2020-02-19T00:00:00.000Z",
                                state: "WON",
                                updated_at: "2020-02-19T21:34:41.851Z",
                                version: 6,
                            },
                        },
                    },
                },
            ],
            metadata: [{ event_id: "73ecd468-0aba-424f-b862-583d44efe7c8", api_version: "2022-12-13" }],
            cursor: "6b571fc9773647f=",
        };
        server
            .mockEndpoint()
            .post("/v2/events")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.events.searchEvents();
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            events: [
                {
                    merchantId: "0HPGX5JYE6EE1",
                    locationId: "VJDQQP3CG14EY",
                    type: "dispute.state.updated",
                    eventId: "73ecd468-0aba-424f-b862-583d44efe7c8",
                    createdAt: "2022-04-26T10:08:40.454726",
                    data: {
                        type: "dispute",
                        id: "ORSEVtZAJxb37RA1EiGw",
                        object: {
                            dispute: {
                                amount_money: {
                                    amount: 8801,
                                    currency: "USD",
                                },
                                brand_dispute_id: "r9rKGSBBQbywBNnWWIiGFg",
                                card_brand: "VISA",
                                created_at: "2020-02-19T21:24:53.258Z",
                                disputed_payment: {
                                    payment_id: "fbmsaEOpoARDKxiSGH1fqPuqoqFZY",
                                },
                                due_at: "2020-03-04T00:00:00.000Z",
                                id: "ORSEVtZAJxb37RA1EiGw",
                                location_id: "VJDQQP3CG14EY",
                                reason: "AMOUNT_DIFFERS",
                                reported_at: "2020-02-19T00:00:00.000Z",
                                state: "WON",
                                updated_at: "2020-02-19T21:34:41.851Z",
                                version: 6,
                            },
                        },
                    },
                },
            ],
            metadata: [
                {
                    eventId: "73ecd468-0aba-424f-b862-583d44efe7c8",
                    apiVersion: "2022-12-13",
                },
            ],
            cursor: "6b571fc9773647f=",
        });
    });

    test("DisableEvents", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server.mockEndpoint().put("/v2/events/disable").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.events.disableEvents();
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("EnableEvents", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server.mockEndpoint().put("/v2/events/enable").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.events.enableEvents();
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("ListEventTypes", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            event_types: ["inventory.count.updated"],
            metadata: [
                {
                    event_type: "inventory.count.updated",
                    api_version_introduced: "2018-07-12",
                    release_status: "PUBLIC",
                },
            ],
        };
        server.mockEndpoint().get("/v2/events/types").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.events.listEventTypes();
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            eventTypes: ["inventory.count.updated"],
            metadata: [
                {
                    eventType: "inventory.count.updated",
                    apiVersionIntroduced: "2018-07-12",
                    releaseStatus: "PUBLIC",
                },
            ],
        });
    });
});
