// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("PaymentLinks", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            payment_links: [
                {
                    id: "TN4BWEDJ9AI5MBIV",
                    version: 2,
                    description: "description",
                    order_id: "Qqc6yppGvxVwc46Cch4zHTaJqc4F",
                    checkout_options: { ask_for_shipping_address: true },
                    url: "https://square.link/u/EXAMPLE",
                    long_url: "long_url",
                    created_at: "2022-04-26T00:15:15Z",
                    updated_at: "2022-04-26T00:18:24Z",
                    payment_note: "test",
                },
                {
                    id: "RY5UNCUMPJN5XKCT",
                    version: 1,
                    description: "",
                    order_id: "EmBmGt3zJD15QeO1dxzBTxMxtwfZY",
                    url: "https://square.link/u/EXAMPLE",
                    long_url: "long_url",
                    created_at: "2022-04-11T23:14:59Z",
                    updated_at: "updated_at",
                    payment_note: "payment_note",
                },
            ],
            cursor: "MTY1NQ==",
        };
        server
            .mockEndpoint()
            .get("/v2/online-checkout/payment-links")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            paymentLinks: [
                {
                    id: "TN4BWEDJ9AI5MBIV",
                    version: 2,
                    description: "description",
                    orderId: "Qqc6yppGvxVwc46Cch4zHTaJqc4F",
                    checkoutOptions: {
                        askForShippingAddress: true,
                    },
                    url: "https://square.link/u/EXAMPLE",
                    longUrl: "long_url",
                    createdAt: "2022-04-26T00:15:15Z",
                    updatedAt: "2022-04-26T00:18:24Z",
                    paymentNote: "test",
                },
                {
                    id: "RY5UNCUMPJN5XKCT",
                    version: 1,
                    description: "",
                    orderId: "EmBmGt3zJD15QeO1dxzBTxMxtwfZY",
                    url: "https://square.link/u/EXAMPLE",
                    longUrl: "long_url",
                    createdAt: "2022-04-11T23:14:59Z",
                    updatedAt: "updated_at",
                    paymentNote: "payment_note",
                },
            ],
            cursor: "MTY1NQ==",
        };
        const page = await client.checkout.paymentLinks.list({
            cursor: "cursor",
            limit: 1,
        });

        expect(expected.paymentLinks).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.paymentLinks).toEqual(nextPage.data);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "cd9e25dc-d9f2-4430-aedb-61605070e95f",
            quick_pay: {
                name: "Auto Detailing",
                price_money: { amount: BigInt(10000), currency: "USD" },
                location_id: "A9Y43N9ABXZBP",
            },
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            payment_link: {
                id: "PKVT6XGJZXYUP3NZ",
                version: 1,
                description: "description",
                order_id: "o4b7saqp4HzhNttf5AJxC0Srjd4F",
                checkout_options: {
                    allow_tipping: true,
                    custom_fields: [{ title: "title" }],
                    subscription_plan_id: "subscription_plan_id",
                    redirect_url: "redirect_url",
                    merchant_support_email: "merchant_support_email",
                    ask_for_shipping_address: true,
                    shipping_fee: { charge: {} },
                    enable_coupon: true,
                    enable_loyalty: true,
                },
                pre_populated_data: { buyer_email: "buyer_email", buyer_phone_number: "buyer_phone_number" },
                url: "https://square.link/u/EXAMPLE",
                long_url: "https://checkout.square.site/EXAMPLE",
                created_at: "2022-04-25T23:58:01Z",
                updated_at: "updated_at",
                payment_note: "payment_note",
            },
            related_resources: {
                orders: [
                    {
                        id: "o4b7saqp4HzhNttf5AJxC0Srjd4F",
                        location_id: "{LOCATION_ID}",
                        source: { name: "Test Online Checkout Application" },
                        line_items: [
                            {
                                uid: "8YX13D1U3jO7czP8JVrAR",
                                name: "Auto Detailing",
                                quantity: "1",
                                item_type: "ITEM",
                                base_price_money: { amount: BigInt(12500), currency: "USD" },
                                variation_total_price_money: { amount: BigInt(12500), currency: "USD" },
                                gross_sales_money: { amount: BigInt(12500), currency: "USD" },
                                total_tax_money: { amount: BigInt(0), currency: "USD" },
                                total_discount_money: { amount: BigInt(0), currency: "USD" },
                                total_money: { amount: BigInt(12500), currency: "USD" },
                            },
                        ],
                        fulfillments: [{ uid: "bBpNrxjdQxGQP16sTmdzi", type: "PICKUP", state: "PROPOSED" }],
                        net_amounts: {
                            total_money: { amount: BigInt(12500), currency: "USD" },
                            tax_money: { amount: BigInt(0), currency: "USD" },
                            discount_money: { amount: BigInt(0), currency: "USD" },
                            tip_money: { amount: BigInt(0), currency: "USD" },
                            service_charge_money: { amount: BigInt(0), currency: "USD" },
                        },
                        created_at: "2022-03-03T00:53:15.829Z",
                        updated_at: "2022-03-03T00:53:15.829Z",
                        state: "DRAFT",
                        version: 1,
                        total_money: { amount: BigInt(12500), currency: "USD" },
                        total_tax_money: { amount: BigInt(0), currency: "USD" },
                        total_discount_money: { amount: BigInt(0), currency: "USD" },
                        total_tip_money: { amount: BigInt(0), currency: "USD" },
                        total_service_charge_money: { amount: BigInt(0), currency: "USD" },
                    },
                ],
                subscription_plans: [{ type: "ITEM", id: "id" }],
            },
        };
        server
            .mockEndpoint()
            .post("/v2/online-checkout/payment-links")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.checkout.paymentLinks.create({
            idempotencyKey: "cd9e25dc-d9f2-4430-aedb-61605070e95f",
            quickPay: {
                name: "Auto Detailing",
                priceMoney: {
                    amount: BigInt("10000"),
                    currency: "USD",
                },
                locationId: "A9Y43N9ABXZBP",
            },
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            paymentLink: {
                id: "PKVT6XGJZXYUP3NZ",
                version: 1,
                description: "description",
                orderId: "o4b7saqp4HzhNttf5AJxC0Srjd4F",
                checkoutOptions: {
                    allowTipping: true,
                    customFields: [
                        {
                            title: "title",
                        },
                    ],
                    subscriptionPlanId: "subscription_plan_id",
                    redirectUrl: "redirect_url",
                    merchantSupportEmail: "merchant_support_email",
                    askForShippingAddress: true,
                    shippingFee: {
                        charge: {},
                    },
                    enableCoupon: true,
                    enableLoyalty: true,
                },
                prePopulatedData: {
                    buyerEmail: "buyer_email",
                    buyerPhoneNumber: "buyer_phone_number",
                },
                url: "https://square.link/u/EXAMPLE",
                longUrl: "https://checkout.square.site/EXAMPLE",
                createdAt: "2022-04-25T23:58:01Z",
                updatedAt: "updated_at",
                paymentNote: "payment_note",
            },
            relatedResources: {
                orders: [
                    {
                        id: "o4b7saqp4HzhNttf5AJxC0Srjd4F",
                        locationId: "{LOCATION_ID}",
                        source: {
                            name: "Test Online Checkout Application",
                        },
                        lineItems: [
                            {
                                uid: "8YX13D1U3jO7czP8JVrAR",
                                name: "Auto Detailing",
                                quantity: "1",
                                itemType: "ITEM",
                                basePriceMoney: {
                                    amount: BigInt("12500"),
                                    currency: "USD",
                                },
                                variationTotalPriceMoney: {
                                    amount: BigInt("12500"),
                                    currency: "USD",
                                },
                                grossSalesMoney: {
                                    amount: BigInt("12500"),
                                    currency: "USD",
                                },
                                totalTaxMoney: {
                                    amount: BigInt("0"),
                                    currency: "USD",
                                },
                                totalDiscountMoney: {
                                    amount: BigInt("0"),
                                    currency: "USD",
                                },
                                totalMoney: {
                                    amount: BigInt("12500"),
                                    currency: "USD",
                                },
                            },
                        ],
                        fulfillments: [
                            {
                                uid: "bBpNrxjdQxGQP16sTmdzi",
                                type: "PICKUP",
                                state: "PROPOSED",
                            },
                        ],
                        netAmounts: {
                            totalMoney: {
                                amount: BigInt("12500"),
                                currency: "USD",
                            },
                            taxMoney: {
                                amount: BigInt("0"),
                                currency: "USD",
                            },
                            discountMoney: {
                                amount: BigInt("0"),
                                currency: "USD",
                            },
                            tipMoney: {
                                amount: BigInt("0"),
                                currency: "USD",
                            },
                            serviceChargeMoney: {
                                amount: BigInt("0"),
                                currency: "USD",
                            },
                        },
                        createdAt: "2022-03-03T00:53:15.829Z",
                        updatedAt: "2022-03-03T00:53:15.829Z",
                        state: "DRAFT",
                        version: 1,
                        totalMoney: {
                            amount: BigInt("12500"),
                            currency: "USD",
                        },
                        totalTaxMoney: {
                            amount: BigInt("0"),
                            currency: "USD",
                        },
                        totalDiscountMoney: {
                            amount: BigInt("0"),
                            currency: "USD",
                        },
                        totalTipMoney: {
                            amount: BigInt("0"),
                            currency: "USD",
                        },
                        totalServiceChargeMoney: {
                            amount: BigInt("0"),
                            currency: "USD",
                        },
                    },
                ],
                subscriptionPlans: [
                    {
                        type: "ITEM",
                        id: "id",
                    },
                ],
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            payment_link: {
                id: "LLO5Q3FRCFICDB4B",
                version: 1,
                description: "description",
                order_id: "4uKASDATqSd1QQ9jV86sPhMdVEbSJc4F",
                checkout_options: {
                    allow_tipping: true,
                    custom_fields: [{ title: "title" }],
                    subscription_plan_id: "subscription_plan_id",
                    redirect_url: "redirect_url",
                    merchant_support_email: "merchant_support_email",
                    ask_for_shipping_address: true,
                    shipping_fee: { charge: {} },
                    enable_coupon: true,
                    enable_loyalty: true,
                },
                pre_populated_data: { buyer_email: "buyer_email", buyer_phone_number: "buyer_phone_number" },
                url: "https://square.link/u/EXAMPLE",
                long_url: "https://checkout.square.site/EXAMPLE",
                created_at: "2022-04-26T00:10:29Z",
                updated_at: "updated_at",
                payment_note: "payment_note",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/online-checkout/payment-links/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.checkout.paymentLinks.get({
            id: "id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            paymentLink: {
                id: "LLO5Q3FRCFICDB4B",
                version: 1,
                description: "description",
                orderId: "4uKASDATqSd1QQ9jV86sPhMdVEbSJc4F",
                checkoutOptions: {
                    allowTipping: true,
                    customFields: [
                        {
                            title: "title",
                        },
                    ],
                    subscriptionPlanId: "subscription_plan_id",
                    redirectUrl: "redirect_url",
                    merchantSupportEmail: "merchant_support_email",
                    askForShippingAddress: true,
                    shippingFee: {
                        charge: {},
                    },
                    enableCoupon: true,
                    enableLoyalty: true,
                },
                prePopulatedData: {
                    buyerEmail: "buyer_email",
                    buyerPhoneNumber: "buyer_phone_number",
                },
                url: "https://square.link/u/EXAMPLE",
                longUrl: "https://checkout.square.site/EXAMPLE",
                createdAt: "2022-04-26T00:10:29Z",
                updatedAt: "updated_at",
                paymentNote: "payment_note",
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { payment_link: { version: 1, checkout_options: { ask_for_shipping_address: true } } };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            payment_link: {
                id: "TY4BWEDJ6AI5MBIV",
                version: 2,
                description: "description",
                order_id: "Qqc8ypQGvxVwc46Cch4zHTaJqc4F",
                checkout_options: {
                    allow_tipping: true,
                    custom_fields: [{ title: "title" }],
                    subscription_plan_id: "subscription_plan_id",
                    redirect_url: "redirect_url",
                    merchant_support_email: "merchant_support_email",
                    ask_for_shipping_address: true,
                    shipping_fee: { charge: {} },
                    enable_coupon: true,
                    enable_loyalty: true,
                },
                pre_populated_data: { buyer_email: "buyer_email", buyer_phone_number: "buyer_phone_number" },
                url: "https://square.link/u/EXAMPLE",
                long_url: "https://checkout.square.site/EXAMPLE",
                created_at: "2022-04-26T00:15:15Z",
                updated_at: "2022-04-26T00:18:24Z",
                payment_note: "test",
            },
        };
        server
            .mockEndpoint()
            .put("/v2/online-checkout/payment-links/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.checkout.paymentLinks.update({
            id: "id",
            paymentLink: {
                version: 1,
                checkoutOptions: {
                    askForShippingAddress: true,
                },
            },
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            paymentLink: {
                id: "TY4BWEDJ6AI5MBIV",
                version: 2,
                description: "description",
                orderId: "Qqc8ypQGvxVwc46Cch4zHTaJqc4F",
                checkoutOptions: {
                    allowTipping: true,
                    customFields: [
                        {
                            title: "title",
                        },
                    ],
                    subscriptionPlanId: "subscription_plan_id",
                    redirectUrl: "redirect_url",
                    merchantSupportEmail: "merchant_support_email",
                    askForShippingAddress: true,
                    shippingFee: {
                        charge: {},
                    },
                    enableCoupon: true,
                    enableLoyalty: true,
                },
                prePopulatedData: {
                    buyerEmail: "buyer_email",
                    buyerPhoneNumber: "buyer_phone_number",
                },
                url: "https://square.link/u/EXAMPLE",
                longUrl: "https://checkout.square.site/EXAMPLE",
                createdAt: "2022-04-26T00:15:15Z",
                updatedAt: "2022-04-26T00:18:24Z",
                paymentNote: "test",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            id: "MQASNYL6QB6DFCJ3",
            cancelled_order_id: "asx8LgZ6MRzD0fObfkJ6obBmSh4F",
        };
        server
            .mockEndpoint()
            .delete("/v2/online-checkout/payment-links/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.checkout.paymentLinks.delete({
            id: "id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            id: "MQASNYL6QB6DFCJ3",
            cancelledOrderId: "asx8LgZ6MRzD0fObfkJ6obBmSh4F",
        });
    });
});
