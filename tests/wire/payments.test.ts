/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SquareClient } from "../../src/Client";

describe("Payments", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            source_id: "ccof:GaJGNaZa8x4OgDJn4GB",
            idempotency_key: "7b0f3ec5-086a-4871-8f13-3c81b3875218",
            amount_money: { amount: BigInt(1000), currency: "USD" },
            app_fee_money: { amount: BigInt(10), currency: "USD" },
            autocomplete: true,
            customer_id: "W92WH6P11H4Z77CTET0RNTGFW8",
            location_id: "L88917AVBK2S5",
            reference_id: "123456",
            note: "Brief description",
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            payment: {
                id: "R2B3Z8WMVt3EAmzYWLZvz7Y69EbZY",
                created_at: "2021-10-13T21:14:29.577Z",
                updated_at: "2021-10-13T21:14:30.504Z",
                amount_money: { amount: BigInt(1000), currency: "USD" },
                tip_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                total_money: { amount: BigInt(1000), currency: "USD" },
                app_fee_money: { amount: BigInt(10), currency: "USD" },
                approved_money: { amount: BigInt(1000), currency: "USD" },
                processing_fee: [{}],
                refunded_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                status: "COMPLETED",
                delay_duration: "PT168H",
                delay_action: "CANCEL",
                delayed_until: "2021-10-20T21:14:29.577Z",
                source_type: "CARD",
                card_details: {
                    status: "CAPTURED",
                    card: {
                        card_brand: "VISA",
                        last_4: "1111",
                        exp_month: BigInt(11),
                        exp_year: BigInt(2022),
                        fingerprint: "sq-1-Hxim77tbdcbGejOejnoAklBVJed2YFLTmirfl8Q5XZzObTc8qY_U8RkwzoNL8dCEcQ",
                        card_type: "DEBIT",
                        prepaid_type: "NOT_PREPAID",
                        bin: "411111",
                    },
                    entry_method: "ON_FILE",
                    cvv_status: "CVV_ACCEPTED",
                    avs_status: "AVS_ACCEPTED",
                    auth_result_code: "vNEn2f",
                    application_identifier: "application_identifier",
                    application_name: "application_name",
                    application_cryptogram: "application_cryptogram",
                    verification_method: "verification_method",
                    verification_results: "verification_results",
                    statement_description: "SQ *EXAMPLE TEST GOSQ.C",
                    card_payment_timeline: {
                        authorized_at: "2021-10-13T21:14:29.732Z",
                        captured_at: "2021-10-13T21:14:30.504Z",
                    },
                    refund_requires_card_presence: true,
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                cash_details: { buyer_supplied_money: {} },
                bank_account_details: {
                    bank_name: "bank_name",
                    transfer_type: "transfer_type",
                    account_ownership_type: "account_ownership_type",
                    fingerprint: "fingerprint",
                    country: "country",
                    statement_description: "statement_description",
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                external_details: { type: "type", source: "source", source_id: "source_id" },
                wallet_details: { status: "status", brand: "brand" },
                buy_now_pay_later_details: { brand: "brand" },
                square_account_details: {
                    payment_source_token: "payment_source_token",
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                location_id: "L88917AVBK2S5",
                order_id: "pRsjRTgFWATl7so6DxdKBJa7ssbZY",
                reference_id: "123456",
                customer_id: "W92WH6P11H4Z77CTET0RNTGFW8",
                employee_id: "employee_id",
                team_member_id: "team_member_id",
                refund_ids: ["refund_ids"],
                risk_evaluation: { created_at: "2021-10-13T21:14:30.423Z", risk_level: "NORMAL" },
                terminal_checkout_id: "terminal_checkout_id",
                buyer_email_address: "buyer_email_address",
                billing_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                shipping_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                note: "Brief Description",
                statement_description_identifier: "statement_description_identifier",
                capabilities: ["capabilities"],
                receipt_number: "R2B3",
                receipt_url: "https://squareup.com/receipt/preview/EXAMPLE_RECEIPT_ID",
                device_details: {
                    device_id: "device_id",
                    device_installation_id: "device_installation_id",
                    device_name: "device_name",
                },
                application_details: {
                    square_product: "ECOMMERCE_API",
                    application_id: "sq0ids-TcgftTEtKxJTRF1lCFJ9TA",
                },
                is_offline_payment: true,
                offline_payment_details: { client_created_at: "client_created_at" },
                version_token: "TPtNEOBOa6Qq6E3C3IjckSVOM6b3hMbfhjvTxHBQUsB6o",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/payments")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.payments.create({
            source_id: "ccof:GaJGNaZa8x4OgDJn4GB",
            idempotency_key: "7b0f3ec5-086a-4871-8f13-3c81b3875218",
            amount_money: {
                amount: BigInt("1000"),
                currency: "USD",
            },
            app_fee_money: {
                amount: BigInt("10"),
                currency: "USD",
            },
            autocomplete: true,
            customer_id: "W92WH6P11H4Z77CTET0RNTGFW8",
            location_id: "L88917AVBK2S5",
            reference_id: "123456",
            note: "Brief description",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            payment: {
                id: "R2B3Z8WMVt3EAmzYWLZvz7Y69EbZY",
                created_at: "2021-10-13T21:14:29.577Z",
                updated_at: "2021-10-13T21:14:30.504Z",
                amount_money: {
                    amount: BigInt("1000"),
                    currency: "USD",
                },
                tip_money: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                total_money: {
                    amount: BigInt("1000"),
                    currency: "USD",
                },
                app_fee_money: {
                    amount: BigInt("10"),
                    currency: "USD",
                },
                approved_money: {
                    amount: BigInt("1000"),
                    currency: "USD",
                },
                processing_fee: [{}],
                refunded_money: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                status: "COMPLETED",
                delay_duration: "PT168H",
                delay_action: "CANCEL",
                delayed_until: "2021-10-20T21:14:29.577Z",
                source_type: "CARD",
                card_details: {
                    status: "CAPTURED",
                    card: {
                        card_brand: "VISA",
                        last_4: "1111",
                        exp_month: BigInt("11"),
                        exp_year: BigInt("2022"),
                        fingerprint: "sq-1-Hxim77tbdcbGejOejnoAklBVJed2YFLTmirfl8Q5XZzObTc8qY_U8RkwzoNL8dCEcQ",
                        card_type: "DEBIT",
                        prepaid_type: "NOT_PREPAID",
                        bin: "411111",
                    },
                    entry_method: "ON_FILE",
                    cvv_status: "CVV_ACCEPTED",
                    avs_status: "AVS_ACCEPTED",
                    auth_result_code: "vNEn2f",
                    application_identifier: "application_identifier",
                    application_name: "application_name",
                    application_cryptogram: "application_cryptogram",
                    verification_method: "verification_method",
                    verification_results: "verification_results",
                    statement_description: "SQ *EXAMPLE TEST GOSQ.C",
                    card_payment_timeline: {
                        authorized_at: "2021-10-13T21:14:29.732Z",
                        captured_at: "2021-10-13T21:14:30.504Z",
                    },
                    refund_requires_card_presence: true,
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                cash_details: {
                    buyer_supplied_money: {},
                },
                bank_account_details: {
                    bank_name: "bank_name",
                    transfer_type: "transfer_type",
                    account_ownership_type: "account_ownership_type",
                    fingerprint: "fingerprint",
                    country: "country",
                    statement_description: "statement_description",
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                external_details: {
                    type: "type",
                    source: "source",
                    source_id: "source_id",
                },
                wallet_details: {
                    status: "status",
                    brand: "brand",
                },
                buy_now_pay_later_details: {
                    brand: "brand",
                },
                square_account_details: {
                    payment_source_token: "payment_source_token",
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                location_id: "L88917AVBK2S5",
                order_id: "pRsjRTgFWATl7so6DxdKBJa7ssbZY",
                reference_id: "123456",
                customer_id: "W92WH6P11H4Z77CTET0RNTGFW8",
                employee_id: "employee_id",
                team_member_id: "team_member_id",
                refund_ids: ["refund_ids"],
                risk_evaluation: {
                    created_at: "2021-10-13T21:14:30.423Z",
                    risk_level: "NORMAL",
                },
                terminal_checkout_id: "terminal_checkout_id",
                buyer_email_address: "buyer_email_address",
                billing_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                shipping_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                note: "Brief Description",
                statement_description_identifier: "statement_description_identifier",
                capabilities: ["capabilities"],
                receipt_number: "R2B3",
                receipt_url: "https://squareup.com/receipt/preview/EXAMPLE_RECEIPT_ID",
                device_details: {
                    device_id: "device_id",
                    device_installation_id: "device_installation_id",
                    device_name: "device_name",
                },
                application_details: {
                    square_product: "ECOMMERCE_API",
                    application_id: "sq0ids-TcgftTEtKxJTRF1lCFJ9TA",
                },
                is_offline_payment: true,
                offline_payment_details: {
                    client_created_at: "client_created_at",
                },
                version_token: "TPtNEOBOa6Qq6E3C3IjckSVOM6b3hMbfhjvTxHBQUsB6o",
            },
        });
    });

    test("cancelByIdempotencyKey", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { idempotency_key: "a7e36d40-d24b-11e8-b568-0800200c9a66" };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/payments/cancel")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.payments.cancelByIdempotencyKey({
            idempotency_key: "a7e36d40-d24b-11e8-b568-0800200c9a66",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            payment: {
                id: "bP9mAsEMYPUGjjGNaNO5ZDVyLhSZY",
                created_at: "2021-10-13T19:34:33.524Z",
                updated_at: "2021-10-13T19:34:34.339Z",
                amount_money: { amount: BigInt(555), currency: "USD" },
                tip_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                total_money: { amount: BigInt(555), currency: "USD" },
                app_fee_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                approved_money: { amount: BigInt(555), currency: "USD" },
                processing_fee: [
                    {
                        effective_at: "2021-10-13T21:34:35.000Z",
                        type: "INITIAL",
                        amount_money: { amount: BigInt(34), currency: "USD" },
                    },
                ],
                refunded_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                status: "COMPLETED",
                delay_duration: "PT168H",
                delay_action: "CANCEL",
                delayed_until: "2021-10-20T19:34:33.524Z",
                source_type: "CARD",
                card_details: {
                    status: "CAPTURED",
                    card: {
                        card_brand: "VISA",
                        last_4: "1111",
                        exp_month: BigInt(11),
                        exp_year: BigInt(2022),
                        fingerprint: "sq-1-Hxim77tbdcbGejOejnoAklBVJed2YFLTmirfl8Q5XZzObTc8qY_U8RkwzoNL8dCEcQ",
                        card_type: "DEBIT",
                        prepaid_type: "NOT_PREPAID",
                        bin: "411111",
                    },
                    entry_method: "KEYED",
                    cvv_status: "CVV_ACCEPTED",
                    avs_status: "AVS_ACCEPTED",
                    auth_result_code: "2Nkw7q",
                    application_identifier: "application_identifier",
                    application_name: "application_name",
                    application_cryptogram: "application_cryptogram",
                    verification_method: "verification_method",
                    verification_results: "verification_results",
                    statement_description: "SQ *EXAMPLE TEST GOSQ.C",
                    card_payment_timeline: {
                        authorized_at: "2021-10-13T19:34:33.680Z",
                        captured_at: "2021-10-13T19:34:34.340Z",
                    },
                    refund_requires_card_presence: true,
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                cash_details: { buyer_supplied_money: {} },
                bank_account_details: {
                    bank_name: "bank_name",
                    transfer_type: "transfer_type",
                    account_ownership_type: "account_ownership_type",
                    fingerprint: "fingerprint",
                    country: "country",
                    statement_description: "statement_description",
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                external_details: { type: "type", source: "source", source_id: "source_id" },
                wallet_details: { status: "status", brand: "brand" },
                buy_now_pay_later_details: { brand: "brand" },
                square_account_details: {
                    payment_source_token: "payment_source_token",
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                location_id: "L88917AVBK2S5",
                order_id: "d7eKah653Z579f3gVtjlxpSlmUcZY",
                reference_id: "reference_id",
                customer_id: "customer_id",
                employee_id: "TMoK_ogh6rH1o4dV",
                team_member_id: "TMoK_ogh6rH1o4dV",
                refund_ids: ["refund_ids"],
                risk_evaluation: { created_at: "created_at", risk_level: "PENDING" },
                terminal_checkout_id: "terminal_checkout_id",
                buyer_email_address: "buyer_email_address",
                billing_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                shipping_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                note: "Test Note",
                statement_description_identifier: "statement_description_identifier",
                capabilities: ["capabilities"],
                receipt_number: "bP9m",
                receipt_url: "https://squareup.com/receipt/preview/bP9mAsEMYPUGjjGNaNO5ZDVyLhSZY",
                device_details: {
                    device_id: "device_id",
                    device_installation_id: "device_installation_id",
                    device_name: "device_name",
                },
                application_details: {
                    square_product: "VIRTUAL_TERMINAL",
                    application_id: "sq0ids-Pw67AZAlLVB7hsRmwlJPuA",
                },
                is_offline_payment: true,
                offline_payment_details: { client_created_at: "client_created_at" },
                version_token: "56pRkL3slrzet2iQrTp9n0bdJVYTB9YEWdTNjQfZOPV6o",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/payments/payment_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.payments.get({
            payment_id: "payment_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            payment: {
                id: "bP9mAsEMYPUGjjGNaNO5ZDVyLhSZY",
                created_at: "2021-10-13T19:34:33.524Z",
                updated_at: "2021-10-13T19:34:34.339Z",
                amount_money: {
                    amount: BigInt("555"),
                    currency: "USD",
                },
                tip_money: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                total_money: {
                    amount: BigInt("555"),
                    currency: "USD",
                },
                app_fee_money: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                approved_money: {
                    amount: BigInt("555"),
                    currency: "USD",
                },
                processing_fee: [
                    {
                        effective_at: "2021-10-13T21:34:35.000Z",
                        type: "INITIAL",
                        amount_money: {
                            amount: BigInt("34"),
                            currency: "USD",
                        },
                    },
                ],
                refunded_money: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                status: "COMPLETED",
                delay_duration: "PT168H",
                delay_action: "CANCEL",
                delayed_until: "2021-10-20T19:34:33.524Z",
                source_type: "CARD",
                card_details: {
                    status: "CAPTURED",
                    card: {
                        card_brand: "VISA",
                        last_4: "1111",
                        exp_month: BigInt("11"),
                        exp_year: BigInt("2022"),
                        fingerprint: "sq-1-Hxim77tbdcbGejOejnoAklBVJed2YFLTmirfl8Q5XZzObTc8qY_U8RkwzoNL8dCEcQ",
                        card_type: "DEBIT",
                        prepaid_type: "NOT_PREPAID",
                        bin: "411111",
                    },
                    entry_method: "KEYED",
                    cvv_status: "CVV_ACCEPTED",
                    avs_status: "AVS_ACCEPTED",
                    auth_result_code: "2Nkw7q",
                    application_identifier: "application_identifier",
                    application_name: "application_name",
                    application_cryptogram: "application_cryptogram",
                    verification_method: "verification_method",
                    verification_results: "verification_results",
                    statement_description: "SQ *EXAMPLE TEST GOSQ.C",
                    card_payment_timeline: {
                        authorized_at: "2021-10-13T19:34:33.680Z",
                        captured_at: "2021-10-13T19:34:34.340Z",
                    },
                    refund_requires_card_presence: true,
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                cash_details: {
                    buyer_supplied_money: {},
                },
                bank_account_details: {
                    bank_name: "bank_name",
                    transfer_type: "transfer_type",
                    account_ownership_type: "account_ownership_type",
                    fingerprint: "fingerprint",
                    country: "country",
                    statement_description: "statement_description",
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                external_details: {
                    type: "type",
                    source: "source",
                    source_id: "source_id",
                },
                wallet_details: {
                    status: "status",
                    brand: "brand",
                },
                buy_now_pay_later_details: {
                    brand: "brand",
                },
                square_account_details: {
                    payment_source_token: "payment_source_token",
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                location_id: "L88917AVBK2S5",
                order_id: "d7eKah653Z579f3gVtjlxpSlmUcZY",
                reference_id: "reference_id",
                customer_id: "customer_id",
                employee_id: "TMoK_ogh6rH1o4dV",
                team_member_id: "TMoK_ogh6rH1o4dV",
                refund_ids: ["refund_ids"],
                risk_evaluation: {
                    created_at: "created_at",
                    risk_level: "PENDING",
                },
                terminal_checkout_id: "terminal_checkout_id",
                buyer_email_address: "buyer_email_address",
                billing_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                shipping_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                note: "Test Note",
                statement_description_identifier: "statement_description_identifier",
                capabilities: ["capabilities"],
                receipt_number: "bP9m",
                receipt_url: "https://squareup.com/receipt/preview/bP9mAsEMYPUGjjGNaNO5ZDVyLhSZY",
                device_details: {
                    device_id: "device_id",
                    device_installation_id: "device_installation_id",
                    device_name: "device_name",
                },
                application_details: {
                    square_product: "VIRTUAL_TERMINAL",
                    application_id: "sq0ids-Pw67AZAlLVB7hsRmwlJPuA",
                },
                is_offline_payment: true,
                offline_payment_details: {
                    client_created_at: "client_created_at",
                },
                version_token: "56pRkL3slrzet2iQrTp9n0bdJVYTB9YEWdTNjQfZOPV6o",
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            payment: {
                amount_money: { amount: BigInt(1000), currency: "USD" },
                tip_money: { amount: BigInt(100), currency: "USD" },
                version_token: "ODhwVQ35xwlzRuoZEwKXucfu7583sPTzK48c5zoGd0g6o",
            },
            idempotency_key: "956f8b13-e4ec-45d6-85e8-d1d95ef0c5de",
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            payment: {
                id: "1QjqpBVyrI9S4H9sTGDWU9JeiWdZY",
                created_at: "2021-10-13T20:26:44.191Z",
                updated_at: "2021-10-13T20:26:44.364Z",
                amount_money: { amount: BigInt(1000), currency: "USD" },
                tip_money: { amount: BigInt(100), currency: "USD" },
                total_money: { amount: BigInt(1100), currency: "USD" },
                app_fee_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                approved_money: { amount: BigInt(1000), currency: "USD" },
                processing_fee: [{}],
                refunded_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                status: "APPROVED",
                delay_duration: "PT168H",
                delay_action: "CANCEL",
                delayed_until: "2021-10-20T20:26:44.191Z",
                source_type: "CARD",
                card_details: {
                    status: "AUTHORIZED",
                    card: {
                        card_brand: "VISA",
                        last_4: "1111",
                        exp_month: BigInt(11),
                        exp_year: BigInt(2022),
                        fingerprint: "sq-1-Hxim77tbdcbGejOejnoAklBVJed2YFLTmirfl8Q5XZzObTc8qY_U8RkwzoNL8dCEcQ",
                        card_type: "DEBIT",
                        prepaid_type: "NOT_PREPAID",
                        bin: "411111",
                    },
                    entry_method: "ON_FILE",
                    cvv_status: "CVV_ACCEPTED",
                    avs_status: "AVS_ACCEPTED",
                    auth_result_code: "68aLBM",
                    application_identifier: "application_identifier",
                    application_name: "application_name",
                    application_cryptogram: "application_cryptogram",
                    verification_method: "verification_method",
                    verification_results: "verification_results",
                    statement_description: "SQ *EXAMPLE TEST GOSQ.C",
                    card_payment_timeline: { authorized_at: "2021-10-13T20:26:44.364Z" },
                    refund_requires_card_presence: true,
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                cash_details: { buyer_supplied_money: {} },
                bank_account_details: {
                    bank_name: "bank_name",
                    transfer_type: "transfer_type",
                    account_ownership_type: "account_ownership_type",
                    fingerprint: "fingerprint",
                    country: "country",
                    statement_description: "statement_description",
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                external_details: { type: "type", source: "source", source_id: "source_id" },
                wallet_details: { status: "status", brand: "brand" },
                buy_now_pay_later_details: { brand: "brand" },
                square_account_details: {
                    payment_source_token: "payment_source_token",
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                location_id: "L88917AVBK2S5",
                order_id: "nUSN9TdxpiK3SrQg3wzmf6r8LP9YY",
                reference_id: "reference_id",
                customer_id: "W92WH6P11H4Z77CTET0RNTGFW8",
                employee_id: "employee_id",
                team_member_id: "team_member_id",
                refund_ids: ["refund_ids"],
                risk_evaluation: { created_at: "2021-10-13T20:26:45.271Z", risk_level: "NORMAL" },
                terminal_checkout_id: "terminal_checkout_id",
                buyer_email_address: "buyer_email_address",
                billing_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                shipping_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                note: "Example Note",
                statement_description_identifier: "statement_description_identifier",
                capabilities: ["EDIT_AMOUNT_UP", "EDIT_AMOUNT_DOWN", "EDIT_TIP_AMOUNT_UP", "EDIT_TIP_AMOUNT_DOWN"],
                receipt_number: "1Qjq",
                receipt_url: "receipt_url",
                device_details: {
                    device_id: "device_id",
                    device_installation_id: "device_installation_id",
                    device_name: "device_name",
                },
                application_details: {
                    square_product: "ECOMMERCE_API",
                    application_id: "sq0ids-TcgftTEtKxJTRF1lCFJ9TA",
                },
                is_offline_payment: true,
                offline_payment_details: { client_created_at: "client_created_at" },
                version_token: "rDrXnqiS7fJgexccgdpzmwqTiXui1aIKCp9EchZ7trE6o",
            },
        };
        server
            .mockEndpoint()
            .put("/v2/payments/payment_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.payments.update({
            payment_id: "payment_id",
            payment: {
                amount_money: {
                    amount: BigInt("1000"),
                    currency: "USD",
                },
                tip_money: {
                    amount: BigInt("100"),
                    currency: "USD",
                },
                version_token: "ODhwVQ35xwlzRuoZEwKXucfu7583sPTzK48c5zoGd0g6o",
            },
            idempotency_key: "956f8b13-e4ec-45d6-85e8-d1d95ef0c5de",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            payment: {
                id: "1QjqpBVyrI9S4H9sTGDWU9JeiWdZY",
                created_at: "2021-10-13T20:26:44.191Z",
                updated_at: "2021-10-13T20:26:44.364Z",
                amount_money: {
                    amount: BigInt("1000"),
                    currency: "USD",
                },
                tip_money: {
                    amount: BigInt("100"),
                    currency: "USD",
                },
                total_money: {
                    amount: BigInt("1100"),
                    currency: "USD",
                },
                app_fee_money: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                approved_money: {
                    amount: BigInt("1000"),
                    currency: "USD",
                },
                processing_fee: [{}],
                refunded_money: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                status: "APPROVED",
                delay_duration: "PT168H",
                delay_action: "CANCEL",
                delayed_until: "2021-10-20T20:26:44.191Z",
                source_type: "CARD",
                card_details: {
                    status: "AUTHORIZED",
                    card: {
                        card_brand: "VISA",
                        last_4: "1111",
                        exp_month: BigInt("11"),
                        exp_year: BigInt("2022"),
                        fingerprint: "sq-1-Hxim77tbdcbGejOejnoAklBVJed2YFLTmirfl8Q5XZzObTc8qY_U8RkwzoNL8dCEcQ",
                        card_type: "DEBIT",
                        prepaid_type: "NOT_PREPAID",
                        bin: "411111",
                    },
                    entry_method: "ON_FILE",
                    cvv_status: "CVV_ACCEPTED",
                    avs_status: "AVS_ACCEPTED",
                    auth_result_code: "68aLBM",
                    application_identifier: "application_identifier",
                    application_name: "application_name",
                    application_cryptogram: "application_cryptogram",
                    verification_method: "verification_method",
                    verification_results: "verification_results",
                    statement_description: "SQ *EXAMPLE TEST GOSQ.C",
                    card_payment_timeline: {
                        authorized_at: "2021-10-13T20:26:44.364Z",
                    },
                    refund_requires_card_presence: true,
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                cash_details: {
                    buyer_supplied_money: {},
                },
                bank_account_details: {
                    bank_name: "bank_name",
                    transfer_type: "transfer_type",
                    account_ownership_type: "account_ownership_type",
                    fingerprint: "fingerprint",
                    country: "country",
                    statement_description: "statement_description",
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                external_details: {
                    type: "type",
                    source: "source",
                    source_id: "source_id",
                },
                wallet_details: {
                    status: "status",
                    brand: "brand",
                },
                buy_now_pay_later_details: {
                    brand: "brand",
                },
                square_account_details: {
                    payment_source_token: "payment_source_token",
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                location_id: "L88917AVBK2S5",
                order_id: "nUSN9TdxpiK3SrQg3wzmf6r8LP9YY",
                reference_id: "reference_id",
                customer_id: "W92WH6P11H4Z77CTET0RNTGFW8",
                employee_id: "employee_id",
                team_member_id: "team_member_id",
                refund_ids: ["refund_ids"],
                risk_evaluation: {
                    created_at: "2021-10-13T20:26:45.271Z",
                    risk_level: "NORMAL",
                },
                terminal_checkout_id: "terminal_checkout_id",
                buyer_email_address: "buyer_email_address",
                billing_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                shipping_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                note: "Example Note",
                statement_description_identifier: "statement_description_identifier",
                capabilities: ["EDIT_AMOUNT_UP", "EDIT_AMOUNT_DOWN", "EDIT_TIP_AMOUNT_UP", "EDIT_TIP_AMOUNT_DOWN"],
                receipt_number: "1Qjq",
                receipt_url: "receipt_url",
                device_details: {
                    device_id: "device_id",
                    device_installation_id: "device_installation_id",
                    device_name: "device_name",
                },
                application_details: {
                    square_product: "ECOMMERCE_API",
                    application_id: "sq0ids-TcgftTEtKxJTRF1lCFJ9TA",
                },
                is_offline_payment: true,
                offline_payment_details: {
                    client_created_at: "client_created_at",
                },
                version_token: "rDrXnqiS7fJgexccgdpzmwqTiXui1aIKCp9EchZ7trE6o",
            },
        });
    });

    test("cancel", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            payment: {
                id: "1QjqpBVyrI9S4H9sTGDWU9JeiWdZY",
                created_at: "2021-10-13T20:26:44.191Z",
                updated_at: "2021-10-13T20:31:21.597Z",
                amount_money: { amount: BigInt(1000), currency: "USD" },
                tip_money: { amount: BigInt(100), currency: "USD" },
                total_money: { amount: BigInt(1100), currency: "USD" },
                app_fee_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                approved_money: { amount: BigInt(1000), currency: "USD" },
                processing_fee: [{}],
                refunded_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                status: "CANCELED",
                delay_duration: "PT168H",
                delay_action: "CANCEL",
                delayed_until: "2021-10-20T20:26:44.191Z",
                source_type: "CARD",
                card_details: {
                    status: "VOIDED",
                    card: {
                        card_brand: "VISA",
                        last_4: "1111",
                        exp_month: BigInt(11),
                        exp_year: BigInt(2022),
                        fingerprint: "sq-1-Hxim77tbdcbGejOejnoAklBVJed2YFLTmirfl8Q5XZzObTc8qY_U8RkwzoNL8dCEcQ",
                        card_type: "DEBIT",
                        prepaid_type: "NOT_PREPAID",
                        bin: "411111",
                    },
                    entry_method: "ON_FILE",
                    cvv_status: "CVV_ACCEPTED",
                    avs_status: "AVS_ACCEPTED",
                    auth_result_code: "68aLBM",
                    application_identifier: "application_identifier",
                    application_name: "application_name",
                    application_cryptogram: "application_cryptogram",
                    verification_method: "verification_method",
                    verification_results: "verification_results",
                    statement_description: "SQ *EXAMPLE TEST GOSQ.C",
                    card_payment_timeline: {
                        authorized_at: "2021-10-13T20:26:44.364Z",
                        voided_at: "2021-10-13T20:31:21.597Z",
                    },
                    refund_requires_card_presence: true,
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                cash_details: { buyer_supplied_money: {} },
                bank_account_details: {
                    bank_name: "bank_name",
                    transfer_type: "transfer_type",
                    account_ownership_type: "account_ownership_type",
                    fingerprint: "fingerprint",
                    country: "country",
                    statement_description: "statement_description",
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                external_details: { type: "type", source: "source", source_id: "source_id" },
                wallet_details: { status: "status", brand: "brand" },
                buy_now_pay_later_details: { brand: "brand" },
                square_account_details: {
                    payment_source_token: "payment_source_token",
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                location_id: "L88917AVBK2S5",
                order_id: "nUSN9TdxpiK3SrQg3wzmf6r8LP9YY",
                reference_id: "reference_id",
                customer_id: "W92WH6P11H4Z77CTET0RNTGFW8",
                employee_id: "employee_id",
                team_member_id: "team_member_id",
                refund_ids: ["refund_ids"],
                risk_evaluation: { created_at: "2021-10-13T20:26:45.271Z", risk_level: "NORMAL" },
                terminal_checkout_id: "terminal_checkout_id",
                buyer_email_address: "buyer_email_address",
                billing_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                shipping_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                note: "Example Note",
                statement_description_identifier: "statement_description_identifier",
                capabilities: ["capabilities"],
                receipt_number: "receipt_number",
                receipt_url: "receipt_url",
                device_details: {
                    device_id: "device_id",
                    device_installation_id: "device_installation_id",
                    device_name: "device_name",
                },
                application_details: {
                    square_product: "ECOMMERCE_API",
                    application_id: "sq0ids-TcgftTEtKxJTRF1lCFJ9TA",
                },
                is_offline_payment: true,
                offline_payment_details: { client_created_at: "client_created_at" },
                version_token: "N8AGYgEjCiY9Q57Jw7aVHEpBq8bzGCDCQMRX8Vs56N06o",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/payments/payment_id/cancel")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.payments.cancel({
            payment_id: "payment_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            payment: {
                id: "1QjqpBVyrI9S4H9sTGDWU9JeiWdZY",
                created_at: "2021-10-13T20:26:44.191Z",
                updated_at: "2021-10-13T20:31:21.597Z",
                amount_money: {
                    amount: BigInt("1000"),
                    currency: "USD",
                },
                tip_money: {
                    amount: BigInt("100"),
                    currency: "USD",
                },
                total_money: {
                    amount: BigInt("1100"),
                    currency: "USD",
                },
                app_fee_money: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                approved_money: {
                    amount: BigInt("1000"),
                    currency: "USD",
                },
                processing_fee: [{}],
                refunded_money: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                status: "CANCELED",
                delay_duration: "PT168H",
                delay_action: "CANCEL",
                delayed_until: "2021-10-20T20:26:44.191Z",
                source_type: "CARD",
                card_details: {
                    status: "VOIDED",
                    card: {
                        card_brand: "VISA",
                        last_4: "1111",
                        exp_month: BigInt("11"),
                        exp_year: BigInt("2022"),
                        fingerprint: "sq-1-Hxim77tbdcbGejOejnoAklBVJed2YFLTmirfl8Q5XZzObTc8qY_U8RkwzoNL8dCEcQ",
                        card_type: "DEBIT",
                        prepaid_type: "NOT_PREPAID",
                        bin: "411111",
                    },
                    entry_method: "ON_FILE",
                    cvv_status: "CVV_ACCEPTED",
                    avs_status: "AVS_ACCEPTED",
                    auth_result_code: "68aLBM",
                    application_identifier: "application_identifier",
                    application_name: "application_name",
                    application_cryptogram: "application_cryptogram",
                    verification_method: "verification_method",
                    verification_results: "verification_results",
                    statement_description: "SQ *EXAMPLE TEST GOSQ.C",
                    card_payment_timeline: {
                        authorized_at: "2021-10-13T20:26:44.364Z",
                        voided_at: "2021-10-13T20:31:21.597Z",
                    },
                    refund_requires_card_presence: true,
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                cash_details: {
                    buyer_supplied_money: {},
                },
                bank_account_details: {
                    bank_name: "bank_name",
                    transfer_type: "transfer_type",
                    account_ownership_type: "account_ownership_type",
                    fingerprint: "fingerprint",
                    country: "country",
                    statement_description: "statement_description",
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                external_details: {
                    type: "type",
                    source: "source",
                    source_id: "source_id",
                },
                wallet_details: {
                    status: "status",
                    brand: "brand",
                },
                buy_now_pay_later_details: {
                    brand: "brand",
                },
                square_account_details: {
                    payment_source_token: "payment_source_token",
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                location_id: "L88917AVBK2S5",
                order_id: "nUSN9TdxpiK3SrQg3wzmf6r8LP9YY",
                reference_id: "reference_id",
                customer_id: "W92WH6P11H4Z77CTET0RNTGFW8",
                employee_id: "employee_id",
                team_member_id: "team_member_id",
                refund_ids: ["refund_ids"],
                risk_evaluation: {
                    created_at: "2021-10-13T20:26:45.271Z",
                    risk_level: "NORMAL",
                },
                terminal_checkout_id: "terminal_checkout_id",
                buyer_email_address: "buyer_email_address",
                billing_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                shipping_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                note: "Example Note",
                statement_description_identifier: "statement_description_identifier",
                capabilities: ["capabilities"],
                receipt_number: "receipt_number",
                receipt_url: "receipt_url",
                device_details: {
                    device_id: "device_id",
                    device_installation_id: "device_installation_id",
                    device_name: "device_name",
                },
                application_details: {
                    square_product: "ECOMMERCE_API",
                    application_id: "sq0ids-TcgftTEtKxJTRF1lCFJ9TA",
                },
                is_offline_payment: true,
                offline_payment_details: {
                    client_created_at: "client_created_at",
                },
                version_token: "N8AGYgEjCiY9Q57Jw7aVHEpBq8bzGCDCQMRX8Vs56N06o",
            },
        });
    });

    test("complete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            payment: {
                id: "bP9mAsEMYPUGjjGNaNO5ZDVyLhSZY",
                created_at: "2021-10-13T19:34:33.524Z",
                updated_at: "2021-10-13T19:34:34.339Z",
                amount_money: { amount: BigInt(555), currency: "USD" },
                tip_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                total_money: { amount: BigInt(555), currency: "USD" },
                app_fee_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                approved_money: { amount: BigInt(555), currency: "USD" },
                processing_fee: [
                    {
                        effective_at: "2021-10-13T21:34:35.000Z",
                        type: "INITIAL",
                        amount_money: { amount: BigInt(34), currency: "USD" },
                    },
                ],
                refunded_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                status: "COMPLETED",
                delay_duration: "PT168H",
                delay_action: "CANCEL",
                delayed_until: "2021-10-20T19:34:33.524Z",
                source_type: "CARD",
                card_details: {
                    status: "CAPTURED",
                    card: {
                        card_brand: "VISA",
                        last_4: "1111",
                        exp_month: BigInt(11),
                        exp_year: BigInt(2022),
                        fingerprint: "sq-1-Hxim77tbdcbGejOejnoAklBVJed2YFLTmirfl8Q5XZzObTc8qY_U8RkwzoNL8dCEcQ",
                        card_type: "DEBIT",
                        prepaid_type: "NOT_PREPAID",
                        bin: "411111",
                    },
                    entry_method: "KEYED",
                    cvv_status: "CVV_ACCEPTED",
                    avs_status: "AVS_ACCEPTED",
                    auth_result_code: "2Nkw7q",
                    application_identifier: "application_identifier",
                    application_name: "application_name",
                    application_cryptogram: "application_cryptogram",
                    verification_method: "verification_method",
                    verification_results: "verification_results",
                    statement_description: "SQ *EXAMPLE TEST GOSQ.C",
                    card_payment_timeline: {
                        authorized_at: "2021-10-13T19:34:33.680Z",
                        captured_at: "2021-10-13T19:34:34.340Z",
                    },
                    refund_requires_card_presence: true,
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                cash_details: { buyer_supplied_money: {} },
                bank_account_details: {
                    bank_name: "bank_name",
                    transfer_type: "transfer_type",
                    account_ownership_type: "account_ownership_type",
                    fingerprint: "fingerprint",
                    country: "country",
                    statement_description: "statement_description",
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                external_details: { type: "type", source: "source", source_id: "source_id" },
                wallet_details: { status: "status", brand: "brand" },
                buy_now_pay_later_details: { brand: "brand" },
                square_account_details: {
                    payment_source_token: "payment_source_token",
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                location_id: "L88917AVBK2S5",
                order_id: "d7eKah653Z579f3gVtjlxpSlmUcZY",
                reference_id: "reference_id",
                customer_id: "customer_id",
                employee_id: "TMoK_ogh6rH1o4dV",
                team_member_id: "TMoK_ogh6rH1o4dV",
                refund_ids: ["refund_ids"],
                risk_evaluation: { created_at: "created_at", risk_level: "PENDING" },
                terminal_checkout_id: "terminal_checkout_id",
                buyer_email_address: "buyer_email_address",
                billing_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                shipping_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                note: "Test Note",
                statement_description_identifier: "statement_description_identifier",
                capabilities: ["capabilities"],
                receipt_number: "bP9m",
                receipt_url: "https://squareup.com/receipt/preview/bP9mAsEMYPUGjjGNaNO5ZDVyLhSZY",
                device_details: {
                    device_id: "device_id",
                    device_installation_id: "device_installation_id",
                    device_name: "device_name",
                },
                application_details: {
                    square_product: "VIRTUAL_TERMINAL",
                    application_id: "sq0ids-Pw67AZAlLVB7hsRmwlJPuA",
                },
                is_offline_payment: true,
                offline_payment_details: { client_created_at: "client_created_at" },
                version_token: "56pRkL3slrzet2iQrTp9n0bdJVYTB9YEWdTNjQfZOPV6o",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/payments/payment_id/complete")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.payments.complete({
            payment_id: "payment_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            payment: {
                id: "bP9mAsEMYPUGjjGNaNO5ZDVyLhSZY",
                created_at: "2021-10-13T19:34:33.524Z",
                updated_at: "2021-10-13T19:34:34.339Z",
                amount_money: {
                    amount: BigInt("555"),
                    currency: "USD",
                },
                tip_money: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                total_money: {
                    amount: BigInt("555"),
                    currency: "USD",
                },
                app_fee_money: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                approved_money: {
                    amount: BigInt("555"),
                    currency: "USD",
                },
                processing_fee: [
                    {
                        effective_at: "2021-10-13T21:34:35.000Z",
                        type: "INITIAL",
                        amount_money: {
                            amount: BigInt("34"),
                            currency: "USD",
                        },
                    },
                ],
                refunded_money: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                status: "COMPLETED",
                delay_duration: "PT168H",
                delay_action: "CANCEL",
                delayed_until: "2021-10-20T19:34:33.524Z",
                source_type: "CARD",
                card_details: {
                    status: "CAPTURED",
                    card: {
                        card_brand: "VISA",
                        last_4: "1111",
                        exp_month: BigInt("11"),
                        exp_year: BigInt("2022"),
                        fingerprint: "sq-1-Hxim77tbdcbGejOejnoAklBVJed2YFLTmirfl8Q5XZzObTc8qY_U8RkwzoNL8dCEcQ",
                        card_type: "DEBIT",
                        prepaid_type: "NOT_PREPAID",
                        bin: "411111",
                    },
                    entry_method: "KEYED",
                    cvv_status: "CVV_ACCEPTED",
                    avs_status: "AVS_ACCEPTED",
                    auth_result_code: "2Nkw7q",
                    application_identifier: "application_identifier",
                    application_name: "application_name",
                    application_cryptogram: "application_cryptogram",
                    verification_method: "verification_method",
                    verification_results: "verification_results",
                    statement_description: "SQ *EXAMPLE TEST GOSQ.C",
                    card_payment_timeline: {
                        authorized_at: "2021-10-13T19:34:33.680Z",
                        captured_at: "2021-10-13T19:34:34.340Z",
                    },
                    refund_requires_card_presence: true,
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                cash_details: {
                    buyer_supplied_money: {},
                },
                bank_account_details: {
                    bank_name: "bank_name",
                    transfer_type: "transfer_type",
                    account_ownership_type: "account_ownership_type",
                    fingerprint: "fingerprint",
                    country: "country",
                    statement_description: "statement_description",
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                external_details: {
                    type: "type",
                    source: "source",
                    source_id: "source_id",
                },
                wallet_details: {
                    status: "status",
                    brand: "brand",
                },
                buy_now_pay_later_details: {
                    brand: "brand",
                },
                square_account_details: {
                    payment_source_token: "payment_source_token",
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                location_id: "L88917AVBK2S5",
                order_id: "d7eKah653Z579f3gVtjlxpSlmUcZY",
                reference_id: "reference_id",
                customer_id: "customer_id",
                employee_id: "TMoK_ogh6rH1o4dV",
                team_member_id: "TMoK_ogh6rH1o4dV",
                refund_ids: ["refund_ids"],
                risk_evaluation: {
                    created_at: "created_at",
                    risk_level: "PENDING",
                },
                terminal_checkout_id: "terminal_checkout_id",
                buyer_email_address: "buyer_email_address",
                billing_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                shipping_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                note: "Test Note",
                statement_description_identifier: "statement_description_identifier",
                capabilities: ["capabilities"],
                receipt_number: "bP9m",
                receipt_url: "https://squareup.com/receipt/preview/bP9mAsEMYPUGjjGNaNO5ZDVyLhSZY",
                device_details: {
                    device_id: "device_id",
                    device_installation_id: "device_installation_id",
                    device_name: "device_name",
                },
                application_details: {
                    square_product: "VIRTUAL_TERMINAL",
                    application_id: "sq0ids-Pw67AZAlLVB7hsRmwlJPuA",
                },
                is_offline_payment: true,
                offline_payment_details: {
                    client_created_at: "client_created_at",
                },
                version_token: "56pRkL3slrzet2iQrTp9n0bdJVYTB9YEWdTNjQfZOPV6o",
            },
        });
    });
});
