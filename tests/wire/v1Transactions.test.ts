/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SquareClient } from "../../src/Client";

describe("V1Transactions", () => {
    test("V1ListOrders", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                id: "id",
                buyer_email: "buyer_email",
                recipient_name: "recipient_name",
                recipient_phone_number: "recipient_phone_number",
                state: "PENDING",
                shipping_address: {
                    address_line_1: "address_line_1",
                    address_line_2: "address_line_2",
                    address_line_3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality_2: "sublocality_2",
                    sublocality_3: "sublocality_3",
                    administrative_district_level_1: "administrative_district_level_1",
                    administrative_district_level_2: "administrative_district_level_2",
                    administrative_district_level_3: "administrative_district_level_3",
                    postal_code: "postal_code",
                    country: "ZZ",
                    first_name: "first_name",
                    last_name: "last_name",
                },
                subtotal_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
                total_shipping_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
                total_tax_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
                total_price_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
                total_discount_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
                created_at: "created_at",
                updated_at: "updated_at",
                expires_at: "expires_at",
                payment_id: "payment_id",
                buyer_note: "buyer_note",
                completed_note: "completed_note",
                refunded_note: "refunded_note",
                canceled_note: "canceled_note",
                tender: {
                    id: "id",
                    type: "CREDIT_CARD",
                    name: "name",
                    employee_id: "employee_id",
                    receipt_url: "receipt_url",
                    card_brand: "OTHER_BRAND",
                    pan_suffix: "pan_suffix",
                    entry_method: "MANUAL",
                    payment_note: "payment_note",
                    tendered_at: "tendered_at",
                    settled_at: "settled_at",
                    is_exchange: true,
                },
                order_history: [{}],
                promo_code: "promo_code",
                btc_receive_address: "btc_receive_address",
                btc_price_satoshi: 1.1,
            },
        ];
        server
            .mockEndpoint()
            .get("/v1/location_id/orders")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.v1Transactions.v1ListOrders({
            locationId: "location_id",
            order: "DESC",
            limit: 1,
            batchToken: "batch_token",
        });
        expect(response).toEqual([
            {
                errors: [
                    {
                        category: "API_ERROR",
                        code: "INTERNAL_SERVER_ERROR",
                    },
                ],
                id: "id",
                buyerEmail: "buyer_email",
                recipientName: "recipient_name",
                recipientPhoneNumber: "recipient_phone_number",
                state: "PENDING",
                shippingAddress: {
                    addressLine1: "address_line_1",
                    addressLine2: "address_line_2",
                    addressLine3: "address_line_3",
                    locality: "locality",
                    sublocality: "sublocality",
                    sublocality2: "sublocality_2",
                    sublocality3: "sublocality_3",
                    administrativeDistrictLevel1: "administrative_district_level_1",
                    administrativeDistrictLevel2: "administrative_district_level_2",
                    administrativeDistrictLevel3: "administrative_district_level_3",
                    postalCode: "postal_code",
                    country: "ZZ",
                    firstName: "first_name",
                    lastName: "last_name",
                },
                subtotalMoney: {
                    amount: 1,
                    currencyCode: "UNKNOWN_CURRENCY",
                },
                totalShippingMoney: {
                    amount: 1,
                    currencyCode: "UNKNOWN_CURRENCY",
                },
                totalTaxMoney: {
                    amount: 1,
                    currencyCode: "UNKNOWN_CURRENCY",
                },
                totalPriceMoney: {
                    amount: 1,
                    currencyCode: "UNKNOWN_CURRENCY",
                },
                totalDiscountMoney: {
                    amount: 1,
                    currencyCode: "UNKNOWN_CURRENCY",
                },
                createdAt: "created_at",
                updatedAt: "updated_at",
                expiresAt: "expires_at",
                paymentId: "payment_id",
                buyerNote: "buyer_note",
                completedNote: "completed_note",
                refundedNote: "refunded_note",
                canceledNote: "canceled_note",
                tender: {
                    id: "id",
                    type: "CREDIT_CARD",
                    name: "name",
                    employeeId: "employee_id",
                    receiptUrl: "receipt_url",
                    cardBrand: "OTHER_BRAND",
                    panSuffix: "pan_suffix",
                    entryMethod: "MANUAL",
                    paymentNote: "payment_note",
                    tenderedAt: "tendered_at",
                    settledAt: "settled_at",
                    isExchange: true,
                },
                orderHistory: [{}],
                promoCode: "promo_code",
                btcReceiveAddress: "btc_receive_address",
                btcPriceSatoshi: 1.1,
            },
        ]);
    });

    test("V1RetrieveOrder", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            id: "id",
            buyer_email: "buyer_email",
            recipient_name: "recipient_name",
            recipient_phone_number: "recipient_phone_number",
            state: "PENDING",
            shipping_address: {
                address_line_1: "address_line_1",
                address_line_2: "address_line_2",
                address_line_3: "address_line_3",
                locality: "locality",
                sublocality: "sublocality",
                sublocality_2: "sublocality_2",
                sublocality_3: "sublocality_3",
                administrative_district_level_1: "administrative_district_level_1",
                administrative_district_level_2: "administrative_district_level_2",
                administrative_district_level_3: "administrative_district_level_3",
                postal_code: "postal_code",
                country: "ZZ",
                first_name: "first_name",
                last_name: "last_name",
            },
            subtotal_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
            total_shipping_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
            total_tax_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
            total_price_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
            total_discount_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
            created_at: "created_at",
            updated_at: "updated_at",
            expires_at: "expires_at",
            payment_id: "payment_id",
            buyer_note: "buyer_note",
            completed_note: "completed_note",
            refunded_note: "refunded_note",
            canceled_note: "canceled_note",
            tender: {
                id: "id",
                type: "CREDIT_CARD",
                name: "name",
                employee_id: "employee_id",
                receipt_url: "receipt_url",
                card_brand: "OTHER_BRAND",
                pan_suffix: "pan_suffix",
                entry_method: "MANUAL",
                payment_note: "payment_note",
                total_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
                tendered_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
                tendered_at: "tendered_at",
                settled_at: "settled_at",
                change_back_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
                refunded_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
                is_exchange: true,
            },
            order_history: [{ action: "ORDER_PLACED", created_at: "created_at" }],
            promo_code: "promo_code",
            btc_receive_address: "btc_receive_address",
            btc_price_satoshi: 1.1,
        };
        server
            .mockEndpoint()
            .get("/v1/location_id/orders/order_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.v1Transactions.v1RetrieveOrder({
            locationId: "location_id",
            orderId: "order_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            id: "id",
            buyerEmail: "buyer_email",
            recipientName: "recipient_name",
            recipientPhoneNumber: "recipient_phone_number",
            state: "PENDING",
            shippingAddress: {
                addressLine1: "address_line_1",
                addressLine2: "address_line_2",
                addressLine3: "address_line_3",
                locality: "locality",
                sublocality: "sublocality",
                sublocality2: "sublocality_2",
                sublocality3: "sublocality_3",
                administrativeDistrictLevel1: "administrative_district_level_1",
                administrativeDistrictLevel2: "administrative_district_level_2",
                administrativeDistrictLevel3: "administrative_district_level_3",
                postalCode: "postal_code",
                country: "ZZ",
                firstName: "first_name",
                lastName: "last_name",
            },
            subtotalMoney: {
                amount: 1,
                currencyCode: "UNKNOWN_CURRENCY",
            },
            totalShippingMoney: {
                amount: 1,
                currencyCode: "UNKNOWN_CURRENCY",
            },
            totalTaxMoney: {
                amount: 1,
                currencyCode: "UNKNOWN_CURRENCY",
            },
            totalPriceMoney: {
                amount: 1,
                currencyCode: "UNKNOWN_CURRENCY",
            },
            totalDiscountMoney: {
                amount: 1,
                currencyCode: "UNKNOWN_CURRENCY",
            },
            createdAt: "created_at",
            updatedAt: "updated_at",
            expiresAt: "expires_at",
            paymentId: "payment_id",
            buyerNote: "buyer_note",
            completedNote: "completed_note",
            refundedNote: "refunded_note",
            canceledNote: "canceled_note",
            tender: {
                id: "id",
                type: "CREDIT_CARD",
                name: "name",
                employeeId: "employee_id",
                receiptUrl: "receipt_url",
                cardBrand: "OTHER_BRAND",
                panSuffix: "pan_suffix",
                entryMethod: "MANUAL",
                paymentNote: "payment_note",
                totalMoney: {
                    amount: 1,
                    currencyCode: "UNKNOWN_CURRENCY",
                },
                tenderedMoney: {
                    amount: 1,
                    currencyCode: "UNKNOWN_CURRENCY",
                },
                tenderedAt: "tendered_at",
                settledAt: "settled_at",
                changeBackMoney: {
                    amount: 1,
                    currencyCode: "UNKNOWN_CURRENCY",
                },
                refundedMoney: {
                    amount: 1,
                    currencyCode: "UNKNOWN_CURRENCY",
                },
                isExchange: true,
            },
            orderHistory: [
                {
                    action: "ORDER_PLACED",
                    createdAt: "created_at",
                },
            ],
            promoCode: "promo_code",
            btcReceiveAddress: "btc_receive_address",
            btcPriceSatoshi: 1.1,
        });
    });

    test("V1UpdateOrder", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { action: "COMPLETE" };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            id: "id",
            buyer_email: "buyer_email",
            recipient_name: "recipient_name",
            recipient_phone_number: "recipient_phone_number",
            state: "PENDING",
            shipping_address: {
                address_line_1: "address_line_1",
                address_line_2: "address_line_2",
                address_line_3: "address_line_3",
                locality: "locality",
                sublocality: "sublocality",
                sublocality_2: "sublocality_2",
                sublocality_3: "sublocality_3",
                administrative_district_level_1: "administrative_district_level_1",
                administrative_district_level_2: "administrative_district_level_2",
                administrative_district_level_3: "administrative_district_level_3",
                postal_code: "postal_code",
                country: "ZZ",
                first_name: "first_name",
                last_name: "last_name",
            },
            subtotal_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
            total_shipping_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
            total_tax_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
            total_price_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
            total_discount_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
            created_at: "created_at",
            updated_at: "updated_at",
            expires_at: "expires_at",
            payment_id: "payment_id",
            buyer_note: "buyer_note",
            completed_note: "completed_note",
            refunded_note: "refunded_note",
            canceled_note: "canceled_note",
            tender: {
                id: "id",
                type: "CREDIT_CARD",
                name: "name",
                employee_id: "employee_id",
                receipt_url: "receipt_url",
                card_brand: "OTHER_BRAND",
                pan_suffix: "pan_suffix",
                entry_method: "MANUAL",
                payment_note: "payment_note",
                total_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
                tendered_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
                tendered_at: "tendered_at",
                settled_at: "settled_at",
                change_back_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
                refunded_money: { amount: 1, currency_code: "UNKNOWN_CURRENCY" },
                is_exchange: true,
            },
            order_history: [{ action: "ORDER_PLACED", created_at: "created_at" }],
            promo_code: "promo_code",
            btc_receive_address: "btc_receive_address",
            btc_price_satoshi: 1.1,
        };
        server
            .mockEndpoint()
            .put("/v1/location_id/orders/order_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.v1Transactions.v1UpdateOrder({
            locationId: "location_id",
            orderId: "order_id",
            action: "COMPLETE",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            id: "id",
            buyerEmail: "buyer_email",
            recipientName: "recipient_name",
            recipientPhoneNumber: "recipient_phone_number",
            state: "PENDING",
            shippingAddress: {
                addressLine1: "address_line_1",
                addressLine2: "address_line_2",
                addressLine3: "address_line_3",
                locality: "locality",
                sublocality: "sublocality",
                sublocality2: "sublocality_2",
                sublocality3: "sublocality_3",
                administrativeDistrictLevel1: "administrative_district_level_1",
                administrativeDistrictLevel2: "administrative_district_level_2",
                administrativeDistrictLevel3: "administrative_district_level_3",
                postalCode: "postal_code",
                country: "ZZ",
                firstName: "first_name",
                lastName: "last_name",
            },
            subtotalMoney: {
                amount: 1,
                currencyCode: "UNKNOWN_CURRENCY",
            },
            totalShippingMoney: {
                amount: 1,
                currencyCode: "UNKNOWN_CURRENCY",
            },
            totalTaxMoney: {
                amount: 1,
                currencyCode: "UNKNOWN_CURRENCY",
            },
            totalPriceMoney: {
                amount: 1,
                currencyCode: "UNKNOWN_CURRENCY",
            },
            totalDiscountMoney: {
                amount: 1,
                currencyCode: "UNKNOWN_CURRENCY",
            },
            createdAt: "created_at",
            updatedAt: "updated_at",
            expiresAt: "expires_at",
            paymentId: "payment_id",
            buyerNote: "buyer_note",
            completedNote: "completed_note",
            refundedNote: "refunded_note",
            canceledNote: "canceled_note",
            tender: {
                id: "id",
                type: "CREDIT_CARD",
                name: "name",
                employeeId: "employee_id",
                receiptUrl: "receipt_url",
                cardBrand: "OTHER_BRAND",
                panSuffix: "pan_suffix",
                entryMethod: "MANUAL",
                paymentNote: "payment_note",
                totalMoney: {
                    amount: 1,
                    currencyCode: "UNKNOWN_CURRENCY",
                },
                tenderedMoney: {
                    amount: 1,
                    currencyCode: "UNKNOWN_CURRENCY",
                },
                tenderedAt: "tendered_at",
                settledAt: "settled_at",
                changeBackMoney: {
                    amount: 1,
                    currencyCode: "UNKNOWN_CURRENCY",
                },
                refundedMoney: {
                    amount: 1,
                    currencyCode: "UNKNOWN_CURRENCY",
                },
                isExchange: true,
            },
            orderHistory: [
                {
                    action: "ORDER_PLACED",
                    createdAt: "created_at",
                },
            ],
            promoCode: "promo_code",
            btcReceiveAddress: "btc_receive_address",
            btcPriceSatoshi: 1.1,
        });
    });
});
