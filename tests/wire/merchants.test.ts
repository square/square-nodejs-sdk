// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("Merchants", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            merchant: [
                {
                    id: "DM7VKY8Q63GNP",
                    business_name: "Apple A Day",
                    country: "US",
                    language_code: "en-US",
                    currency: "USD",
                    status: "ACTIVE",
                    main_location_id: "9A65CGC72ZQG1",
                    created_at: "2021-12-10T19:25:52.484Z",
                },
            ],
            cursor: 1,
        };
        server.mockEndpoint().get("/v2/merchants").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            merchant: [
                {
                    id: "DM7VKY8Q63GNP",
                    businessName: "Apple A Day",
                    country: "US",
                    languageCode: "en-US",
                    currency: "USD",
                    status: "ACTIVE",
                    mainLocationId: "9A65CGC72ZQG1",
                    createdAt: "2021-12-10T19:25:52.484Z",
                },
            ],
            cursor: 1,
        };
        const page = await client.merchants.list({
            cursor: 1,
        });

        expect(expected.merchant).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.merchant).toEqual(nextPage.data);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            merchant: {
                id: "DM7VKY8Q63GNP",
                business_name: "Apple A Day",
                country: "US",
                language_code: "en-US",
                currency: "USD",
                status: "ACTIVE",
                main_location_id: "9A65CGC72ZQG1",
                created_at: "2021-12-10T19:25:52.484Z",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/merchants/merchant_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.merchants.get({
            merchantId: "merchant_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            merchant: {
                id: "DM7VKY8Q63GNP",
                businessName: "Apple A Day",
                country: "US",
                languageCode: "en-US",
                currency: "USD",
                status: "ACTIVE",
                mainLocationId: "9A65CGC72ZQG1",
                createdAt: "2021-12-10T19:25:52.484Z",
            },
        });
    });
});
