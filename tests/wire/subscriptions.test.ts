/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SquareClient } from "../../src/Client";

describe("Subscriptions", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "8193148c-9586-11e6-99f9-28cfe92138cf",
            location_id: "S8GWD5R9QB376",
            plan_variation_id: "6JHXF3B2CW3YKHDV4XEM674H",
            customer_id: "CHFGVKYY8RSV93M5KCYTG4PN0G",
            start_date: "2023-06-20",
            card_id: "ccof:qy5x8hHGYsgLrp4Q4GB",
            timezone: "America/Los_Angeles",
            source: { name: "My Application" },
            phases: [{ ordinal: BigInt(0), order_template_id: "U2NaowWxzXwpsZU697x7ZHOAnCNZY" }],
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            subscription: {
                id: "56214fb2-cc85-47a1-93bc-44f3766bb56f",
                location_id: "S8GWD5R9QB376",
                plan_variation_id: "6JHXF3B2CW3YKHDV4XEM674H",
                customer_id: "CHFGVKYY8RSV93M5KCYTG4PN0G",
                start_date: "2023-06-20",
                canceled_date: "canceled_date",
                charged_through_date: "charged_through_date",
                status: "ACTIVE",
                tax_percentage: "tax_percentage",
                invoice_ids: ["invoice_ids"],
                price_override_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                version: BigInt(1),
                created_at: "2023-06-20T21:53:10Z",
                card_id: "ccof:qy5x8hHGYsgLrp4Q4GB",
                timezone: "America/Los_Angeles",
                source: { name: "My Application" },
                actions: [{}],
                monthly_billing_anchor_date: 1,
                phases: [
                    {
                        uid: "873451e0-745b-4e87-ab0b-c574933fe616",
                        ordinal: BigInt(0),
                        order_template_id: "U2NaowWxzXwpsZU697x7ZHOAnCNZY",
                        plan_phase_uid: "X2Q2AONPB3RB64Y27S25QCZP",
                    },
                ],
                completed_date: "completed_date",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/subscriptions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.create({
            idempotencyKey: "8193148c-9586-11e6-99f9-28cfe92138cf",
            locationId: "S8GWD5R9QB376",
            planVariationId: "6JHXF3B2CW3YKHDV4XEM674H",
            customerId: "CHFGVKYY8RSV93M5KCYTG4PN0G",
            startDate: "2023-06-20",
            cardId: "ccof:qy5x8hHGYsgLrp4Q4GB",
            timezone: "America/Los_Angeles",
            source: {
                name: "My Application",
            },
            phases: [
                {
                    ordinal: BigInt("0"),
                    orderTemplateId: "U2NaowWxzXwpsZU697x7ZHOAnCNZY",
                },
            ],
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            subscription: {
                id: "56214fb2-cc85-47a1-93bc-44f3766bb56f",
                locationId: "S8GWD5R9QB376",
                planVariationId: "6JHXF3B2CW3YKHDV4XEM674H",
                customerId: "CHFGVKYY8RSV93M5KCYTG4PN0G",
                startDate: "2023-06-20",
                canceledDate: "canceled_date",
                chargedThroughDate: "charged_through_date",
                status: "ACTIVE",
                taxPercentage: "tax_percentage",
                invoiceIds: ["invoice_ids"],
                priceOverrideMoney: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                version: BigInt("1"),
                createdAt: "2023-06-20T21:53:10Z",
                cardId: "ccof:qy5x8hHGYsgLrp4Q4GB",
                timezone: "America/Los_Angeles",
                source: {
                    name: "My Application",
                },
                actions: [{}],
                monthlyBillingAnchorDate: 1,
                phases: [
                    {
                        uid: "873451e0-745b-4e87-ab0b-c574933fe616",
                        ordinal: BigInt("0"),
                        orderTemplateId: "U2NaowWxzXwpsZU697x7ZHOAnCNZY",
                        planPhaseUid: "X2Q2AONPB3RB64Y27S25QCZP",
                    },
                ],
                completedDate: "completed_date",
            },
        });
    });

    test("BulkSwapPlan", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            new_plan_variation_id: "FQ7CDXXWSLUJRPM3GFJSJGZ7",
            old_plan_variation_id: "6JHXF3B2CW3YKHDV4XEM674H",
            location_id: "S8GWD5R9QB376",
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            affected_subscriptions: 12,
        };
        server
            .mockEndpoint()
            .post("/v2/subscriptions/bulk-swap-plan")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.bulkSwapPlan({
            newPlanVariationId: "FQ7CDXXWSLUJRPM3GFJSJGZ7",
            oldPlanVariationId: "6JHXF3B2CW3YKHDV4XEM674H",
            locationId: "S8GWD5R9QB376",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            affectedSubscriptions: 12,
        });
    });

    test("search", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            query: {
                filter: {
                    customer_ids: ["CHFGVKYY8RSV93M5KCYTG4PN0G"],
                    location_ids: ["S8GWD5R9QB376"],
                    source_names: ["My App"],
                },
            },
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            subscriptions: [
                {
                    id: "de86fc96-8664-474b-af1a-abbe59cacf0e",
                    location_id: "S8GWD5R9QB376",
                    plan_variation_id: "L3TJVDHVBEQEGQDEZL2JJM7R",
                    customer_id: "CHFGVKYY8RSV93M5KCYTG4PN0G",
                    start_date: "2021-10-20",
                    canceled_date: "2021-10-30",
                    charged_through_date: "2021-11-20",
                    status: "CANCELED",
                    tax_percentage: "tax_percentage",
                    invoice_ids: ["invoice_ids"],
                    version: BigInt(1000000),
                    created_at: "2021-10-20T21:53:10Z",
                    card_id: "ccof:mueUsvgajChmjEbp4GB",
                    timezone: "UTC",
                    source: { name: "My Application" },
                    actions: [{}],
                    monthly_billing_anchor_date: 1,
                    phases: [{}],
                    completed_date: "completed_date",
                },
                {
                    id: "56214fb2-cc85-47a1-93bc-44f3766bb56f",
                    location_id: "S8GWD5R9QB376",
                    plan_variation_id: "6JHXF3B2CW3YKHDV4XEM674H",
                    customer_id: "CHFGVKYY8RSV93M5KCYTG4PN0G",
                    start_date: "2022-01-19",
                    canceled_date: "canceled_date",
                    charged_through_date: "2022-08-19",
                    status: "PAUSED",
                    tax_percentage: "5",
                    invoice_ids: ["grebK0Q_l8H4fqoMMVvt-Q", "rcX_i3sNmHTGKhI4W2mceA"],
                    price_override_money: { amount: BigInt(1000), currency: "USD" },
                    version: BigInt(2),
                    created_at: "2022-01-19T21:53:10Z",
                    card_id: "card_id",
                    timezone: "America/Los_Angeles",
                    source: { name: "My Application" },
                    actions: [{}],
                    monthly_billing_anchor_date: 1,
                    phases: [{}],
                    completed_date: "completed_date",
                },
                {
                    id: "56214fb2-cc85-47a1-93bc-44f3766bb56f",
                    location_id: "S8GWD5R9QB376",
                    plan_variation_id: "6JHXF3B2CW3YKHDV4XEM674H",
                    customer_id: "CHFGVKYY8RSV93M5KCYTG4PN0G",
                    start_date: "2023-06-20",
                    canceled_date: "canceled_date",
                    charged_through_date: "charged_through_date",
                    status: "ACTIVE",
                    tax_percentage: "tax_percentage",
                    invoice_ids: ["invoice_ids"],
                    version: BigInt(1),
                    created_at: "2023-06-20T21:53:10Z",
                    card_id: "ccof:qy5x8hHGYsgLrp4Q4GB",
                    timezone: "America/Los_Angeles",
                    source: { name: "My Application" },
                    actions: [{}],
                    monthly_billing_anchor_date: 1,
                    phases: [
                        {
                            uid: "873451e0-745b-4e87-ab0b-c574933fe616",
                            ordinal: BigInt(0),
                            order_template_id: "U2NaowWxzXwpsZU697x7ZHOAnCNZY",
                            plan_phase_uid: "X2Q2AONPB3RB64Y27S25QCZP",
                        },
                    ],
                    completed_date: "completed_date",
                },
            ],
            cursor: "cursor",
        };
        server
            .mockEndpoint()
            .post("/v2/subscriptions/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.search({
            query: {
                filter: {
                    customerIds: ["CHFGVKYY8RSV93M5KCYTG4PN0G"],
                    locationIds: ["S8GWD5R9QB376"],
                    sourceNames: ["My App"],
                },
            },
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            subscriptions: [
                {
                    id: "de86fc96-8664-474b-af1a-abbe59cacf0e",
                    locationId: "S8GWD5R9QB376",
                    planVariationId: "L3TJVDHVBEQEGQDEZL2JJM7R",
                    customerId: "CHFGVKYY8RSV93M5KCYTG4PN0G",
                    startDate: "2021-10-20",
                    canceledDate: "2021-10-30",
                    chargedThroughDate: "2021-11-20",
                    status: "CANCELED",
                    taxPercentage: "tax_percentage",
                    invoiceIds: ["invoice_ids"],
                    version: BigInt("1000000"),
                    createdAt: "2021-10-20T21:53:10Z",
                    cardId: "ccof:mueUsvgajChmjEbp4GB",
                    timezone: "UTC",
                    source: {
                        name: "My Application",
                    },
                    actions: [{}],
                    monthlyBillingAnchorDate: 1,
                    phases: [{}],
                    completedDate: "completed_date",
                },
                {
                    id: "56214fb2-cc85-47a1-93bc-44f3766bb56f",
                    locationId: "S8GWD5R9QB376",
                    planVariationId: "6JHXF3B2CW3YKHDV4XEM674H",
                    customerId: "CHFGVKYY8RSV93M5KCYTG4PN0G",
                    startDate: "2022-01-19",
                    canceledDate: "canceled_date",
                    chargedThroughDate: "2022-08-19",
                    status: "PAUSED",
                    taxPercentage: "5",
                    invoiceIds: ["grebK0Q_l8H4fqoMMVvt-Q", "rcX_i3sNmHTGKhI4W2mceA"],
                    priceOverrideMoney: {
                        amount: BigInt("1000"),
                        currency: "USD",
                    },
                    version: BigInt("2"),
                    createdAt: "2022-01-19T21:53:10Z",
                    cardId: "card_id",
                    timezone: "America/Los_Angeles",
                    source: {
                        name: "My Application",
                    },
                    actions: [{}],
                    monthlyBillingAnchorDate: 1,
                    phases: [{}],
                    completedDate: "completed_date",
                },
                {
                    id: "56214fb2-cc85-47a1-93bc-44f3766bb56f",
                    locationId: "S8GWD5R9QB376",
                    planVariationId: "6JHXF3B2CW3YKHDV4XEM674H",
                    customerId: "CHFGVKYY8RSV93M5KCYTG4PN0G",
                    startDate: "2023-06-20",
                    canceledDate: "canceled_date",
                    chargedThroughDate: "charged_through_date",
                    status: "ACTIVE",
                    taxPercentage: "tax_percentage",
                    invoiceIds: ["invoice_ids"],
                    version: BigInt("1"),
                    createdAt: "2023-06-20T21:53:10Z",
                    cardId: "ccof:qy5x8hHGYsgLrp4Q4GB",
                    timezone: "America/Los_Angeles",
                    source: {
                        name: "My Application",
                    },
                    actions: [{}],
                    monthlyBillingAnchorDate: 1,
                    phases: [
                        {
                            uid: "873451e0-745b-4e87-ab0b-c574933fe616",
                            ordinal: BigInt("0"),
                            orderTemplateId: "U2NaowWxzXwpsZU697x7ZHOAnCNZY",
                            planPhaseUid: "X2Q2AONPB3RB64Y27S25QCZP",
                        },
                    ],
                    completedDate: "completed_date",
                },
            ],
            cursor: "cursor",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            subscription: {
                id: "8151fc89-da15-4eb9-a685-1a70883cebfc",
                location_id: "S8GWD5R9QB376",
                plan_variation_id: "6JHXF3B2CW3YKHDV4XEM674H",
                customer_id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                start_date: "2022-07-27",
                canceled_date: "canceled_date",
                charged_through_date: "2023-11-20",
                status: "ACTIVE",
                tax_percentage: "tax_percentage",
                invoice_ids: ["inv:0-ChCHu2mZEabLeeHahQnXDjZQECY", "inv:0-ChrcX_i3sNmfsHTGKhI4Wg2mceA"],
                price_override_money: { amount: BigInt(25000), currency: "USD" },
                version: BigInt(1000000),
                created_at: "2022-07-27T21:53:10Z",
                card_id: "ccof:IkWfpLj4tNHMyFii3GB",
                timezone: "America/Los_Angeles",
                source: { name: "My Application" },
                actions: [{}],
                monthly_billing_anchor_date: 1,
                phases: [{}],
                completed_date: "completed_date",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/subscriptions/subscription_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.get({
            subscriptionId: "subscription_id",
            include: "include",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            subscription: {
                id: "8151fc89-da15-4eb9-a685-1a70883cebfc",
                locationId: "S8GWD5R9QB376",
                planVariationId: "6JHXF3B2CW3YKHDV4XEM674H",
                customerId: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                startDate: "2022-07-27",
                canceledDate: "canceled_date",
                chargedThroughDate: "2023-11-20",
                status: "ACTIVE",
                taxPercentage: "tax_percentage",
                invoiceIds: ["inv:0-ChCHu2mZEabLeeHahQnXDjZQECY", "inv:0-ChrcX_i3sNmfsHTGKhI4Wg2mceA"],
                priceOverrideMoney: {
                    amount: BigInt("25000"),
                    currency: "USD",
                },
                version: BigInt("1000000"),
                createdAt: "2022-07-27T21:53:10Z",
                cardId: "ccof:IkWfpLj4tNHMyFii3GB",
                timezone: "America/Los_Angeles",
                source: {
                    name: "My Application",
                },
                actions: [{}],
                monthlyBillingAnchorDate: 1,
                phases: [{}],
                completedDate: "completed_date",
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { subscription: { card_id: "{NEW CARD ID}" } };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            subscription: {
                id: "7217d8ca-1fee-4446-a9e5-8540b5d8c9bb",
                location_id: "LPJKHYR7WFDKN",
                plan_variation_id: "XOUNEKCE6NSXQW5NTSQ73MMX",
                customer_id: "AM69AB81FT4479YH9HGWS1HZY8",
                start_date: "2023-01-30",
                canceled_date: "canceled_date",
                charged_through_date: "2023-03-13",
                status: "ACTIVE",
                tax_percentage: "tax_percentage",
                invoice_ids: ["inv:0-ChAPSfVYvNewckgf3x4iigN_ENMM", "inv:0-ChBQaCCLfjcm9WEUBGxvuydJENMM"],
                price_override_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                version: BigInt(3),
                created_at: "2023-01-30T19:27:32Z",
                card_id: "{NEW CARD ID}",
                timezone: "UTC",
                source: { name: "My Application" },
                actions: [{}],
                monthly_billing_anchor_date: 1,
                phases: [{}],
                completed_date: "completed_date",
            },
        };
        server
            .mockEndpoint()
            .put("/v2/subscriptions/subscription_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.update({
            subscriptionId: "subscription_id",
            subscription: {
                cardId: "{NEW CARD ID}",
            },
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            subscription: {
                id: "7217d8ca-1fee-4446-a9e5-8540b5d8c9bb",
                locationId: "LPJKHYR7WFDKN",
                planVariationId: "XOUNEKCE6NSXQW5NTSQ73MMX",
                customerId: "AM69AB81FT4479YH9HGWS1HZY8",
                startDate: "2023-01-30",
                canceledDate: "canceled_date",
                chargedThroughDate: "2023-03-13",
                status: "ACTIVE",
                taxPercentage: "tax_percentage",
                invoiceIds: ["inv:0-ChAPSfVYvNewckgf3x4iigN_ENMM", "inv:0-ChBQaCCLfjcm9WEUBGxvuydJENMM"],
                priceOverrideMoney: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                version: BigInt("3"),
                createdAt: "2023-01-30T19:27:32Z",
                cardId: "{NEW CARD ID}",
                timezone: "UTC",
                source: {
                    name: "My Application",
                },
                actions: [{}],
                monthlyBillingAnchorDate: 1,
                phases: [{}],
                completedDate: "completed_date",
            },
        });
    });

    test("DeleteAction", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            subscription: {
                id: "8151fc89-da15-4eb9-a685-1a70883cebfc",
                location_id: "S8GWD5R9QB376",
                plan_variation_id: "6JHXF3B2CW3YKHDV4XEM674H",
                customer_id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                start_date: "2022-07-27",
                canceled_date: "canceled_date",
                charged_through_date: "2023-11-20",
                status: "ACTIVE",
                tax_percentage: "tax_percentage",
                invoice_ids: ["inv:0-ChCHu2mZEabLeeHahQnXDjZQECY", "inv:0-ChrcX_i3sNmfsHTGKhI4Wg2mceA"],
                price_override_money: { amount: BigInt(25000), currency: "USD" },
                version: BigInt(1000000),
                created_at: "2022-07-27T21:53:10Z",
                card_id: "ccof:IkWfpLj4tNHMyFii3GB",
                timezone: "America/Los_Angeles",
                source: { name: "My Application" },
                actions: [{}],
                monthly_billing_anchor_date: 1,
                phases: [{}],
                completed_date: "completed_date",
            },
        };
        server
            .mockEndpoint()
            .delete("/v2/subscriptions/subscription_id/actions/action_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.deleteAction({
            subscriptionId: "subscription_id",
            actionId: "action_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            subscription: {
                id: "8151fc89-da15-4eb9-a685-1a70883cebfc",
                locationId: "S8GWD5R9QB376",
                planVariationId: "6JHXF3B2CW3YKHDV4XEM674H",
                customerId: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                startDate: "2022-07-27",
                canceledDate: "canceled_date",
                chargedThroughDate: "2023-11-20",
                status: "ACTIVE",
                taxPercentage: "tax_percentage",
                invoiceIds: ["inv:0-ChCHu2mZEabLeeHahQnXDjZQECY", "inv:0-ChrcX_i3sNmfsHTGKhI4Wg2mceA"],
                priceOverrideMoney: {
                    amount: BigInt("25000"),
                    currency: "USD",
                },
                version: BigInt("1000000"),
                createdAt: "2022-07-27T21:53:10Z",
                cardId: "ccof:IkWfpLj4tNHMyFii3GB",
                timezone: "America/Los_Angeles",
                source: {
                    name: "My Application",
                },
                actions: [{}],
                monthlyBillingAnchorDate: 1,
                phases: [{}],
                completedDate: "completed_date",
            },
        });
    });

    test("ChangeBillingAnchorDate", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { monthly_billing_anchor_date: 1 };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            subscription: {
                id: "9ba40961-995a-4a3d-8c53-048c40cafc13",
                location_id: "S8GWD5R9QB376",
                plan_variation_id: "FQ7CDXXWSLUJRPM3GFJSJGZ7",
                customer_id: "CHFGVKYY8RSV93M5KCYTG4PN0G",
                start_date: "start_date",
                canceled_date: "canceled_date",
                charged_through_date: "charged_through_date",
                status: "ACTIVE",
                tax_percentage: "tax_percentage",
                invoice_ids: ["invoice_ids"],
                price_override_money: { amount: BigInt(2000), currency: "USD" },
                version: BigInt(3),
                created_at: "2023-06-20T21:53:10Z",
                card_id: "card_id",
                timezone: "America/Los_Angeles",
                source: { name: "My Application" },
                actions: [{}],
                monthly_billing_anchor_date: 20,
                phases: [
                    {
                        uid: "98d6f53b-40e1-4714-8827-032fd923be25",
                        ordinal: BigInt(0),
                        order_template_id: "E6oBY5WfQ2eN4pkYZwq4ka6n7KeZY",
                        plan_phase_uid: "C66BKH3ASTDYGJJCEZXQQSS7",
                    },
                ],
                completed_date: "completed_date",
            },
            actions: [
                {
                    id: "f0a1dfdc-675b-3a14-a640-99f7ac1cee83",
                    type: "CHANGE_BILLING_ANCHOR_DATE",
                    effective_date: "2023-11-01",
                    monthly_billing_anchor_date: 1,
                    phases: [{}],
                    new_plan_variation_id: "new_plan_variation_id",
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/v2/subscriptions/subscription_id/billing-anchor")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.changeBillingAnchorDate({
            subscriptionId: "subscription_id",
            monthlyBillingAnchorDate: 1,
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            subscription: {
                id: "9ba40961-995a-4a3d-8c53-048c40cafc13",
                locationId: "S8GWD5R9QB376",
                planVariationId: "FQ7CDXXWSLUJRPM3GFJSJGZ7",
                customerId: "CHFGVKYY8RSV93M5KCYTG4PN0G",
                startDate: "start_date",
                canceledDate: "canceled_date",
                chargedThroughDate: "charged_through_date",
                status: "ACTIVE",
                taxPercentage: "tax_percentage",
                invoiceIds: ["invoice_ids"],
                priceOverrideMoney: {
                    amount: BigInt("2000"),
                    currency: "USD",
                },
                version: BigInt("3"),
                createdAt: "2023-06-20T21:53:10Z",
                cardId: "card_id",
                timezone: "America/Los_Angeles",
                source: {
                    name: "My Application",
                },
                actions: [{}],
                monthlyBillingAnchorDate: 20,
                phases: [
                    {
                        uid: "98d6f53b-40e1-4714-8827-032fd923be25",
                        ordinal: BigInt("0"),
                        orderTemplateId: "E6oBY5WfQ2eN4pkYZwq4ka6n7KeZY",
                        planPhaseUid: "C66BKH3ASTDYGJJCEZXQQSS7",
                    },
                ],
                completedDate: "completed_date",
            },
            actions: [
                {
                    id: "f0a1dfdc-675b-3a14-a640-99f7ac1cee83",
                    type: "CHANGE_BILLING_ANCHOR_DATE",
                    effectiveDate: "2023-11-01",
                    monthlyBillingAnchorDate: 1,
                    phases: [{}],
                    newPlanVariationId: "new_plan_variation_id",
                },
            ],
        });
    });

    test("cancel", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            subscription: {
                id: "910afd30-464a-4e00-a8d8-2296e",
                location_id: "S8GWD5R9QB376",
                plan_variation_id: "6JHXF3B2CW3YKHDV4XEM674H",
                customer_id: "CHFGVKYY8RSV93M5KCYTG4PN0G",
                start_date: "2022-01-19",
                canceled_date: "2023-06-05",
                charged_through_date: "charged_through_date",
                status: "ACTIVE",
                tax_percentage: "tax_percentage",
                invoice_ids: ["inv:0-ChCHu2mZEabLeeHahQnXDjZQECY", "inv:0-ChrcX_i3sNmfsHTGKhI4Wg2mceA"],
                price_override_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                version: BigInt(3),
                created_at: "2022-01-19T21:53:10Z",
                card_id: "ccof:qy5x8hHGYsgLrp4Q4GB",
                timezone: "America/Los_Angeles",
                source: { name: "My Application" },
                actions: [{}],
                monthly_billing_anchor_date: 1,
                phases: [{}],
                completed_date: "completed_date",
            },
            actions: [
                {
                    id: "id",
                    type: "CANCEL",
                    effective_date: "effective_date",
                    monthly_billing_anchor_date: 1,
                    phases: [{}],
                    new_plan_variation_id: "new_plan_variation_id",
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/v2/subscriptions/subscription_id/cancel")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.cancel({
            subscriptionId: "subscription_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            subscription: {
                id: "910afd30-464a-4e00-a8d8-2296e",
                locationId: "S8GWD5R9QB376",
                planVariationId: "6JHXF3B2CW3YKHDV4XEM674H",
                customerId: "CHFGVKYY8RSV93M5KCYTG4PN0G",
                startDate: "2022-01-19",
                canceledDate: "2023-06-05",
                chargedThroughDate: "charged_through_date",
                status: "ACTIVE",
                taxPercentage: "tax_percentage",
                invoiceIds: ["inv:0-ChCHu2mZEabLeeHahQnXDjZQECY", "inv:0-ChrcX_i3sNmfsHTGKhI4Wg2mceA"],
                priceOverrideMoney: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                version: BigInt("3"),
                createdAt: "2022-01-19T21:53:10Z",
                cardId: "ccof:qy5x8hHGYsgLrp4Q4GB",
                timezone: "America/Los_Angeles",
                source: {
                    name: "My Application",
                },
                actions: [{}],
                monthlyBillingAnchorDate: 1,
                phases: [{}],
                completedDate: "completed_date",
            },
            actions: [
                {
                    id: "id",
                    type: "CANCEL",
                    effectiveDate: "effective_date",
                    monthlyBillingAnchorDate: 1,
                    phases: [{}],
                    newPlanVariationId: "new_plan_variation_id",
                },
            ],
        });
    });

    test("pause", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            subscription: {
                id: "56214fb2-cc85-47a1-93bc-44f3766bb56f",
                location_id: "S8GWD5R9QB376",
                plan_variation_id: "6JHXF3B2CW3YKHDV4XEM674H",
                customer_id: "CHFGVKYY8RSV93M5KCYTG4PN0G",
                start_date: "2023-06-20",
                canceled_date: "canceled_date",
                charged_through_date: "charged_through_date",
                status: "ACTIVE",
                tax_percentage: "tax_percentage",
                invoice_ids: ["invoice_ids"],
                price_override_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                version: BigInt(1),
                created_at: "2023-06-20T21:53:10Z",
                card_id: "ccof:qy5x8hHGYsgLrp4Q4GB",
                timezone: "America/Los_Angeles",
                source: { name: "My Application" },
                actions: [{}],
                monthly_billing_anchor_date: 1,
                phases: [
                    {
                        uid: "873451e0-745b-4e87-ab0b-c574933fe616",
                        ordinal: BigInt(0),
                        order_template_id: "U2NaowWxzXwpsZU697x7ZHOAnCNZY",
                        plan_phase_uid: "X2Q2AONPB3RB64Y27S25QCZP",
                    },
                ],
                completed_date: "completed_date",
            },
            actions: [
                {
                    id: "99b2439e-63f7-3ad5-95f7-ab2447a80673",
                    type: "PAUSE",
                    effective_date: "2023-11-17",
                    monthly_billing_anchor_date: 1,
                    phases: [{}],
                    new_plan_variation_id: "new_plan_variation_id",
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/v2/subscriptions/subscription_id/pause")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.pause({
            subscriptionId: "subscription_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            subscription: {
                id: "56214fb2-cc85-47a1-93bc-44f3766bb56f",
                locationId: "S8GWD5R9QB376",
                planVariationId: "6JHXF3B2CW3YKHDV4XEM674H",
                customerId: "CHFGVKYY8RSV93M5KCYTG4PN0G",
                startDate: "2023-06-20",
                canceledDate: "canceled_date",
                chargedThroughDate: "charged_through_date",
                status: "ACTIVE",
                taxPercentage: "tax_percentage",
                invoiceIds: ["invoice_ids"],
                priceOverrideMoney: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                version: BigInt("1"),
                createdAt: "2023-06-20T21:53:10Z",
                cardId: "ccof:qy5x8hHGYsgLrp4Q4GB",
                timezone: "America/Los_Angeles",
                source: {
                    name: "My Application",
                },
                actions: [{}],
                monthlyBillingAnchorDate: 1,
                phases: [
                    {
                        uid: "873451e0-745b-4e87-ab0b-c574933fe616",
                        ordinal: BigInt("0"),
                        orderTemplateId: "U2NaowWxzXwpsZU697x7ZHOAnCNZY",
                        planPhaseUid: "X2Q2AONPB3RB64Y27S25QCZP",
                    },
                ],
                completedDate: "completed_date",
            },
            actions: [
                {
                    id: "99b2439e-63f7-3ad5-95f7-ab2447a80673",
                    type: "PAUSE",
                    effectiveDate: "2023-11-17",
                    monthlyBillingAnchorDate: 1,
                    phases: [{}],
                    newPlanVariationId: "new_plan_variation_id",
                },
            ],
        });
    });

    test("resume", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            subscription: {
                id: "56214fb2-cc85-47a1-93bc-44f3766bb56f",
                location_id: "S8GWD5R9QB376",
                plan_variation_id: "6JHXF3B2CW3YKHDV4XEM674H",
                customer_id: "CHFGVKYY8RSV93M5KCYTG4PN0G",
                start_date: "2023-06-20",
                canceled_date: "canceled_date",
                charged_through_date: "charged_through_date",
                status: "ACTIVE",
                tax_percentage: "tax_percentage",
                invoice_ids: ["invoice_ids"],
                price_override_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                version: BigInt(1),
                created_at: "2023-06-20T21:53:10Z",
                card_id: "ccof:qy5x8hHGYsgLrp4Q4GB",
                timezone: "America/Los_Angeles",
                source: { name: "My Application" },
                actions: [{}],
                monthly_billing_anchor_date: 1,
                phases: [
                    {
                        uid: "873451e0-745b-4e87-ab0b-c574933fe616",
                        ordinal: BigInt(0),
                        order_template_id: "U2NaowWxzXwpsZU697x7ZHOAnCNZY",
                        plan_phase_uid: "X2Q2AONPB3RB64Y27S25QCZP",
                    },
                ],
                completed_date: "completed_date",
            },
            actions: [
                {
                    id: "18ff74f4-3da4-30c5-929f-7d6fca84f115",
                    type: "RESUME",
                    effective_date: "2023-09-01",
                    monthly_billing_anchor_date: 1,
                    phases: [{}],
                    new_plan_variation_id: "new_plan_variation_id",
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/v2/subscriptions/subscription_id/resume")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.resume({
            subscriptionId: "subscription_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            subscription: {
                id: "56214fb2-cc85-47a1-93bc-44f3766bb56f",
                locationId: "S8GWD5R9QB376",
                planVariationId: "6JHXF3B2CW3YKHDV4XEM674H",
                customerId: "CHFGVKYY8RSV93M5KCYTG4PN0G",
                startDate: "2023-06-20",
                canceledDate: "canceled_date",
                chargedThroughDate: "charged_through_date",
                status: "ACTIVE",
                taxPercentage: "tax_percentage",
                invoiceIds: ["invoice_ids"],
                priceOverrideMoney: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                version: BigInt("1"),
                createdAt: "2023-06-20T21:53:10Z",
                cardId: "ccof:qy5x8hHGYsgLrp4Q4GB",
                timezone: "America/Los_Angeles",
                source: {
                    name: "My Application",
                },
                actions: [{}],
                monthlyBillingAnchorDate: 1,
                phases: [
                    {
                        uid: "873451e0-745b-4e87-ab0b-c574933fe616",
                        ordinal: BigInt("0"),
                        orderTemplateId: "U2NaowWxzXwpsZU697x7ZHOAnCNZY",
                        planPhaseUid: "X2Q2AONPB3RB64Y27S25QCZP",
                    },
                ],
                completedDate: "completed_date",
            },
            actions: [
                {
                    id: "18ff74f4-3da4-30c5-929f-7d6fca84f115",
                    type: "RESUME",
                    effectiveDate: "2023-09-01",
                    monthlyBillingAnchorDate: 1,
                    phases: [{}],
                    newPlanVariationId: "new_plan_variation_id",
                },
            ],
        });
    });

    test("SwapPlan", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            new_plan_variation_id: "FQ7CDXXWSLUJRPM3GFJSJGZ7",
            phases: [{ ordinal: BigInt(0), order_template_id: "uhhnjH9osVv3shUADwaC0b3hNxQZY" }],
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            subscription: {
                id: "9ba40961-995a-4a3d-8c53-048c40cafc13",
                location_id: "S8GWD5R9QB376",
                plan_variation_id: "FQ7CDXXWSLUJRPM3GFJSJGZ7",
                customer_id: "CHFGVKYY8RSV93M5KCYTG4PN0G",
                start_date: "start_date",
                canceled_date: "canceled_date",
                charged_through_date: "charged_through_date",
                status: "ACTIVE",
                tax_percentage: "tax_percentage",
                invoice_ids: ["invoice_ids"],
                price_override_money: { amount: BigInt(2000), currency: "USD" },
                version: BigInt(3),
                created_at: "2023-06-20T21:53:10Z",
                card_id: "card_id",
                timezone: "America/Los_Angeles",
                source: { name: "My Application" },
                actions: [{}],
                monthly_billing_anchor_date: 1,
                phases: [
                    {
                        uid: "98d6f53b-40e1-4714-8827-032fd923be25",
                        ordinal: BigInt(0),
                        order_template_id: "E6oBY5WfQ2eN4pkYZwq4ka6n7KeZY",
                        plan_phase_uid: "C66BKH3ASTDYGJJCEZXQQSS7",
                    },
                ],
                completed_date: "completed_date",
            },
            actions: [
                {
                    id: "f0a1dfdc-675b-3a14-a640-99f7ac1cee83",
                    type: "SWAP_PLAN",
                    effective_date: "2023-11-17",
                    monthly_billing_anchor_date: 1,
                    phases: [{ ordinal: BigInt(0), order_template_id: "uhhnjH9osVv3shUADwaC0b3hNxQZY" }],
                    new_plan_variation_id: "FQ7CDXXWSLUJRPM3GFJSJGZ7",
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/v2/subscriptions/subscription_id/swap-plan")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.swapPlan({
            subscriptionId: "subscription_id",
            newPlanVariationId: "FQ7CDXXWSLUJRPM3GFJSJGZ7",
            phases: [
                {
                    ordinal: BigInt("0"),
                    orderTemplateId: "uhhnjH9osVv3shUADwaC0b3hNxQZY",
                },
            ],
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            subscription: {
                id: "9ba40961-995a-4a3d-8c53-048c40cafc13",
                locationId: "S8GWD5R9QB376",
                planVariationId: "FQ7CDXXWSLUJRPM3GFJSJGZ7",
                customerId: "CHFGVKYY8RSV93M5KCYTG4PN0G",
                startDate: "start_date",
                canceledDate: "canceled_date",
                chargedThroughDate: "charged_through_date",
                status: "ACTIVE",
                taxPercentage: "tax_percentage",
                invoiceIds: ["invoice_ids"],
                priceOverrideMoney: {
                    amount: BigInt("2000"),
                    currency: "USD",
                },
                version: BigInt("3"),
                createdAt: "2023-06-20T21:53:10Z",
                cardId: "card_id",
                timezone: "America/Los_Angeles",
                source: {
                    name: "My Application",
                },
                actions: [{}],
                monthlyBillingAnchorDate: 1,
                phases: [
                    {
                        uid: "98d6f53b-40e1-4714-8827-032fd923be25",
                        ordinal: BigInt("0"),
                        orderTemplateId: "E6oBY5WfQ2eN4pkYZwq4ka6n7KeZY",
                        planPhaseUid: "C66BKH3ASTDYGJJCEZXQQSS7",
                    },
                ],
                completedDate: "completed_date",
            },
            actions: [
                {
                    id: "f0a1dfdc-675b-3a14-a640-99f7ac1cee83",
                    type: "SWAP_PLAN",
                    effectiveDate: "2023-11-17",
                    monthlyBillingAnchorDate: 1,
                    phases: [
                        {
                            ordinal: BigInt("0"),
                            orderTemplateId: "uhhnjH9osVv3shUADwaC0b3hNxQZY",
                        },
                    ],
                    newPlanVariationId: "FQ7CDXXWSLUJRPM3GFJSJGZ7",
                },
            ],
        });
    });
});
