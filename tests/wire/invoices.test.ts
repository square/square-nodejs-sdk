/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SquareClient } from "../../src/Client";

describe("Invoices", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            invoice: {
                location_id: "ES0RJRZYEC39A",
                order_id: "CAISENgvlJ6jLWAzERDzjyHVybY",
                primary_recipient: { customer_id: "JDKYHBWT1D4F8MFH63DBMEN8Y4" },
                payment_requests: [
                    {
                        request_type: "BALANCE",
                        due_date: "2030-01-24",
                        tipping_enabled: true,
                        automatic_payment_source: "NONE",
                        reminders: [{ relative_scheduled_days: -1, message: "Your invoice is due tomorrow" }],
                    },
                ],
                delivery_method: "EMAIL",
                invoice_number: "inv-100",
                title: "Event Planning Services",
                description: "We appreciate your business!",
                scheduled_at: "2030-01-13T10:00:00Z",
                accepted_payment_methods: {
                    card: true,
                    square_gift_card: false,
                    bank_account: false,
                    buy_now_pay_later: false,
                    cash_app_pay: false,
                },
                custom_fields: [
                    { label: "Event Reference Number", value: "Ref. #1234", placement: "ABOVE_LINE_ITEMS" },
                    { label: "Terms of Service", value: "The terms of service are...", placement: "BELOW_LINE_ITEMS" },
                ],
                sale_or_service_date: "2030-01-24",
                store_payment_method_enabled: false,
            },
            idempotency_key: "ce3748f9-5fc1-4762-aa12-aae5e843f1f4",
        };
        const rawResponseBody = {
            invoice: {
                id: "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
                version: 0,
                location_id: "ES0RJRZYEC39A",
                order_id: "CAISENgvlJ6jLWAzERDzjyHVybY",
                primary_recipient: {
                    customer_id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                    given_name: "Amelia",
                    family_name: "Earhart",
                    email_address: "Amelia.Earhart@example.com",
                    phone_number: "1-212-555-4240",
                    company_name: "company_name",
                },
                payment_requests: [
                    {
                        uid: "2da7964f-f3d2-4f43-81e8-5aa220bf3355",
                        request_type: "BALANCE",
                        due_date: "2030-01-24",
                        tipping_enabled: true,
                        automatic_payment_source: "NONE",
                        reminders: [
                            {
                                uid: "beebd363-e47f-4075-8785-c235aaa7df11",
                                relative_scheduled_days: -1,
                                message: "Your invoice is due tomorrow",
                                status: "PENDING",
                            },
                        ],
                        computed_amount_money: { amount: BigInt(10000), currency: "USD" },
                        total_completed_amount_money: { amount: BigInt(0), currency: "USD" },
                    },
                ],
                delivery_method: "EMAIL",
                invoice_number: "inv-100",
                title: "Event Planning Services",
                description: "We appreciate your business!",
                scheduled_at: "2030-01-13T10:00:00Z",
                public_url: "public_url",
                next_payment_amount_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                status: "DRAFT",
                timezone: "America/Los_Angeles",
                created_at: "2020-06-18T17:45:13Z",
                updated_at: "2020-06-18T17:45:13Z",
                accepted_payment_methods: {
                    card: true,
                    square_gift_card: false,
                    bank_account: false,
                    buy_now_pay_later: false,
                    cash_app_pay: false,
                },
                custom_fields: [
                    { label: "Event Reference Number", value: "Ref. #1234", placement: "ABOVE_LINE_ITEMS" },
                    { label: "Terms of Service", value: "The terms of service are...", placement: "BELOW_LINE_ITEMS" },
                ],
                subscription_id: "subscription_id",
                sale_or_service_date: "2030-01-24",
                payment_conditions: "payment_conditions",
                store_payment_method_enabled: false,
                attachments: [{}],
                creator_team_member_id: "creator_team_member_id",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/invoices")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoices.create({
            invoice: {
                location_id: "ES0RJRZYEC39A",
                order_id: "CAISENgvlJ6jLWAzERDzjyHVybY",
                primary_recipient: {
                    customer_id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                },
                payment_requests: [
                    {
                        request_type: "BALANCE",
                        due_date: "2030-01-24",
                        tipping_enabled: true,
                        automatic_payment_source: "NONE",
                        reminders: [
                            {
                                relative_scheduled_days: -1,
                                message: "Your invoice is due tomorrow",
                            },
                        ],
                    },
                ],
                delivery_method: "EMAIL",
                invoice_number: "inv-100",
                title: "Event Planning Services",
                description: "We appreciate your business!",
                scheduled_at: "2030-01-13T10:00:00Z",
                accepted_payment_methods: {
                    card: true,
                    square_gift_card: false,
                    bank_account: false,
                    buy_now_pay_later: false,
                    cash_app_pay: false,
                },
                custom_fields: [
                    {
                        label: "Event Reference Number",
                        value: "Ref. #1234",
                        placement: "ABOVE_LINE_ITEMS",
                    },
                    {
                        label: "Terms of Service",
                        value: "The terms of service are...",
                        placement: "BELOW_LINE_ITEMS",
                    },
                ],
                sale_or_service_date: "2030-01-24",
                store_payment_method_enabled: false,
            },
            idempotency_key: "ce3748f9-5fc1-4762-aa12-aae5e843f1f4",
        });
        expect(response).toEqual({
            invoice: {
                id: "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
                version: 0,
                location_id: "ES0RJRZYEC39A",
                order_id: "CAISENgvlJ6jLWAzERDzjyHVybY",
                primary_recipient: {
                    customer_id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                    given_name: "Amelia",
                    family_name: "Earhart",
                    email_address: "Amelia.Earhart@example.com",
                    phone_number: "1-212-555-4240",
                    company_name: "company_name",
                },
                payment_requests: [
                    {
                        uid: "2da7964f-f3d2-4f43-81e8-5aa220bf3355",
                        request_type: "BALANCE",
                        due_date: "2030-01-24",
                        tipping_enabled: true,
                        automatic_payment_source: "NONE",
                        reminders: [
                            {
                                uid: "beebd363-e47f-4075-8785-c235aaa7df11",
                                relative_scheduled_days: -1,
                                message: "Your invoice is due tomorrow",
                                status: "PENDING",
                            },
                        ],
                        computed_amount_money: {
                            amount: BigInt("10000"),
                            currency: "USD",
                        },
                        total_completed_amount_money: {
                            amount: BigInt("0"),
                            currency: "USD",
                        },
                    },
                ],
                delivery_method: "EMAIL",
                invoice_number: "inv-100",
                title: "Event Planning Services",
                description: "We appreciate your business!",
                scheduled_at: "2030-01-13T10:00:00Z",
                public_url: "public_url",
                next_payment_amount_money: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                status: "DRAFT",
                timezone: "America/Los_Angeles",
                created_at: "2020-06-18T17:45:13Z",
                updated_at: "2020-06-18T17:45:13Z",
                accepted_payment_methods: {
                    card: true,
                    square_gift_card: false,
                    bank_account: false,
                    buy_now_pay_later: false,
                    cash_app_pay: false,
                },
                custom_fields: [
                    {
                        label: "Event Reference Number",
                        value: "Ref. #1234",
                        placement: "ABOVE_LINE_ITEMS",
                    },
                    {
                        label: "Terms of Service",
                        value: "The terms of service are...",
                        placement: "BELOW_LINE_ITEMS",
                    },
                ],
                subscription_id: "subscription_id",
                sale_or_service_date: "2030-01-24",
                payment_conditions: "payment_conditions",
                store_payment_method_enabled: false,
                attachments: [{}],
                creator_team_member_id: "creator_team_member_id",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("search", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            query: {
                filter: { location_ids: ["ES0RJRZYEC39A"], customer_ids: ["JDKYHBWT1D4F8MFH63DBMEN8Y4"] },
                sort: { field: "INVOICE_SORT_DATE", order: "DESC" },
            },
            limit: 100,
        };
        const rawResponseBody = {
            invoices: [
                {
                    id: "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
                    version: 0,
                    location_id: "ES0RJRZYEC39A",
                    order_id: "CAISENgvlJ6jLWAzERDzjyHVybY",
                    primary_recipient: {
                        customer_id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                        given_name: "Amelia",
                        family_name: "Earhart",
                        email_address: "Amelia.Earhart@example.com",
                        phone_number: "1-212-555-4240",
                    },
                    payment_requests: [
                        {
                            uid: "2da7964f-f3d2-4f43-81e8-5aa220bf3355",
                            request_type: "BALANCE",
                            due_date: "2030-01-24",
                            tipping_enabled: true,
                            automatic_payment_source: "NONE",
                            reminders: [
                                {
                                    uid: "beebd363-e47f-4075-8785-c235aaa7df11",
                                    relative_scheduled_days: -1,
                                    message: "Your invoice is due tomorrow",
                                    status: "PENDING",
                                },
                            ],
                            computed_amount_money: { amount: BigInt(10000), currency: "USD" },
                            total_completed_amount_money: { amount: BigInt(0), currency: "USD" },
                        },
                    ],
                    delivery_method: "EMAIL",
                    invoice_number: "inv-100",
                    title: "Event Planning Services",
                    description: "We appreciate your business!",
                    scheduled_at: "2030-01-13T10:00:00Z",
                    public_url: "public_url",
                    status: "DRAFT",
                    timezone: "America/Los_Angeles",
                    created_at: "2020-06-18T17:45:13Z",
                    updated_at: "2020-06-18T17:45:13Z",
                    accepted_payment_methods: {
                        card: true,
                        square_gift_card: false,
                        bank_account: false,
                        buy_now_pay_later: false,
                        cash_app_pay: false,
                    },
                    custom_fields: [
                        { label: "Event Reference Number", value: "Ref. #1234", placement: "ABOVE_LINE_ITEMS" },
                        {
                            label: "Terms of Service",
                            value: "The terms of service are...",
                            placement: "BELOW_LINE_ITEMS",
                        },
                    ],
                    subscription_id: "subscription_id",
                    sale_or_service_date: "2030-01-24",
                    payment_conditions: "payment_conditions",
                    store_payment_method_enabled: false,
                    attachments: [{}],
                    creator_team_member_id: "creator_team_member_id",
                },
                {
                    id: "inv:0-ChC366qAfskpGrBI_1bozs9mEA3",
                    version: 3,
                    location_id: "ES0RJRZYEC39A",
                    order_id: "a65jnS8NXbfprvGJzY9F4fQTuaB",
                    primary_recipient: {
                        customer_id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                        given_name: "Amelia",
                        family_name: "Earhart",
                        email_address: "Amelia.Earhart@example.com",
                        phone_number: "1-212-555-4240",
                    },
                    payment_requests: [
                        {
                            uid: "66c3bdfd-5090-4ff9-a8a0-c1e1a2ffa176",
                            request_type: "DEPOSIT",
                            due_date: "2021-01-23",
                            percentage_requested: "25",
                            tipping_enabled: false,
                            automatic_payment_source: "CARD_ON_FILE",
                            card_id: "ccof:IkWfpLj4tNHMyFii3GB",
                            computed_amount_money: { amount: BigInt(1000), currency: "USD" },
                            total_completed_amount_money: { amount: BigInt(1000), currency: "USD" },
                        },
                        {
                            uid: "120c5e18-4f80-4f6b-b159-774cb9bf8f99",
                            request_type: "BALANCE",
                            due_date: "2021-06-15",
                            tipping_enabled: false,
                            automatic_payment_source: "CARD_ON_FILE",
                            card_id: "ccof:IkWfpLj4tNHMyFii3GB",
                            computed_amount_money: { amount: BigInt(3000), currency: "USD" },
                            total_completed_amount_money: { amount: BigInt(0), currency: "USD" },
                        },
                    ],
                    delivery_method: "EMAIL",
                    invoice_number: "inv-455",
                    title: "title",
                    description: "description",
                    scheduled_at: "scheduled_at",
                    public_url: "https://squareup.com/pay-invoice/invtmp:5e22a2c2-47c1-46d6-b061-808764dfe2b9",
                    next_payment_amount_money: { amount: BigInt(3000), currency: "USD" },
                    status: "PARTIALLY_PAID",
                    timezone: "America/Los_Angeles",
                    created_at: "2021-01-23T15:29:12Z",
                    updated_at: "2021-01-23T15:29:56Z",
                    accepted_payment_methods: {
                        card: true,
                        square_gift_card: true,
                        bank_account: false,
                        buy_now_pay_later: false,
                        cash_app_pay: false,
                    },
                    custom_fields: [{}],
                    subscription_id: "subscription_id",
                    sale_or_service_date: "2030-01-24",
                    payment_conditions: "payment_conditions",
                    store_payment_method_enabled: false,
                    attachments: [{}],
                    creator_team_member_id: "creator_team_member_id",
                },
            ],
            cursor: "ChoIDhIWVm54ZVRhLXhySFBOejBBM2xJb2daUQoFCI4IGAE",
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/invoices/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoices.search({
            query: {
                filter: {
                    location_ids: ["ES0RJRZYEC39A"],
                    customer_ids: ["JDKYHBWT1D4F8MFH63DBMEN8Y4"],
                },
                sort: {
                    field: "INVOICE_SORT_DATE",
                    order: "DESC",
                },
            },
            limit: 100,
        });
        expect(response).toEqual({
            invoices: [
                {
                    id: "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
                    version: 0,
                    location_id: "ES0RJRZYEC39A",
                    order_id: "CAISENgvlJ6jLWAzERDzjyHVybY",
                    primary_recipient: {
                        customer_id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                        given_name: "Amelia",
                        family_name: "Earhart",
                        email_address: "Amelia.Earhart@example.com",
                        phone_number: "1-212-555-4240",
                    },
                    payment_requests: [
                        {
                            uid: "2da7964f-f3d2-4f43-81e8-5aa220bf3355",
                            request_type: "BALANCE",
                            due_date: "2030-01-24",
                            tipping_enabled: true,
                            automatic_payment_source: "NONE",
                            reminders: [
                                {
                                    uid: "beebd363-e47f-4075-8785-c235aaa7df11",
                                    relative_scheduled_days: -1,
                                    message: "Your invoice is due tomorrow",
                                    status: "PENDING",
                                },
                            ],
                            computed_amount_money: {
                                amount: BigInt("10000"),
                                currency: "USD",
                            },
                            total_completed_amount_money: {
                                amount: BigInt("0"),
                                currency: "USD",
                            },
                        },
                    ],
                    delivery_method: "EMAIL",
                    invoice_number: "inv-100",
                    title: "Event Planning Services",
                    description: "We appreciate your business!",
                    scheduled_at: "2030-01-13T10:00:00Z",
                    public_url: "public_url",
                    status: "DRAFT",
                    timezone: "America/Los_Angeles",
                    created_at: "2020-06-18T17:45:13Z",
                    updated_at: "2020-06-18T17:45:13Z",
                    accepted_payment_methods: {
                        card: true,
                        square_gift_card: false,
                        bank_account: false,
                        buy_now_pay_later: false,
                        cash_app_pay: false,
                    },
                    custom_fields: [
                        {
                            label: "Event Reference Number",
                            value: "Ref. #1234",
                            placement: "ABOVE_LINE_ITEMS",
                        },
                        {
                            label: "Terms of Service",
                            value: "The terms of service are...",
                            placement: "BELOW_LINE_ITEMS",
                        },
                    ],
                    subscription_id: "subscription_id",
                    sale_or_service_date: "2030-01-24",
                    payment_conditions: "payment_conditions",
                    store_payment_method_enabled: false,
                    attachments: [{}],
                    creator_team_member_id: "creator_team_member_id",
                },
                {
                    id: "inv:0-ChC366qAfskpGrBI_1bozs9mEA3",
                    version: 3,
                    location_id: "ES0RJRZYEC39A",
                    order_id: "a65jnS8NXbfprvGJzY9F4fQTuaB",
                    primary_recipient: {
                        customer_id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                        given_name: "Amelia",
                        family_name: "Earhart",
                        email_address: "Amelia.Earhart@example.com",
                        phone_number: "1-212-555-4240",
                    },
                    payment_requests: [
                        {
                            uid: "66c3bdfd-5090-4ff9-a8a0-c1e1a2ffa176",
                            request_type: "DEPOSIT",
                            due_date: "2021-01-23",
                            percentage_requested: "25",
                            tipping_enabled: false,
                            automatic_payment_source: "CARD_ON_FILE",
                            card_id: "ccof:IkWfpLj4tNHMyFii3GB",
                            computed_amount_money: {
                                amount: BigInt("1000"),
                                currency: "USD",
                            },
                            total_completed_amount_money: {
                                amount: BigInt("1000"),
                                currency: "USD",
                            },
                        },
                        {
                            uid: "120c5e18-4f80-4f6b-b159-774cb9bf8f99",
                            request_type: "BALANCE",
                            due_date: "2021-06-15",
                            tipping_enabled: false,
                            automatic_payment_source: "CARD_ON_FILE",
                            card_id: "ccof:IkWfpLj4tNHMyFii3GB",
                            computed_amount_money: {
                                amount: BigInt("3000"),
                                currency: "USD",
                            },
                            total_completed_amount_money: {
                                amount: BigInt("0"),
                                currency: "USD",
                            },
                        },
                    ],
                    delivery_method: "EMAIL",
                    invoice_number: "inv-455",
                    title: "title",
                    description: "description",
                    scheduled_at: "scheduled_at",
                    public_url: "https://squareup.com/pay-invoice/invtmp:5e22a2c2-47c1-46d6-b061-808764dfe2b9",
                    next_payment_amount_money: {
                        amount: BigInt("3000"),
                        currency: "USD",
                    },
                    status: "PARTIALLY_PAID",
                    timezone: "America/Los_Angeles",
                    created_at: "2021-01-23T15:29:12Z",
                    updated_at: "2021-01-23T15:29:56Z",
                    accepted_payment_methods: {
                        card: true,
                        square_gift_card: true,
                        bank_account: false,
                        buy_now_pay_later: false,
                        cash_app_pay: false,
                    },
                    custom_fields: [{}],
                    subscription_id: "subscription_id",
                    sale_or_service_date: "2030-01-24",
                    payment_conditions: "payment_conditions",
                    store_payment_method_enabled: false,
                    attachments: [{}],
                    creator_team_member_id: "creator_team_member_id",
                },
            ],
            cursor: "ChoIDhIWVm54ZVRhLXhySFBOejBBM2xJb2daUQoFCI4IGAE",
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            invoice: {
                id: "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
                version: 0,
                location_id: "ES0RJRZYEC39A",
                order_id: "CAISENgvlJ6jLWAzERDzjyHVybY",
                primary_recipient: {
                    customer_id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                    given_name: "Amelia",
                    family_name: "Earhart",
                    email_address: "Amelia.Earhart@example.com",
                    phone_number: "1-212-555-4240",
                    company_name: "company_name",
                },
                payment_requests: [
                    {
                        uid: "2da7964f-f3d2-4f43-81e8-5aa220bf3355",
                        request_type: "BALANCE",
                        due_date: "2030-01-24",
                        tipping_enabled: true,
                        automatic_payment_source: "NONE",
                        reminders: [
                            {
                                uid: "beebd363-e47f-4075-8785-c235aaa7df11",
                                relative_scheduled_days: -1,
                                message: "Your invoice is due tomorrow",
                                status: "PENDING",
                            },
                        ],
                        computed_amount_money: { amount: BigInt(10000), currency: "USD" },
                        total_completed_amount_money: { amount: BigInt(0), currency: "USD" },
                    },
                ],
                delivery_method: "EMAIL",
                invoice_number: "inv-100",
                title: "Event Planning Services",
                description: "We appreciate your business!",
                scheduled_at: "2030-01-13T10:00:00Z",
                public_url: "public_url",
                next_payment_amount_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                status: "DRAFT",
                timezone: "America/Los_Angeles",
                created_at: "2020-06-18T17:45:13Z",
                updated_at: "2020-06-18T17:45:13Z",
                accepted_payment_methods: {
                    card: true,
                    square_gift_card: false,
                    bank_account: false,
                    buy_now_pay_later: false,
                    cash_app_pay: false,
                },
                custom_fields: [
                    { label: "Event Reference Number", value: "Ref. #1234", placement: "ABOVE_LINE_ITEMS" },
                    { label: "Terms of Service", value: "The terms of service are...", placement: "BELOW_LINE_ITEMS" },
                ],
                subscription_id: "subscription_id",
                sale_or_service_date: "2030-01-24",
                payment_conditions: "payment_conditions",
                store_payment_method_enabled: false,
                attachments: [{}],
                creator_team_member_id: "creator_team_member_id",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/invoices/invoice_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoices.get({
            invoice_id: "invoice_id",
        });
        expect(response).toEqual({
            invoice: {
                id: "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
                version: 0,
                location_id: "ES0RJRZYEC39A",
                order_id: "CAISENgvlJ6jLWAzERDzjyHVybY",
                primary_recipient: {
                    customer_id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                    given_name: "Amelia",
                    family_name: "Earhart",
                    email_address: "Amelia.Earhart@example.com",
                    phone_number: "1-212-555-4240",
                    company_name: "company_name",
                },
                payment_requests: [
                    {
                        uid: "2da7964f-f3d2-4f43-81e8-5aa220bf3355",
                        request_type: "BALANCE",
                        due_date: "2030-01-24",
                        tipping_enabled: true,
                        automatic_payment_source: "NONE",
                        reminders: [
                            {
                                uid: "beebd363-e47f-4075-8785-c235aaa7df11",
                                relative_scheduled_days: -1,
                                message: "Your invoice is due tomorrow",
                                status: "PENDING",
                            },
                        ],
                        computed_amount_money: {
                            amount: BigInt("10000"),
                            currency: "USD",
                        },
                        total_completed_amount_money: {
                            amount: BigInt("0"),
                            currency: "USD",
                        },
                    },
                ],
                delivery_method: "EMAIL",
                invoice_number: "inv-100",
                title: "Event Planning Services",
                description: "We appreciate your business!",
                scheduled_at: "2030-01-13T10:00:00Z",
                public_url: "public_url",
                next_payment_amount_money: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                status: "DRAFT",
                timezone: "America/Los_Angeles",
                created_at: "2020-06-18T17:45:13Z",
                updated_at: "2020-06-18T17:45:13Z",
                accepted_payment_methods: {
                    card: true,
                    square_gift_card: false,
                    bank_account: false,
                    buy_now_pay_later: false,
                    cash_app_pay: false,
                },
                custom_fields: [
                    {
                        label: "Event Reference Number",
                        value: "Ref. #1234",
                        placement: "ABOVE_LINE_ITEMS",
                    },
                    {
                        label: "Terms of Service",
                        value: "The terms of service are...",
                        placement: "BELOW_LINE_ITEMS",
                    },
                ],
                subscription_id: "subscription_id",
                sale_or_service_date: "2030-01-24",
                payment_conditions: "payment_conditions",
                store_payment_method_enabled: false,
                attachments: [{}],
                creator_team_member_id: "creator_team_member_id",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            invoice: {
                version: 1,
                payment_requests: [{ uid: "2da7964f-f3d2-4f43-81e8-5aa220bf3355", tipping_enabled: false }],
            },
            idempotency_key: "4ee82288-0910-499e-ab4c-5d0071dad1be",
        };
        const rawResponseBody = {
            invoice: {
                id: "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
                version: 2,
                location_id: "ES0RJRZYEC39A",
                order_id: "CAISENgvlJ6jLWAzERDzjyHVybY",
                primary_recipient: {
                    customer_id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                    given_name: "Amelia",
                    family_name: "Earhart",
                    email_address: "Amelia.Earhart@example.com",
                    phone_number: "1-212-555-4240",
                    company_name: "company_name",
                },
                payment_requests: [
                    {
                        uid: "2da7964f-f3d2-4f43-81e8-5aa220bf3355",
                        request_type: "BALANCE",
                        due_date: "2030-01-24",
                        tipping_enabled: false,
                        automatic_payment_source: "NONE",
                        computed_amount_money: { amount: BigInt(10000), currency: "USD" },
                        total_completed_amount_money: { amount: BigInt(0), currency: "USD" },
                    },
                ],
                delivery_method: "EMAIL",
                invoice_number: "inv-100",
                title: "Event Planning Services",
                description: "We appreciate your business!",
                scheduled_at: "2030-01-13T10:00:00Z",
                public_url: "public_url",
                next_payment_amount_money: { amount: BigInt(10000), currency: "USD" },
                status: "UNPAID",
                timezone: "America/Los_Angeles",
                created_at: "2020-06-18T17:45:13Z",
                updated_at: "2020-06-18T18:23:11Z",
                accepted_payment_methods: {
                    card: true,
                    square_gift_card: false,
                    bank_account: false,
                    buy_now_pay_later: false,
                    cash_app_pay: false,
                },
                custom_fields: [
                    { label: "Event Reference Number", value: "Ref. #1234", placement: "ABOVE_LINE_ITEMS" },
                    { label: "Terms of Service", value: "The terms of service are...", placement: "BELOW_LINE_ITEMS" },
                ],
                subscription_id: "subscription_id",
                sale_or_service_date: "2030-01-24",
                payment_conditions: "payment_conditions",
                store_payment_method_enabled: false,
                attachments: [{}],
                creator_team_member_id: "creator_team_member_id",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .put("/v2/invoices/invoice_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoices.update({
            invoice_id: "invoice_id",
            invoice: {
                version: 1,
                payment_requests: [
                    {
                        uid: "2da7964f-f3d2-4f43-81e8-5aa220bf3355",
                        tipping_enabled: false,
                    },
                ],
            },
            idempotency_key: "4ee82288-0910-499e-ab4c-5d0071dad1be",
        });
        expect(response).toEqual({
            invoice: {
                id: "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
                version: 2,
                location_id: "ES0RJRZYEC39A",
                order_id: "CAISENgvlJ6jLWAzERDzjyHVybY",
                primary_recipient: {
                    customer_id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                    given_name: "Amelia",
                    family_name: "Earhart",
                    email_address: "Amelia.Earhart@example.com",
                    phone_number: "1-212-555-4240",
                    company_name: "company_name",
                },
                payment_requests: [
                    {
                        uid: "2da7964f-f3d2-4f43-81e8-5aa220bf3355",
                        request_type: "BALANCE",
                        due_date: "2030-01-24",
                        tipping_enabled: false,
                        automatic_payment_source: "NONE",
                        computed_amount_money: {
                            amount: BigInt("10000"),
                            currency: "USD",
                        },
                        total_completed_amount_money: {
                            amount: BigInt("0"),
                            currency: "USD",
                        },
                    },
                ],
                delivery_method: "EMAIL",
                invoice_number: "inv-100",
                title: "Event Planning Services",
                description: "We appreciate your business!",
                scheduled_at: "2030-01-13T10:00:00Z",
                public_url: "public_url",
                next_payment_amount_money: {
                    amount: BigInt("10000"),
                    currency: "USD",
                },
                status: "UNPAID",
                timezone: "America/Los_Angeles",
                created_at: "2020-06-18T17:45:13Z",
                updated_at: "2020-06-18T18:23:11Z",
                accepted_payment_methods: {
                    card: true,
                    square_gift_card: false,
                    bank_account: false,
                    buy_now_pay_later: false,
                    cash_app_pay: false,
                },
                custom_fields: [
                    {
                        label: "Event Reference Number",
                        value: "Ref. #1234",
                        placement: "ABOVE_LINE_ITEMS",
                    },
                    {
                        label: "Terms of Service",
                        value: "The terms of service are...",
                        placement: "BELOW_LINE_ITEMS",
                    },
                ],
                subscription_id: "subscription_id",
                sale_or_service_date: "2030-01-24",
                payment_conditions: "payment_conditions",
                store_payment_method_enabled: false,
                attachments: [{}],
                creator_team_member_id: "creator_team_member_id",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/invoices/invoice_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoices.delete({
            invoice_id: "invoice_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("DeleteInvoiceAttachment", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/invoices/invoice_id/attachments/attachment_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoices.deleteInvoiceAttachment({
            invoice_id: "invoice_id",
            attachment_id: "attachment_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("cancel", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { version: 0 };
        const rawResponseBody = {
            invoice: {
                id: "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
                version: 1,
                location_id: "ES0RJRZYEC39A",
                order_id: "CAISENgvlJ6jLWAzERDzjyHVybY",
                primary_recipient: {
                    customer_id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                    given_name: "Amelia",
                    family_name: "Earhart",
                    email_address: "Amelia.Earhart@example.com",
                    phone_number: "1-212-555-4240",
                    company_name: "company_name",
                },
                payment_requests: [
                    {
                        uid: "2da7964f-f3d2-4f43-81e8-5aa220bf3355",
                        request_type: "BALANCE",
                        due_date: "2030-01-24",
                        tipping_enabled: true,
                        automatic_payment_source: "NONE",
                        reminders: [
                            {
                                uid: "beebd363-e47f-4075-8785-c235aaa7df11",
                                relative_scheduled_days: -1,
                                message: "Your invoice is due tomorrow",
                                status: "PENDING",
                            },
                        ],
                        computed_amount_money: { amount: BigInt(10000), currency: "USD" },
                        total_completed_amount_money: { amount: BigInt(0), currency: "USD" },
                    },
                ],
                delivery_method: "EMAIL",
                invoice_number: "inv-100",
                title: "Event Planning Services",
                description: "We appreciate your business!",
                scheduled_at: "2030-01-13T10:00:00Z",
                public_url: "public_url",
                next_payment_amount_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                status: "CANCELED",
                timezone: "America/Los_Angeles",
                created_at: "2020-06-18T17:45:13Z",
                updated_at: "2020-06-18T18:23:11Z",
                accepted_payment_methods: {
                    card: true,
                    square_gift_card: false,
                    bank_account: false,
                    buy_now_pay_later: false,
                    cash_app_pay: false,
                },
                custom_fields: [
                    { label: "Event Reference Number", value: "Ref. #1234", placement: "ABOVE_LINE_ITEMS" },
                    { label: "Terms of Service", value: "The terms of service are...", placement: "BELOW_LINE_ITEMS" },
                ],
                subscription_id: "subscription_id",
                sale_or_service_date: "2030-01-24",
                payment_conditions: "payment_conditions",
                store_payment_method_enabled: false,
                attachments: [{}],
                creator_team_member_id: "creator_team_member_id",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/invoices/invoice_id/cancel")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoices.cancel({
            invoice_id: "invoice_id",
            version: 0,
        });
        expect(response).toEqual({
            invoice: {
                id: "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
                version: 1,
                location_id: "ES0RJRZYEC39A",
                order_id: "CAISENgvlJ6jLWAzERDzjyHVybY",
                primary_recipient: {
                    customer_id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                    given_name: "Amelia",
                    family_name: "Earhart",
                    email_address: "Amelia.Earhart@example.com",
                    phone_number: "1-212-555-4240",
                    company_name: "company_name",
                },
                payment_requests: [
                    {
                        uid: "2da7964f-f3d2-4f43-81e8-5aa220bf3355",
                        request_type: "BALANCE",
                        due_date: "2030-01-24",
                        tipping_enabled: true,
                        automatic_payment_source: "NONE",
                        reminders: [
                            {
                                uid: "beebd363-e47f-4075-8785-c235aaa7df11",
                                relative_scheduled_days: -1,
                                message: "Your invoice is due tomorrow",
                                status: "PENDING",
                            },
                        ],
                        computed_amount_money: {
                            amount: BigInt("10000"),
                            currency: "USD",
                        },
                        total_completed_amount_money: {
                            amount: BigInt("0"),
                            currency: "USD",
                        },
                    },
                ],
                delivery_method: "EMAIL",
                invoice_number: "inv-100",
                title: "Event Planning Services",
                description: "We appreciate your business!",
                scheduled_at: "2030-01-13T10:00:00Z",
                public_url: "public_url",
                next_payment_amount_money: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                status: "CANCELED",
                timezone: "America/Los_Angeles",
                created_at: "2020-06-18T17:45:13Z",
                updated_at: "2020-06-18T18:23:11Z",
                accepted_payment_methods: {
                    card: true,
                    square_gift_card: false,
                    bank_account: false,
                    buy_now_pay_later: false,
                    cash_app_pay: false,
                },
                custom_fields: [
                    {
                        label: "Event Reference Number",
                        value: "Ref. #1234",
                        placement: "ABOVE_LINE_ITEMS",
                    },
                    {
                        label: "Terms of Service",
                        value: "The terms of service are...",
                        placement: "BELOW_LINE_ITEMS",
                    },
                ],
                subscription_id: "subscription_id",
                sale_or_service_date: "2030-01-24",
                payment_conditions: "payment_conditions",
                store_payment_method_enabled: false,
                attachments: [{}],
                creator_team_member_id: "creator_team_member_id",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("publish", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { version: 1, idempotency_key: "32da42d0-1997-41b0-826b-f09464fc2c2e" };
        const rawResponseBody = {
            invoice: {
                id: "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
                version: 1,
                location_id: "ES0RJRZYEC39A",
                order_id: "CAISENgvlJ6jLWAzERDzjyHVybY",
                primary_recipient: {
                    customer_id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                    given_name: "Amelia",
                    family_name: "Earhart",
                    email_address: "Amelia.Earhart@example.com",
                    phone_number: "1-212-555-4240",
                    company_name: "company_name",
                },
                payment_requests: [
                    {
                        uid: "2da7964f-f3d2-4f43-81e8-5aa220bf3355",
                        request_type: "BALANCE",
                        due_date: "2030-01-24",
                        tipping_enabled: true,
                        automatic_payment_source: "NONE",
                        reminders: [
                            {
                                uid: "beebd363-e47f-4075-8785-c235aaa7df11",
                                relative_scheduled_days: -1,
                                message: "Your invoice is due tomorrow",
                                status: "PENDING",
                            },
                        ],
                        computed_amount_money: { amount: BigInt(10000), currency: "USD" },
                        total_completed_amount_money: { amount: BigInt(0), currency: "USD" },
                    },
                ],
                delivery_method: "EMAIL",
                invoice_number: "inv-100",
                title: "Event Planning Services",
                description: "We appreciate your business!",
                scheduled_at: "2030-01-13T10:00:00Z",
                public_url: "https://squareup.com/pay-invoice/invtmp:5e22a2c2-47c1-46d6-b061-808764dfe2b9",
                next_payment_amount_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                status: "SCHEDULED",
                timezone: "America/Los_Angeles",
                created_at: "2020-06-18T17:45:13Z",
                updated_at: "2020-06-18T18:23:11Z",
                accepted_payment_methods: {
                    card: true,
                    square_gift_card: false,
                    bank_account: false,
                    buy_now_pay_later: false,
                    cash_app_pay: false,
                },
                custom_fields: [
                    { label: "Event Reference Number", value: "Ref. #1234", placement: "ABOVE_LINE_ITEMS" },
                    { label: "Terms of Service", value: "The terms of service are...", placement: "BELOW_LINE_ITEMS" },
                ],
                subscription_id: "subscription_id",
                sale_or_service_date: "2030-01-24",
                payment_conditions: "payment_conditions",
                store_payment_method_enabled: false,
                attachments: [{}],
                creator_team_member_id: "creator_team_member_id",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/invoices/invoice_id/publish")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoices.publish({
            invoice_id: "invoice_id",
            version: 1,
            idempotency_key: "32da42d0-1997-41b0-826b-f09464fc2c2e",
        });
        expect(response).toEqual({
            invoice: {
                id: "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
                version: 1,
                location_id: "ES0RJRZYEC39A",
                order_id: "CAISENgvlJ6jLWAzERDzjyHVybY",
                primary_recipient: {
                    customer_id: "JDKYHBWT1D4F8MFH63DBMEN8Y4",
                    given_name: "Amelia",
                    family_name: "Earhart",
                    email_address: "Amelia.Earhart@example.com",
                    phone_number: "1-212-555-4240",
                    company_name: "company_name",
                },
                payment_requests: [
                    {
                        uid: "2da7964f-f3d2-4f43-81e8-5aa220bf3355",
                        request_type: "BALANCE",
                        due_date: "2030-01-24",
                        tipping_enabled: true,
                        automatic_payment_source: "NONE",
                        reminders: [
                            {
                                uid: "beebd363-e47f-4075-8785-c235aaa7df11",
                                relative_scheduled_days: -1,
                                message: "Your invoice is due tomorrow",
                                status: "PENDING",
                            },
                        ],
                        computed_amount_money: {
                            amount: BigInt("10000"),
                            currency: "USD",
                        },
                        total_completed_amount_money: {
                            amount: BigInt("0"),
                            currency: "USD",
                        },
                    },
                ],
                delivery_method: "EMAIL",
                invoice_number: "inv-100",
                title: "Event Planning Services",
                description: "We appreciate your business!",
                scheduled_at: "2030-01-13T10:00:00Z",
                public_url: "https://squareup.com/pay-invoice/invtmp:5e22a2c2-47c1-46d6-b061-808764dfe2b9",
                next_payment_amount_money: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                status: "SCHEDULED",
                timezone: "America/Los_Angeles",
                created_at: "2020-06-18T17:45:13Z",
                updated_at: "2020-06-18T18:23:11Z",
                accepted_payment_methods: {
                    card: true,
                    square_gift_card: false,
                    bank_account: false,
                    buy_now_pay_later: false,
                    cash_app_pay: false,
                },
                custom_fields: [
                    {
                        label: "Event Reference Number",
                        value: "Ref. #1234",
                        placement: "ABOVE_LINE_ITEMS",
                    },
                    {
                        label: "Terms of Service",
                        value: "The terms of service are...",
                        placement: "BELOW_LINE_ITEMS",
                    },
                ],
                subscription_id: "subscription_id",
                sale_or_service_date: "2030-01-24",
                payment_conditions: "payment_conditions",
                store_payment_method_enabled: false,
                attachments: [{}],
                creator_team_member_id: "creator_team_member_id",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
