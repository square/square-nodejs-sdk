/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { SquareClient } from "../../../src/Client";

describe("CustomAttributeDefinitions", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            custom_attribute_definition: {
                key: "alternative_seller_name",
                schema: {
                    ref: "https://developer-production-s.squarecdn.com/schemas/v1/common.json#squareup.common.String",
                },
                name: "Alternative Merchant Name",
                description: "This is the other name this merchant goes by.",
                visibility: "VISIBILITY_READ_ONLY",
            },
        };
        const rawResponseBody = {
            custom_attribute_definition: {
                key: "alternative_seller_name",
                schema: {
                    ref: "https://developer-production-s.squarecdn.com/schemas/v1/common.json#squareup.common.String",
                },
                name: "Alternative Merchant Name",
                description: "This is the other name this merchant goes by.",
                visibility: "VISIBILITY_READ_ONLY",
                version: 1,
                updated_at: "2023-05-05T19:06:36.559Z",
                created_at: "2023-05-05T19:06:36.559Z",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/merchants/custom-attribute-definitions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.merchants.customAttributeDefinitions.create({
            customAttributeDefinition: {
                key: "alternative_seller_name",
                schema: {
                    ref: "https://developer-production-s.squarecdn.com/schemas/v1/common.json#squareup.common.String",
                },
                name: "Alternative Merchant Name",
                description: "This is the other name this merchant goes by.",
                visibility: "VISIBILITY_READ_ONLY",
            },
        });
        expect(response).toEqual({
            customAttributeDefinition: {
                key: "alternative_seller_name",
                schema: {
                    ref: "https://developer-production-s.squarecdn.com/schemas/v1/common.json#squareup.common.String",
                },
                name: "Alternative Merchant Name",
                description: "This is the other name this merchant goes by.",
                visibility: "VISIBILITY_READ_ONLY",
                version: 1,
                updatedAt: "2023-05-05T19:06:36.559Z",
                createdAt: "2023-05-05T19:06:36.559Z",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            custom_attribute_definition: {
                key: "alternative_seller_name",
                schema: {
                    ref: "https://developer-production-s.squarecdn.com/schemas/v1/common.json#squareup.common.String",
                },
                name: "Alternative Merchant Name",
                description: "This is the other name this merchant goes by.",
                visibility: "VISIBILITY_READ_ONLY",
                version: 1,
                updated_at: "2023-05-05T19:06:36.559Z",
                created_at: "2023-05-05T19:06:36.559Z",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/merchants/custom-attribute-definitions/key")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.merchants.customAttributeDefinitions.get({
            key: "key",
        });
        expect(response).toEqual({
            customAttributeDefinition: {
                key: "alternative_seller_name",
                schema: {
                    ref: "https://developer-production-s.squarecdn.com/schemas/v1/common.json#squareup.common.String",
                },
                name: "Alternative Merchant Name",
                description: "This is the other name this merchant goes by.",
                visibility: "VISIBILITY_READ_ONLY",
                version: 1,
                updatedAt: "2023-05-05T19:06:36.559Z",
                createdAt: "2023-05-05T19:06:36.559Z",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            custom_attribute_definition: {
                description: "Update the description as desired.",
                visibility: "VISIBILITY_READ_ONLY",
            },
        };
        const rawResponseBody = {
            custom_attribute_definition: {
                key: "alternative_seller_name",
                schema: {
                    ref: "https://developer-production-s.squarecdn.com/schemas/v1/common.json#squareup.common.String",
                },
                name: "Alternative Merchant Name",
                description: "Update the description as desired.",
                visibility: "VISIBILITY_READ_ONLY",
                version: 2,
                updated_at: "2023-05-05T19:34:10.181Z",
                created_at: "2023-05-05T19:06:36.559Z",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .put("/v2/merchants/custom-attribute-definitions/key")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.merchants.customAttributeDefinitions.update({
            key: "key",
            customAttributeDefinition: {
                description: "Update the description as desired.",
                visibility: "VISIBILITY_READ_ONLY",
            },
        });
        expect(response).toEqual({
            customAttributeDefinition: {
                key: "alternative_seller_name",
                schema: {
                    ref: "https://developer-production-s.squarecdn.com/schemas/v1/common.json#squareup.common.String",
                },
                name: "Alternative Merchant Name",
                description: "Update the description as desired.",
                visibility: "VISIBILITY_READ_ONLY",
                version: 2,
                updatedAt: "2023-05-05T19:34:10.181Z",
                createdAt: "2023-05-05T19:06:36.559Z",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/merchants/custom-attribute-definitions/key")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.merchants.customAttributeDefinitions.delete({
            key: "key",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
