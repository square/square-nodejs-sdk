/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { SquareClient } from "../../../src/Client";

describe("CustomAttributes", () => {
    test("batchDelete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            values: { id1: { key: "alternative_seller_name" }, id2: { key: "has_seen_tutorial" } },
        };
        const rawResponseBody = {
            values: {
                id1: { errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }] },
                id2: { errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }] },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/merchants/custom-attributes/bulk-delete")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.merchants.customAttributes.batchDelete({
            values: {
                id1: {
                    key: "alternative_seller_name",
                },
                id2: {
                    key: "has_seen_tutorial",
                },
            },
        });
        expect(response).toEqual({
            values: {
                id1: {
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                id2: {
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("batchUpsert", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            values: {
                id1: {
                    merchant_id: "DM7VKY8Q63GNP",
                    custom_attribute: { key: "alternative_seller_name", value: "Ultimate Sneaker Store" },
                },
                id2: { merchant_id: "DM7VKY8Q63GNP", custom_attribute: { key: "has_seen_tutorial", value: true } },
            },
        };
        const rawResponseBody = {
            values: {
                id1: {
                    merchant_id: "DM7VKY8Q63GNP",
                    custom_attribute: {
                        key: "alternative_seller_name",
                        value: "Ultimate Sneaker Store",
                        version: 2,
                        visibility: "VISIBILITY_READ_ONLY",
                        updated_at: "2023-05-06T19:21:04.551Z",
                        created_at: "2023-05-06T19:02:58.647Z",
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
                id2: {
                    merchant_id: "DM7VKY8Q63GNP",
                    custom_attribute: {
                        key: "has_seen_tutorial",
                        value: true,
                        version: 1,
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updated_at: "2023-05-06T19:21:04.551Z",
                        created_at: "2023-05-06T19:02:58.647Z",
                    },
                    errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR" }],
                },
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/merchants/custom-attributes/bulk-upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.merchants.customAttributes.batchUpsert({
            values: {
                id1: {
                    merchantId: "DM7VKY8Q63GNP",
                    customAttribute: {
                        key: "alternative_seller_name",
                        value: "Ultimate Sneaker Store",
                    },
                },
                id2: {
                    merchantId: "DM7VKY8Q63GNP",
                    customAttribute: {
                        key: "has_seen_tutorial",
                        value: true,
                    },
                },
            },
        });
        expect(response).toEqual({
            values: {
                id1: {
                    merchantId: "DM7VKY8Q63GNP",
                    customAttribute: {
                        key: "alternative_seller_name",
                        value: "Ultimate Sneaker Store",
                        version: 2,
                        visibility: "VISIBILITY_READ_ONLY",
                        updatedAt: "2023-05-06T19:21:04.551Z",
                        createdAt: "2023-05-06T19:02:58.647Z",
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
                id2: {
                    merchantId: "DM7VKY8Q63GNP",
                    customAttribute: {
                        key: "has_seen_tutorial",
                        value: true,
                        version: 1,
                        visibility: "VISIBILITY_READ_WRITE_VALUES",
                        updatedAt: "2023-05-06T19:21:04.551Z",
                        createdAt: "2023-05-06T19:02:58.647Z",
                    },
                    errors: [
                        {
                            category: "API_ERROR",
                            code: "INTERNAL_SERVER_ERROR",
                        },
                    ],
                },
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            custom_attribute: {
                key: "alternative_seller_name",
                value: "Ultimate Sneaker Store",
                version: 2,
                visibility: "VISIBILITY_READ_ONLY",
                definition: {
                    key: "key",
                    schema: { key: "value" },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updated_at: "updated_at",
                    created_at: "created_at",
                },
                updated_at: "2023-05-06T19:21:04.551Z",
                created_at: "2023-05-06T19:02:58.647Z",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/merchants/merchant_id/custom-attributes/key")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.merchants.customAttributes.get({
            merchantId: "merchant_id",
            key: "key",
        });
        expect(response).toEqual({
            customAttribute: {
                key: "alternative_seller_name",
                value: "Ultimate Sneaker Store",
                version: 2,
                visibility: "VISIBILITY_READ_ONLY",
                definition: {
                    key: "key",
                    schema: {
                        key: "value",
                    },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updatedAt: "updated_at",
                    createdAt: "created_at",
                },
                updatedAt: "2023-05-06T19:21:04.551Z",
                createdAt: "2023-05-06T19:02:58.647Z",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("upsert", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { custom_attribute: { value: "Ultimate Sneaker Store" } };
        const rawResponseBody = {
            custom_attribute: {
                key: "alternative_seller_name",
                value: "Ultimate Sneaker Store",
                version: 2,
                visibility: "VISIBILITY_READ_ONLY",
                definition: {
                    key: "key",
                    schema: { key: "value" },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updated_at: "updated_at",
                    created_at: "created_at",
                },
                updated_at: "2023-05-06T19:21:04.551Z",
                created_at: "2023-05-06T19:02:58.647Z",
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/merchants/merchant_id/custom-attributes/key")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.merchants.customAttributes.upsert({
            merchantId: "merchant_id",
            key: "key",
            customAttribute: {
                value: "Ultimate Sneaker Store",
            },
        });
        expect(response).toEqual({
            customAttribute: {
                key: "alternative_seller_name",
                value: "Ultimate Sneaker Store",
                version: 2,
                visibility: "VISIBILITY_READ_ONLY",
                definition: {
                    key: "key",
                    schema: {
                        key: "value",
                    },
                    name: "name",
                    description: "description",
                    visibility: "VISIBILITY_HIDDEN",
                    version: 1,
                    updatedAt: "updated_at",
                    createdAt: "created_at",
                },
                updatedAt: "2023-05-06T19:21:04.551Z",
                createdAt: "2023-05-06T19:02:58.647Z",
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/merchants/merchant_id/custom-attributes/key")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.merchants.customAttributes.delete({
            merchantId: "merchant_id",
            key: "key",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
