/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { SquareClient } from "../../../src/Client";

describe("Subscriptions", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "63f84c6c-2200-4c99-846c-2670a1311fbf",
            subscription: {
                name: "Example Webhook Subscription",
                event_types: ["payment.created", "payment.updated"],
                notification_url: "https://example-webhook-url.com",
                api_version: "2021-12-15",
            },
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            subscription: {
                id: "wbhk_b35f6b3145074cf9ad513610786c19d5",
                name: "Example Webhook Subscription",
                enabled: true,
                event_types: ["payment.created", "payment.updated"],
                notification_url: "https://example-webhook-url.com",
                api_version: "2021-12-15",
                signature_key: "1k9bIJKCeTmSQwyagtNRLg",
                created_at: "2022-01-10 23:29:48 +0000 UTC",
                updated_at: "2022-01-10 23:29:48 +0000 UTC",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/webhooks/subscriptions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.subscriptions.create({
            idempotencyKey: "63f84c6c-2200-4c99-846c-2670a1311fbf",
            subscription: {
                name: "Example Webhook Subscription",
                eventTypes: ["payment.created", "payment.updated"],
                notificationUrl: "https://example-webhook-url.com",
                apiVersion: "2021-12-15",
            },
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            subscription: {
                id: "wbhk_b35f6b3145074cf9ad513610786c19d5",
                name: "Example Webhook Subscription",
                enabled: true,
                eventTypes: ["payment.created", "payment.updated"],
                notificationUrl: "https://example-webhook-url.com",
                apiVersion: "2021-12-15",
                signatureKey: "1k9bIJKCeTmSQwyagtNRLg",
                createdAt: "2022-01-10 23:29:48 +0000 UTC",
                updatedAt: "2022-01-10 23:29:48 +0000 UTC",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            subscription: {
                id: "wbhk_b35f6b3145074cf9ad513610786c19d5",
                name: "Example Webhook Subscription",
                enabled: true,
                event_types: ["payment.created", "payment.updated"],
                notification_url: "https://example-webhook-url.com",
                api_version: "2021-12-15",
                signature_key: "1k9bIJKCeTmSQwyagtNRLg",
                created_at: "2022-01-10 23:29:48 +0000 UTC",
                updated_at: "2022-01-10 23:29:48 +0000 UTC",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/webhooks/subscriptions/subscription_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.subscriptions.get({
            subscriptionId: "subscription_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            subscription: {
                id: "wbhk_b35f6b3145074cf9ad513610786c19d5",
                name: "Example Webhook Subscription",
                enabled: true,
                eventTypes: ["payment.created", "payment.updated"],
                notificationUrl: "https://example-webhook-url.com",
                apiVersion: "2021-12-15",
                signatureKey: "1k9bIJKCeTmSQwyagtNRLg",
                createdAt: "2022-01-10 23:29:48 +0000 UTC",
                updatedAt: "2022-01-10 23:29:48 +0000 UTC",
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { subscription: { name: "Updated Example Webhook Subscription", enabled: false } };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            subscription: {
                id: "wbhk_b35f6b3145074cf9ad513610786c19d5",
                name: "Updated Example Webhook Subscription",
                enabled: false,
                event_types: ["payment.created", "payment.updated"],
                notification_url: "https://example-webhook-url.com",
                api_version: "2021-12-15",
                signature_key: "signature_key",
                created_at: "2022-01-10 23:29:48 +0000 UTC",
                updated_at: "2022-01-10 23:45:51 +0000 UTC",
            },
        };
        server
            .mockEndpoint()
            .put("/v2/webhooks/subscriptions/subscription_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.subscriptions.update({
            subscriptionId: "subscription_id",
            subscription: {
                name: "Updated Example Webhook Subscription",
                enabled: false,
            },
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            subscription: {
                id: "wbhk_b35f6b3145074cf9ad513610786c19d5",
                name: "Updated Example Webhook Subscription",
                enabled: false,
                eventTypes: ["payment.created", "payment.updated"],
                notificationUrl: "https://example-webhook-url.com",
                apiVersion: "2021-12-15",
                signatureKey: "signature_key",
                createdAt: "2022-01-10 23:29:48 +0000 UTC",
                updatedAt: "2022-01-10 23:45:51 +0000 UTC",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/webhooks/subscriptions/subscription_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.subscriptions.delete({
            subscriptionId: "subscription_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("updateSignatureKey", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { idempotency_key: "ed80ae6b-0654-473b-bbab-a39aee89a60d" };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            signature_key: "1k9bIJKCeTmSQwyagtNRLg",
        };
        server
            .mockEndpoint()
            .post("/v2/webhooks/subscriptions/subscription_id/signature-key")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.subscriptions.updateSignatureKey({
            subscriptionId: "subscription_id",
            idempotencyKey: "ed80ae6b-0654-473b-bbab-a39aee89a60d",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            signatureKey: "1k9bIJKCeTmSQwyagtNRLg",
        });
    });

    test("test", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { event_type: "payment.created" };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            subscription_test_result: {
                id: "23eed5a9-2b12-403e-b212-7e2889aea0f6",
                status_code: 404,
                payload:
                    '{"merchant_id":"1ZYMKZY1YFGBW","type":"payment.created","event_id":"23eed5a9-2b12-403e-b212-7e2889aea0f6","created_at":"2022-01-11T00:06:48.322945116Z","data":{"type":"payment","id":"KkAkhdMsgzn59SM8A89WgKwekxLZY","object":{"payment":{"amount_money":{"amount":100,"currency":"USD"},"approved_money":{"amount":100,"currency":"USD"},"capabilities":["EDIT_TIP_AMOUNT","EDIT_TIP_AMOUNT_UP","EDIT_TIP_AMOUNT_DOWN"],"card_details":{"avs_status":"AVS_ACCEPTED","card":{"bin":"540988","card_brand":"MASTERCARD","card_type":"CREDIT","exp_month":11,"exp_year":2022,"fingerprint":"sq-1-Tvruf3vPQxlvI6n0IcKYfBukrcv6IqWr8UyBdViWXU2yzGn5VMJvrsHMKpINMhPmVg","last_4":"9029","prepaid_type":"NOT_PREPAID"},"card_payment_timeline":{"authorized_at":"2020-11-22T21:16:51.198Z"},"cvv_status":"CVV_ACCEPTED","entry_method":"KEYED","statement_description":"SQ *DEFAULT TEST ACCOUNT","status":"AUTHORIZED"},"created_at":"2020-11-22T21:16:51.086Z","delay_action":"CANCEL","delay_duration":"PT168H","delayed_until":"2020-11-29T21:16:51.086Z","id":"hYy9pRFVxpDsO1FB05SunFWUe9JZY","location_id":"S8GWD5R9QB376","order_id":"03O3USaPaAaFnI6kkwB1JxGgBsUZY","receipt_number":"hYy9","risk_evaluation":{"created_at":"2020-11-22T21:16:51.198Z","risk_level":"NORMAL"},"source_type":"CARD","status":"APPROVED","total_money":{"amount":100,"currency":"USD"},"updated_at":"2020-11-22T21:16:51.198Z","version_token":"FfQhQJf9r3VSQIgyWBk1oqhIwiznLwVwJbVVA0bdyEv6o"}}}}',
                created_at: "2022-01-11 00:06:48.322945116 +0000 UTC m=+3863.054453746",
                updated_at: "2022-01-11 00:06:48.322945116 +0000 UTC m=+3863.054453746",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/webhooks/subscriptions/subscription_id/test")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.subscriptions.test({
            subscriptionId: "subscription_id",
            eventType: "payment.created",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            subscriptionTestResult: {
                id: "23eed5a9-2b12-403e-b212-7e2889aea0f6",
                statusCode: 404,
                payload:
                    '{"merchant_id":"1ZYMKZY1YFGBW","type":"payment.created","event_id":"23eed5a9-2b12-403e-b212-7e2889aea0f6","created_at":"2022-01-11T00:06:48.322945116Z","data":{"type":"payment","id":"KkAkhdMsgzn59SM8A89WgKwekxLZY","object":{"payment":{"amount_money":{"amount":100,"currency":"USD"},"approved_money":{"amount":100,"currency":"USD"},"capabilities":["EDIT_TIP_AMOUNT","EDIT_TIP_AMOUNT_UP","EDIT_TIP_AMOUNT_DOWN"],"card_details":{"avs_status":"AVS_ACCEPTED","card":{"bin":"540988","card_brand":"MASTERCARD","card_type":"CREDIT","exp_month":11,"exp_year":2022,"fingerprint":"sq-1-Tvruf3vPQxlvI6n0IcKYfBukrcv6IqWr8UyBdViWXU2yzGn5VMJvrsHMKpINMhPmVg","last_4":"9029","prepaid_type":"NOT_PREPAID"},"card_payment_timeline":{"authorized_at":"2020-11-22T21:16:51.198Z"},"cvv_status":"CVV_ACCEPTED","entry_method":"KEYED","statement_description":"SQ *DEFAULT TEST ACCOUNT","status":"AUTHORIZED"},"created_at":"2020-11-22T21:16:51.086Z","delay_action":"CANCEL","delay_duration":"PT168H","delayed_until":"2020-11-29T21:16:51.086Z","id":"hYy9pRFVxpDsO1FB05SunFWUe9JZY","location_id":"S8GWD5R9QB376","order_id":"03O3USaPaAaFnI6kkwB1JxGgBsUZY","receipt_number":"hYy9","risk_evaluation":{"created_at":"2020-11-22T21:16:51.198Z","risk_level":"NORMAL"},"source_type":"CARD","status":"APPROVED","total_money":{"amount":100,"currency":"USD"},"updated_at":"2020-11-22T21:16:51.198Z","version_token":"FfQhQJf9r3VSQIgyWBk1oqhIwiznLwVwJbVVA0bdyEv6o"}}}}',
                createdAt: "2022-01-11 00:06:48.322945116 +0000 UTC m=+3863.054453746",
                updatedAt: "2022-01-11 00:06:48.322945116 +0000 UTC m=+3863.054453746",
            },
        });
    });
});
