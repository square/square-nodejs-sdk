// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("BankAccounts", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            bank_accounts: [
                {
                    id: "ao6iaQ9vhDiaQD7n3GB",
                    account_number_suffix: "971",
                    country: "US",
                    currency: "USD",
                    account_type: "CHECKING",
                    holder_name: "Jane Doe",
                    primary_bank_identification_number: "112200303",
                    secondary_bank_identification_number: "secondary_bank_identification_number",
                    debit_mandate_reference_id: "debit_mandate_reference_id",
                    reference_id: "reference_id",
                    location_id: "S8GWD5example",
                    status: "VERIFICATION_IN_PROGRESS",
                    creditable: false,
                    debitable: false,
                    fingerprint: "fingerprint",
                    version: 5,
                    bank_name: "Bank Name",
                },
                {
                    id: "4x7WXuaxrkQkVlka3GB",
                    account_number_suffix: "972",
                    country: "US",
                    currency: "USD",
                    account_type: "CHECKING",
                    holder_name: "Jane Doe",
                    primary_bank_identification_number: "112200303",
                    secondary_bank_identification_number: "secondary_bank_identification_number",
                    debit_mandate_reference_id: "debit_mandate_reference_id",
                    reference_id: "reference_id",
                    location_id: "S8GWD5example",
                    status: "VERIFICATION_IN_PROGRESS",
                    creditable: false,
                    debitable: false,
                    fingerprint: "fingerprint",
                    version: 5,
                    bank_name: "Bank Name",
                },
            ],
            cursor: "cursor",
        };
        server.mockEndpoint().get("/v2/bank-accounts").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            bankAccounts: [
                {
                    id: "ao6iaQ9vhDiaQD7n3GB",
                    accountNumberSuffix: "971",
                    country: "US",
                    currency: "USD",
                    accountType: "CHECKING",
                    holderName: "Jane Doe",
                    primaryBankIdentificationNumber: "112200303",
                    secondaryBankIdentificationNumber: "secondary_bank_identification_number",
                    debitMandateReferenceId: "debit_mandate_reference_id",
                    referenceId: "reference_id",
                    locationId: "S8GWD5example",
                    status: "VERIFICATION_IN_PROGRESS",
                    creditable: false,
                    debitable: false,
                    fingerprint: "fingerprint",
                    version: 5,
                    bankName: "Bank Name",
                },
                {
                    id: "4x7WXuaxrkQkVlka3GB",
                    accountNumberSuffix: "972",
                    country: "US",
                    currency: "USD",
                    accountType: "CHECKING",
                    holderName: "Jane Doe",
                    primaryBankIdentificationNumber: "112200303",
                    secondaryBankIdentificationNumber: "secondary_bank_identification_number",
                    debitMandateReferenceId: "debit_mandate_reference_id",
                    referenceId: "reference_id",
                    locationId: "S8GWD5example",
                    status: "VERIFICATION_IN_PROGRESS",
                    creditable: false,
                    debitable: false,
                    fingerprint: "fingerprint",
                    version: 5,
                    bankName: "Bank Name",
                },
            ],
            cursor: "cursor",
        };
        const page = await client.bankAccounts.list({
            cursor: "cursor",
            limit: 1,
            locationId: "location_id",
        });

        expect(expected.bankAccounts).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.bankAccounts).toEqual(nextPage.data);
    });

    test("GetByV1Id", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            bank_account: {
                id: "w3yRgCGYQnwmdl0R3GB",
                account_number_suffix: "971",
                country: "US",
                currency: "USD",
                account_type: "CHECKING",
                holder_name: "Jane Doe",
                primary_bank_identification_number: "112200303",
                secondary_bank_identification_number: "secondary_bank_identification_number",
                debit_mandate_reference_id: "debit_mandate_reference_id",
                reference_id: "reference_id",
                location_id: "S8GWD5example",
                status: "VERIFICATION_IN_PROGRESS",
                creditable: false,
                debitable: false,
                fingerprint: "fingerprint",
                version: 5,
                bank_name: "Bank Name",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/bank-accounts/by-v1-id/v1_bank_account_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bankAccounts.getByV1Id({
            v1BankAccountId: "v1_bank_account_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            bankAccount: {
                id: "w3yRgCGYQnwmdl0R3GB",
                accountNumberSuffix: "971",
                country: "US",
                currency: "USD",
                accountType: "CHECKING",
                holderName: "Jane Doe",
                primaryBankIdentificationNumber: "112200303",
                secondaryBankIdentificationNumber: "secondary_bank_identification_number",
                debitMandateReferenceId: "debit_mandate_reference_id",
                referenceId: "reference_id",
                locationId: "S8GWD5example",
                status: "VERIFICATION_IN_PROGRESS",
                creditable: false,
                debitable: false,
                fingerprint: "fingerprint",
                version: 5,
                bankName: "Bank Name",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            bank_account: {
                id: "w3yRgCGYQnwmdl0R3GB",
                account_number_suffix: "971",
                country: "US",
                currency: "USD",
                account_type: "CHECKING",
                holder_name: "Jane Doe",
                primary_bank_identification_number: "112200303",
                secondary_bank_identification_number: "secondary_bank_identification_number",
                debit_mandate_reference_id: "debit_mandate_reference_id",
                reference_id: "reference_id",
                location_id: "S8GWD5example",
                status: "VERIFICATION_IN_PROGRESS",
                creditable: false,
                debitable: false,
                fingerprint: "fingerprint",
                version: 5,
                bank_name: "Bank Name",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/bank-accounts/bank_account_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bankAccounts.get({
            bankAccountId: "bank_account_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            bankAccount: {
                id: "w3yRgCGYQnwmdl0R3GB",
                accountNumberSuffix: "971",
                country: "US",
                currency: "USD",
                accountType: "CHECKING",
                holderName: "Jane Doe",
                primaryBankIdentificationNumber: "112200303",
                secondaryBankIdentificationNumber: "secondary_bank_identification_number",
                debitMandateReferenceId: "debit_mandate_reference_id",
                referenceId: "reference_id",
                locationId: "S8GWD5example",
                status: "VERIFICATION_IN_PROGRESS",
                creditable: false,
                debitable: false,
                fingerprint: "fingerprint",
                version: 5,
                bankName: "Bank Name",
            },
        });
    });
});
