/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SquareClient } from "../../src/Client";

describe("Inventory", () => {
    test("DeprecatedGetAdjustment", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            adjustment: {
                id: "UDMOEO78BG6GYWA2XDRYX3KB",
                reference_id: "4a366069-4096-47a2-99a5-0084ac879509",
                from_state: "IN_STOCK",
                to_state: "SOLD",
                location_id: "C6W5YS5QM06F5",
                catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                catalog_object_type: "ITEM_VARIATION",
                quantity: "7",
                total_price_money: { amount: BigInt(4550), currency: "USD" },
                occurred_at: "2016-11-16T25:44:22.837Z",
                created_at: "2016-11-17T13:02:15.142Z",
                source: {
                    product: "SQUARE_POS",
                    application_id: "416ff29c-86c4-4feb-b58c-9705f21f3ea0",
                    name: "Square Point of Sale 4.37",
                },
                employee_id: "employee_id",
                team_member_id: "LRK57NSQ5X7PUD05",
                transaction_id: "transaction_id",
                refund_id: "refund_id",
                purchase_order_id: "purchase_order_id",
                goods_receipt_id: "goods_receipt_id",
                adjustment_group: {
                    id: "id",
                    root_adjustment_id: "root_adjustment_id",
                    from_state: "CUSTOM",
                    to_state: "CUSTOM",
                },
            },
        };
        server
            .mockEndpoint()
            .get("/v2/inventory/adjustment/adjustment_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inventory.deprecatedGetAdjustment({
            adjustment_id: "adjustment_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            adjustment: {
                id: "UDMOEO78BG6GYWA2XDRYX3KB",
                reference_id: "4a366069-4096-47a2-99a5-0084ac879509",
                from_state: "IN_STOCK",
                to_state: "SOLD",
                location_id: "C6W5YS5QM06F5",
                catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                catalog_object_type: "ITEM_VARIATION",
                quantity: "7",
                total_price_money: {
                    amount: BigInt("4550"),
                    currency: "USD",
                },
                occurred_at: "2016-11-16T25:44:22.837Z",
                created_at: "2016-11-17T13:02:15.142Z",
                source: {
                    product: "SQUARE_POS",
                    application_id: "416ff29c-86c4-4feb-b58c-9705f21f3ea0",
                    name: "Square Point of Sale 4.37",
                },
                employee_id: "employee_id",
                team_member_id: "LRK57NSQ5X7PUD05",
                transaction_id: "transaction_id",
                refund_id: "refund_id",
                purchase_order_id: "purchase_order_id",
                goods_receipt_id: "goods_receipt_id",
                adjustment_group: {
                    id: "id",
                    root_adjustment_id: "root_adjustment_id",
                    from_state: "CUSTOM",
                    to_state: "CUSTOM",
                },
            },
        });
    });

    test("getAdjustment", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            adjustment: {
                id: "UDMOEO78BG6GYWA2XDRYX3KB",
                reference_id: "4a366069-4096-47a2-99a5-0084ac879509",
                from_state: "IN_STOCK",
                to_state: "SOLD",
                location_id: "C6W5YS5QM06F5",
                catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                catalog_object_type: "ITEM_VARIATION",
                quantity: "7",
                total_price_money: { amount: BigInt(4550), currency: "USD" },
                occurred_at: "2016-11-16T25:44:22.837Z",
                created_at: "2016-11-17T13:02:15.142Z",
                source: {
                    product: "SQUARE_POS",
                    application_id: "416ff29c-86c4-4feb-b58c-9705f21f3ea0",
                    name: "Square Point of Sale 4.37",
                },
                employee_id: "employee_id",
                team_member_id: "LRK57NSQ5X7PUD05",
                transaction_id: "transaction_id",
                refund_id: "refund_id",
                purchase_order_id: "purchase_order_id",
                goods_receipt_id: "goods_receipt_id",
                adjustment_group: {
                    id: "id",
                    root_adjustment_id: "root_adjustment_id",
                    from_state: "CUSTOM",
                    to_state: "CUSTOM",
                },
            },
        };
        server
            .mockEndpoint()
            .get("/v2/inventory/adjustments/adjustment_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inventory.getAdjustment({
            adjustment_id: "adjustment_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            adjustment: {
                id: "UDMOEO78BG6GYWA2XDRYX3KB",
                reference_id: "4a366069-4096-47a2-99a5-0084ac879509",
                from_state: "IN_STOCK",
                to_state: "SOLD",
                location_id: "C6W5YS5QM06F5",
                catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                catalog_object_type: "ITEM_VARIATION",
                quantity: "7",
                total_price_money: {
                    amount: BigInt("4550"),
                    currency: "USD",
                },
                occurred_at: "2016-11-16T25:44:22.837Z",
                created_at: "2016-11-17T13:02:15.142Z",
                source: {
                    product: "SQUARE_POS",
                    application_id: "416ff29c-86c4-4feb-b58c-9705f21f3ea0",
                    name: "Square Point of Sale 4.37",
                },
                employee_id: "employee_id",
                team_member_id: "LRK57NSQ5X7PUD05",
                transaction_id: "transaction_id",
                refund_id: "refund_id",
                purchase_order_id: "purchase_order_id",
                goods_receipt_id: "goods_receipt_id",
                adjustment_group: {
                    id: "id",
                    root_adjustment_id: "root_adjustment_id",
                    from_state: "CUSTOM",
                    to_state: "CUSTOM",
                },
            },
        });
    });

    test("DeprecatedBatchChange", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "8fc6a5b0-9fe8-4b46-b46b-2ef95793abbe",
            changes: [
                {
                    type: "PHYSICAL_COUNT",
                    physical_count: {
                        reference_id: "1536bfbf-efed-48bf-b17d-a197141b2a92",
                        catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                        state: "IN_STOCK",
                        location_id: "C6W5YS5QM06F5",
                        quantity: "53",
                        team_member_id: "LRK57NSQ5X7PUD05",
                        occurred_at: "2016-11-16T22:25:24.878Z",
                    },
                },
            ],
            ignore_unchanged_counts: true,
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            counts: [
                {
                    catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                    catalog_object_type: "ITEM_VARIATION",
                    state: "IN_STOCK",
                    location_id: "C6W5YS5QM06F5",
                    quantity: "53",
                    calculated_at: "2016-11-16T22:28:01.223Z",
                    is_estimated: true,
                },
            ],
            changes: [{ type: "PHYSICAL_COUNT", measurement_unit_id: "measurement_unit_id" }],
        };
        server
            .mockEndpoint()
            .post("/v2/inventory/batch-change")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inventory.deprecatedBatchChange({
            idempotency_key: "8fc6a5b0-9fe8-4b46-b46b-2ef95793abbe",
            changes: [
                {
                    type: "PHYSICAL_COUNT",
                    physical_count: {
                        reference_id: "1536bfbf-efed-48bf-b17d-a197141b2a92",
                        catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                        state: "IN_STOCK",
                        location_id: "C6W5YS5QM06F5",
                        quantity: "53",
                        team_member_id: "LRK57NSQ5X7PUD05",
                        occurred_at: "2016-11-16T22:25:24.878Z",
                    },
                },
            ],
            ignore_unchanged_counts: true,
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            counts: [
                {
                    catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                    catalog_object_type: "ITEM_VARIATION",
                    state: "IN_STOCK",
                    location_id: "C6W5YS5QM06F5",
                    quantity: "53",
                    calculated_at: "2016-11-16T22:28:01.223Z",
                    is_estimated: true,
                },
            ],
            changes: [
                {
                    type: "PHYSICAL_COUNT",
                    measurement_unit_id: "measurement_unit_id",
                },
            ],
        });
    });

    test("DeprecatedBatchGetChanges", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            catalog_object_ids: ["W62UWFY35CWMYGVWK6TWJDNI"],
            location_ids: ["C6W5YS5QM06F5"],
            types: ["PHYSICAL_COUNT"],
            states: ["IN_STOCK"],
            updated_after: "2016-11-01T00:00:00.000Z",
            updated_before: "2016-12-01T00:00:00.000Z",
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            changes: [
                {
                    type: "PHYSICAL_COUNT",
                    physical_count: {
                        id: "46YDTW253DWGGK9HMAE6XCAO",
                        reference_id: "22c07cf4-5626-4224-89f9-691112019399",
                        catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                        catalog_object_type: "ITEM_VARIATION",
                        state: "IN_STOCK",
                        location_id: "C6W5YS5QM06F5",
                        quantity: "86",
                        source: {
                            product: "SQUARE_POS",
                            application_id: "416ff29c-86c4-4feb-b58c-9705f21f3ea0",
                            name: "Square Point of Sale 4.37",
                        },
                        team_member_id: "LRK57NSQ5X7PUD05",
                        occurred_at: "2016-11-16T22:24:49.028Z",
                        created_at: "2016-11-16T22:25:24.878Z",
                    },
                    measurement_unit_id: "measurement_unit_id",
                },
            ],
            cursor: "cursor",
        };
        server
            .mockEndpoint()
            .post("/v2/inventory/batch-retrieve-changes")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inventory.deprecatedBatchGetChanges({
            catalog_object_ids: ["W62UWFY35CWMYGVWK6TWJDNI"],
            location_ids: ["C6W5YS5QM06F5"],
            types: ["PHYSICAL_COUNT"],
            states: ["IN_STOCK"],
            updated_after: "2016-11-01T00:00:00.000Z",
            updated_before: "2016-12-01T00:00:00.000Z",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            changes: [
                {
                    type: "PHYSICAL_COUNT",
                    physical_count: {
                        id: "46YDTW253DWGGK9HMAE6XCAO",
                        reference_id: "22c07cf4-5626-4224-89f9-691112019399",
                        catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                        catalog_object_type: "ITEM_VARIATION",
                        state: "IN_STOCK",
                        location_id: "C6W5YS5QM06F5",
                        quantity: "86",
                        source: {
                            product: "SQUARE_POS",
                            application_id: "416ff29c-86c4-4feb-b58c-9705f21f3ea0",
                            name: "Square Point of Sale 4.37",
                        },
                        team_member_id: "LRK57NSQ5X7PUD05",
                        occurred_at: "2016-11-16T22:24:49.028Z",
                        created_at: "2016-11-16T22:25:24.878Z",
                    },
                    measurement_unit_id: "measurement_unit_id",
                },
            ],
            cursor: "cursor",
        });
    });

    test("DeprecatedBatchGetCounts", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            catalog_object_ids: ["W62UWFY35CWMYGVWK6TWJDNI"],
            location_ids: ["59TNP9SA8VGDA"],
            updated_after: "2016-11-16T00:00:00.000Z",
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            counts: [
                {
                    catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                    catalog_object_type: "ITEM_VARIATION",
                    state: "IN_STOCK",
                    location_id: "59TNP9SA8VGDA",
                    quantity: "79",
                    calculated_at: "2016-11-16T22:28:01.223Z",
                    is_estimated: true,
                },
            ],
            cursor: "cursor",
        };
        server
            .mockEndpoint()
            .post("/v2/inventory/batch-retrieve-counts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inventory.deprecatedBatchGetCounts({
            catalog_object_ids: ["W62UWFY35CWMYGVWK6TWJDNI"],
            location_ids: ["59TNP9SA8VGDA"],
            updated_after: "2016-11-16T00:00:00.000Z",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            counts: [
                {
                    catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                    catalog_object_type: "ITEM_VARIATION",
                    state: "IN_STOCK",
                    location_id: "59TNP9SA8VGDA",
                    quantity: "79",
                    calculated_at: "2016-11-16T22:28:01.223Z",
                    is_estimated: true,
                },
            ],
            cursor: "cursor",
        });
    });

    test("BatchCreateChanges", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "8fc6a5b0-9fe8-4b46-b46b-2ef95793abbe",
            changes: [
                {
                    type: "PHYSICAL_COUNT",
                    physical_count: {
                        reference_id: "1536bfbf-efed-48bf-b17d-a197141b2a92",
                        catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                        state: "IN_STOCK",
                        location_id: "C6W5YS5QM06F5",
                        quantity: "53",
                        team_member_id: "LRK57NSQ5X7PUD05",
                        occurred_at: "2016-11-16T22:25:24.878Z",
                    },
                },
            ],
            ignore_unchanged_counts: true,
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            counts: [
                {
                    catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                    catalog_object_type: "ITEM_VARIATION",
                    state: "IN_STOCK",
                    location_id: "C6W5YS5QM06F5",
                    quantity: "53",
                    calculated_at: "2016-11-16T22:28:01.223Z",
                    is_estimated: true,
                },
            ],
            changes: [{ type: "PHYSICAL_COUNT", measurement_unit_id: "measurement_unit_id" }],
        };
        server
            .mockEndpoint()
            .post("/v2/inventory/changes/batch-create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inventory.batchCreateChanges({
            idempotency_key: "8fc6a5b0-9fe8-4b46-b46b-2ef95793abbe",
            changes: [
                {
                    type: "PHYSICAL_COUNT",
                    physical_count: {
                        reference_id: "1536bfbf-efed-48bf-b17d-a197141b2a92",
                        catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                        state: "IN_STOCK",
                        location_id: "C6W5YS5QM06F5",
                        quantity: "53",
                        team_member_id: "LRK57NSQ5X7PUD05",
                        occurred_at: "2016-11-16T22:25:24.878Z",
                    },
                },
            ],
            ignore_unchanged_counts: true,
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            counts: [
                {
                    catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                    catalog_object_type: "ITEM_VARIATION",
                    state: "IN_STOCK",
                    location_id: "C6W5YS5QM06F5",
                    quantity: "53",
                    calculated_at: "2016-11-16T22:28:01.223Z",
                    is_estimated: true,
                },
            ],
            changes: [
                {
                    type: "PHYSICAL_COUNT",
                    measurement_unit_id: "measurement_unit_id",
                },
            ],
        });
    });

    test("deprecatedGetPhysicalCount", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            count: {
                id: "ANZADNPLKADOJKJIUANKLMLQ",
                reference_id: "f857ec37-f9a0-4458-8e23-5b5e0bea4e53",
                catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                catalog_object_type: "ITEM_VARIATION",
                state: "IN_STOCK",
                location_id: "C6W5YS5QM06F5",
                quantity: "15",
                source: {
                    product: "SQUARE_POS",
                    application_id: "416ff29c-86c4-4feb-b58c-9705f21f3ea0",
                    name: "Square Point of Sale 4.37",
                },
                employee_id: "employee_id",
                team_member_id: "LRK57NSQ5X7PUD05",
                occurred_at: "2016-11-16T22:25:24.878Z",
                created_at: "2016-11-16T22:25:24.878Z",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/inventory/physical-count/physical_count_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inventory.deprecatedGetPhysicalCount({
            physical_count_id: "physical_count_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            count: {
                id: "ANZADNPLKADOJKJIUANKLMLQ",
                reference_id: "f857ec37-f9a0-4458-8e23-5b5e0bea4e53",
                catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                catalog_object_type: "ITEM_VARIATION",
                state: "IN_STOCK",
                location_id: "C6W5YS5QM06F5",
                quantity: "15",
                source: {
                    product: "SQUARE_POS",
                    application_id: "416ff29c-86c4-4feb-b58c-9705f21f3ea0",
                    name: "Square Point of Sale 4.37",
                },
                employee_id: "employee_id",
                team_member_id: "LRK57NSQ5X7PUD05",
                occurred_at: "2016-11-16T22:25:24.878Z",
                created_at: "2016-11-16T22:25:24.878Z",
            },
        });
    });

    test("getPhysicalCount", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            count: {
                id: "ANZADNPLKADOJKJIUANKLMLQ",
                reference_id: "f857ec37-f9a0-4458-8e23-5b5e0bea4e53",
                catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                catalog_object_type: "ITEM_VARIATION",
                state: "IN_STOCK",
                location_id: "C6W5YS5QM06F5",
                quantity: "15",
                source: {
                    product: "SQUARE_POS",
                    application_id: "416ff29c-86c4-4feb-b58c-9705f21f3ea0",
                    name: "Square Point of Sale 4.37",
                },
                employee_id: "employee_id",
                team_member_id: "LRK57NSQ5X7PUD05",
                occurred_at: "2016-11-16T22:25:24.878Z",
                created_at: "2016-11-16T22:25:24.878Z",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/inventory/physical-counts/physical_count_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inventory.getPhysicalCount({
            physical_count_id: "physical_count_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            count: {
                id: "ANZADNPLKADOJKJIUANKLMLQ",
                reference_id: "f857ec37-f9a0-4458-8e23-5b5e0bea4e53",
                catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                catalog_object_type: "ITEM_VARIATION",
                state: "IN_STOCK",
                location_id: "C6W5YS5QM06F5",
                quantity: "15",
                source: {
                    product: "SQUARE_POS",
                    application_id: "416ff29c-86c4-4feb-b58c-9705f21f3ea0",
                    name: "Square Point of Sale 4.37",
                },
                employee_id: "employee_id",
                team_member_id: "LRK57NSQ5X7PUD05",
                occurred_at: "2016-11-16T22:25:24.878Z",
                created_at: "2016-11-16T22:25:24.878Z",
            },
        });
    });

    test("getTransfer", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            transfer: {
                id: "UDMOEO78BG6GYWA2XDRYX3KB",
                reference_id: "4a366069-4096-47a2-99a5-0084ac879509",
                state: "IN_STOCK",
                from_location_id: "C6W5YS5QM06F5",
                to_location_id: "59TNP9SA8VGDA",
                catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                catalog_object_type: "ITEM_VARIATION",
                quantity: "7",
                occurred_at: "2016-11-16T25:44:22.837Z",
                created_at: "2016-11-17T13:02:15.142Z",
                source: {
                    product: "SQUARE_POS",
                    application_id: "416ff29c-86c4-4feb-b58c-9705f21f3ea0",
                    name: "Square Point of Sale 4.37",
                },
                employee_id: "employee_id",
                team_member_id: "LRK57NSQ5X7PUD05",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/inventory/transfers/transfer_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inventory.getTransfer({
            transfer_id: "transfer_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            transfer: {
                id: "UDMOEO78BG6GYWA2XDRYX3KB",
                reference_id: "4a366069-4096-47a2-99a5-0084ac879509",
                state: "IN_STOCK",
                from_location_id: "C6W5YS5QM06F5",
                to_location_id: "59TNP9SA8VGDA",
                catalog_object_id: "W62UWFY35CWMYGVWK6TWJDNI",
                catalog_object_type: "ITEM_VARIATION",
                quantity: "7",
                occurred_at: "2016-11-16T25:44:22.837Z",
                created_at: "2016-11-17T13:02:15.142Z",
                source: {
                    product: "SQUARE_POS",
                    application_id: "416ff29c-86c4-4feb-b58c-9705f21f3ea0",
                    name: "Square Point of Sale 4.37",
                },
                employee_id: "employee_id",
                team_member_id: "LRK57NSQ5X7PUD05",
            },
        });
    });
});
