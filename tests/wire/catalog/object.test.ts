// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Object_", () => {
    test("upsert", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "af3d1afc-7212-4300-b463-0bfc5314a5ae",
            object: { type: "ITEM", id: "id" },
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            catalog_object: {
                type: "ITEM",
                id: "id",
                updated_at: "updated_at",
                version: BigInt(1000000),
                is_deleted: true,
                custom_attribute_values: { key: {} },
                catalog_v1_ids: [{}],
                present_at_all_locations: true,
                present_at_location_ids: ["present_at_location_ids"],
                absent_at_location_ids: ["absent_at_location_ids"],
                image_id: "image_id",
                item_data: {
                    name: "name",
                    description: "description",
                    abbreviation: "abbreviation",
                    label_color: "label_color",
                    is_taxable: true,
                    category_id: "category_id",
                    tax_ids: ["tax_ids"],
                    modifier_list_info: [{ modifier_list_id: "modifier_list_id" }],
                    product_type: "REGULAR",
                    skip_modifier_screen: true,
                    item_options: [{}],
                    ecom_uri: "ecom_uri",
                    ecom_image_uris: ["ecom_image_uris"],
                    image_ids: ["image_ids"],
                    sort_name: "sort_name",
                    description_html: "description_html",
                    description_plaintext: "description_plaintext",
                    channels: ["channels"],
                    is_archived: true,
                    is_alcoholic: true,
                },
            },
            id_mappings: [
                { client_object_id: "#Cocoa", object_id: "R2TA2FOBUGCJZNIWJSOSNAI4" },
                { client_object_id: "#Small", object_id: "QRT53UP4LITLWGOGBZCUWP63" },
                { client_object_id: "#Large", object_id: "NS77DKEIQ3AEQTCP727DSA7U" },
            ],
        };
        server
            .mockEndpoint()
            .post("/v2/catalog/object")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.catalog.object.upsert({
            idempotencyKey: "af3d1afc-7212-4300-b463-0bfc5314a5ae",
            object: {
                type: "ITEM",
                id: "id",
            },
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            catalogObject: {
                type: "ITEM",
                id: "id",
                updatedAt: "updated_at",
                version: BigInt("1000000"),
                isDeleted: true,
                customAttributeValues: {
                    key: {},
                },
                catalogV1Ids: [{}],
                presentAtAllLocations: true,
                presentAtLocationIds: ["present_at_location_ids"],
                absentAtLocationIds: ["absent_at_location_ids"],
                imageId: "image_id",
                itemData: {
                    name: "name",
                    description: "description",
                    abbreviation: "abbreviation",
                    labelColor: "label_color",
                    isTaxable: true,
                    categoryId: "category_id",
                    taxIds: ["tax_ids"],
                    modifierListInfo: [
                        {
                            modifierListId: "modifier_list_id",
                        },
                    ],
                    productType: "REGULAR",
                    skipModifierScreen: true,
                    itemOptions: [{}],
                    ecomUri: "ecom_uri",
                    ecomImageUris: ["ecom_image_uris"],
                    imageIds: ["image_ids"],
                    sortName: "sort_name",
                    descriptionHtml: "description_html",
                    descriptionPlaintext: "description_plaintext",
                    channels: ["channels"],
                    isArchived: true,
                    isAlcoholic: true,
                },
            },
            idMappings: [
                {
                    clientObjectId: "#Cocoa",
                    objectId: "R2TA2FOBUGCJZNIWJSOSNAI4",
                },
                {
                    clientObjectId: "#Small",
                    objectId: "QRT53UP4LITLWGOGBZCUWP63",
                },
                {
                    clientObjectId: "#Large",
                    objectId: "NS77DKEIQ3AEQTCP727DSA7U",
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            object: {
                type: "ITEM",
                id: "id",
                updated_at: "updated_at",
                version: BigInt(1000000),
                is_deleted: true,
                custom_attribute_values: { key: {} },
                catalog_v1_ids: [{}],
                present_at_all_locations: true,
                present_at_location_ids: ["present_at_location_ids"],
                absent_at_location_ids: ["absent_at_location_ids"],
                image_id: "image_id",
                item_data: {
                    name: "name",
                    description: "description",
                    abbreviation: "abbreviation",
                    label_color: "label_color",
                    is_taxable: true,
                    category_id: "category_id",
                    tax_ids: ["tax_ids"],
                    modifier_list_info: [{ modifier_list_id: "modifier_list_id" }],
                    product_type: "REGULAR",
                    skip_modifier_screen: true,
                    item_options: [{}],
                    ecom_uri: "ecom_uri",
                    ecom_image_uris: ["ecom_image_uris"],
                    image_ids: ["image_ids"],
                    sort_name: "sort_name",
                    description_html: "description_html",
                    description_plaintext: "description_plaintext",
                    channels: ["channels"],
                    is_archived: true,
                    is_alcoholic: true,
                },
            },
            related_objects: [
                {
                    type: "CATEGORY",
                    id: "id",
                    updated_at: "updated_at",
                    version: BigInt(1000000),
                    is_deleted: true,
                    custom_attribute_values: { key: {} },
                    catalog_v1_ids: [{}],
                    present_at_all_locations: true,
                    present_at_location_ids: ["present_at_location_ids"],
                    absent_at_location_ids: ["absent_at_location_ids"],
                    image_id: "image_id",
                    ordinal: BigInt(1000000),
                },
                {
                    type: "TAX",
                    id: "id",
                    updated_at: "updated_at",
                    version: BigInt(1000000),
                    is_deleted: true,
                    custom_attribute_values: { key: {} },
                    catalog_v1_ids: [{}],
                    present_at_all_locations: true,
                    present_at_location_ids: ["present_at_location_ids"],
                    absent_at_location_ids: ["absent_at_location_ids"],
                    image_id: "image_id",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/v2/catalog/object/object_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.catalog.object.get({
            objectId: "object_id",
            includeRelatedObjects: true,
            catalogVersion: BigInt("1000000"),
            includeCategoryPathToRoot: true,
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            object: {
                type: "ITEM",
                id: "id",
                updatedAt: "updated_at",
                version: BigInt("1000000"),
                isDeleted: true,
                customAttributeValues: {
                    key: {},
                },
                catalogV1Ids: [{}],
                presentAtAllLocations: true,
                presentAtLocationIds: ["present_at_location_ids"],
                absentAtLocationIds: ["absent_at_location_ids"],
                imageId: "image_id",
                itemData: {
                    name: "name",
                    description: "description",
                    abbreviation: "abbreviation",
                    labelColor: "label_color",
                    isTaxable: true,
                    categoryId: "category_id",
                    taxIds: ["tax_ids"],
                    modifierListInfo: [
                        {
                            modifierListId: "modifier_list_id",
                        },
                    ],
                    productType: "REGULAR",
                    skipModifierScreen: true,
                    itemOptions: [{}],
                    ecomUri: "ecom_uri",
                    ecomImageUris: ["ecom_image_uris"],
                    imageIds: ["image_ids"],
                    sortName: "sort_name",
                    descriptionHtml: "description_html",
                    descriptionPlaintext: "description_plaintext",
                    channels: ["channels"],
                    isArchived: true,
                    isAlcoholic: true,
                },
            },
            relatedObjects: [
                {
                    type: "CATEGORY",
                    id: "id",
                    updatedAt: "updated_at",
                    version: BigInt("1000000"),
                    isDeleted: true,
                    customAttributeValues: {
                        key: {},
                    },
                    catalogV1Ids: [{}],
                    presentAtAllLocations: true,
                    presentAtLocationIds: ["present_at_location_ids"],
                    absentAtLocationIds: ["absent_at_location_ids"],
                    imageId: "image_id",
                    ordinal: BigInt("1000000"),
                },
                {
                    type: "TAX",
                    id: "id",
                    updatedAt: "updated_at",
                    version: BigInt("1000000"),
                    isDeleted: true,
                    customAttributeValues: {
                        key: {},
                    },
                    catalogV1Ids: [{}],
                    presentAtAllLocations: true,
                    presentAtLocationIds: ["present_at_location_ids"],
                    absentAtLocationIds: ["absent_at_location_ids"],
                    imageId: "image_id",
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            deleted_object_ids: ["7SB3ZQYJ5GDMVFL7JK46JCHT", "KQLFFHA6K6J3YQAQAWDQAL57"],
            deleted_at: "2016-11-16T22:25:24.878Z",
        };
        server
            .mockEndpoint()
            .delete("/v2/catalog/object/object_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.catalog.object.delete({
            objectId: "object_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            deletedObjectIds: ["7SB3ZQYJ5GDMVFL7JK46JCHT", "KQLFFHA6K6J3YQAQAWDQAL57"],
            deletedAt: "2016-11-16T22:25:24.878Z",
        });
    });
});
