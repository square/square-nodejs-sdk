/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SquareClient } from "../../src/Client";

describe("Refunds", () => {
    test("RefundPayment", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "9b7f2dcf-49da-4411-b23e-a2d6af21333a",
            amount_money: { amount: BigInt(1000), currency: "USD" },
            app_fee_money: { amount: BigInt(10), currency: "USD" },
            payment_id: "R2B3Z8WMVt3EAmzYWLZvz7Y69EbZY",
            reason: "Example",
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            refund: {
                id: "R2B3Z8WMVt3EAmzYWLZvz7Y69EbZY_KlWP8IC1557ddwc9QWTKrCVU6m0JXDz15R2Qym5eQfR",
                status: "PENDING",
                location_id: "L88917AVBK2S5",
                unlinked: true,
                destination_type: "destination_type",
                destination_details: {
                    cash_details: { seller_supplied_money: {} },
                    external_details: { type: "type", source: "source" },
                },
                amount_money: { amount: BigInt(1000), currency: "USD" },
                app_fee_money: { amount: BigInt(10), currency: "USD" },
                processing_fee: [{}],
                payment_id: "R2B3Z8WMVt3EAmzYWLZvz7Y69EbZY",
                order_id: "1JLEUZeEooAIX8HMqm9kvWd69aQZY",
                reason: "Example",
                created_at: "2021-10-13T21:23:19.116Z",
                updated_at: "2021-10-13T21:23:19.508Z",
                team_member_id: "team_member_id",
                terminal_refund_id: "terminal_refund_id",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/refunds")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.refunds.refundPayment({
            idempotency_key: "9b7f2dcf-49da-4411-b23e-a2d6af21333a",
            amount_money: {
                amount: BigInt("1000"),
                currency: "USD",
            },
            app_fee_money: {
                amount: BigInt("10"),
                currency: "USD",
            },
            payment_id: "R2B3Z8WMVt3EAmzYWLZvz7Y69EbZY",
            reason: "Example",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            refund: {
                id: "R2B3Z8WMVt3EAmzYWLZvz7Y69EbZY_KlWP8IC1557ddwc9QWTKrCVU6m0JXDz15R2Qym5eQfR",
                status: "PENDING",
                location_id: "L88917AVBK2S5",
                unlinked: true,
                destination_type: "destination_type",
                destination_details: {
                    cash_details: {
                        seller_supplied_money: {},
                    },
                    external_details: {
                        type: "type",
                        source: "source",
                    },
                },
                amount_money: {
                    amount: BigInt("1000"),
                    currency: "USD",
                },
                app_fee_money: {
                    amount: BigInt("10"),
                    currency: "USD",
                },
                processing_fee: [{}],
                payment_id: "R2B3Z8WMVt3EAmzYWLZvz7Y69EbZY",
                order_id: "1JLEUZeEooAIX8HMqm9kvWd69aQZY",
                reason: "Example",
                created_at: "2021-10-13T21:23:19.116Z",
                updated_at: "2021-10-13T21:23:19.508Z",
                team_member_id: "team_member_id",
                terminal_refund_id: "terminal_refund_id",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            refund: {
                id: "bP9mAsEMYPUGjjGNaNO5ZDVyLhSZY_69MmgHubkLqx9wGhnmenRUHOaKitE6llfZuxcWYjGxd",
                status: "COMPLETED",
                location_id: "L88917AVBK2S5",
                unlinked: true,
                destination_type: "destination_type",
                destination_details: {
                    cash_details: { seller_supplied_money: {} },
                    external_details: { type: "type", source: "source" },
                },
                amount_money: { amount: BigInt(555), currency: "USD" },
                app_fee_money: { amount: BigInt(1000000), currency: "UNKNOWN_CURRENCY" },
                processing_fee: [
                    {
                        effective_at: "2021-10-13T21:34:35.000Z",
                        type: "INITIAL",
                        amount_money: { amount: BigInt(-34), currency: "USD" },
                    },
                ],
                payment_id: "bP9mAsEMYPUGjjGNaNO5ZDVyLhSZY",
                order_id: "9ltv0bx5PuvGXUYHYHxYSKEqC3IZY",
                reason: "Example Refund",
                created_at: "2021-10-13T19:59:05.073Z",
                updated_at: "2021-10-13T20:00:02.442Z",
                team_member_id: "team_member_id",
                terminal_refund_id: "terminal_refund_id",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/refunds/refund_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.refunds.get({
            refund_id: "refund_id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            refund: {
                id: "bP9mAsEMYPUGjjGNaNO5ZDVyLhSZY_69MmgHubkLqx9wGhnmenRUHOaKitE6llfZuxcWYjGxd",
                status: "COMPLETED",
                location_id: "L88917AVBK2S5",
                unlinked: true,
                destination_type: "destination_type",
                destination_details: {
                    cash_details: {
                        seller_supplied_money: {},
                    },
                    external_details: {
                        type: "type",
                        source: "source",
                    },
                },
                amount_money: {
                    amount: BigInt("555"),
                    currency: "USD",
                },
                app_fee_money: {
                    amount: BigInt("1000000"),
                    currency: "UNKNOWN_CURRENCY",
                },
                processing_fee: [
                    {
                        effective_at: "2021-10-13T21:34:35.000Z",
                        type: "INITIAL",
                        amount_money: {
                            amount: BigInt("-34"),
                            currency: "USD",
                        },
                    },
                ],
                payment_id: "bP9mAsEMYPUGjjGNaNO5ZDVyLhSZY",
                order_id: "9ltv0bx5PuvGXUYHYHxYSKEqC3IZY",
                reason: "Example Refund",
                created_at: "2021-10-13T19:59:05.073Z",
                updated_at: "2021-10-13T20:00:02.442Z",
                team_member_id: "team_member_id",
                terminal_refund_id: "terminal_refund_id",
            },
        });
    });
});
