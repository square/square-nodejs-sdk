// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("GiftCards", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            gift_cards: [
                {
                    id: "gftc:00113070ba5745f0b2377c1b9570cb03",
                    type: "DIGITAL",
                    gan_source: "SQUARE",
                    state: "ACTIVE",
                    balance_money: { amount: BigInt(3900), currency: "USD" },
                    gan: "7783320008524605",
                    created_at: "2021-06-09T22:26:54.000Z",
                    customer_ids: ["customer_ids"],
                },
                {
                    id: "gftc:00128a12725b41e58e0de1d20497a9dd",
                    type: "DIGITAL",
                    gan_source: "SQUARE",
                    state: "ACTIVE",
                    balance_money: { amount: BigInt(2000), currency: "USD" },
                    gan: "7783320002692465",
                    created_at: "2021-05-20T22:26:54.000Z",
                    customer_ids: ["customer_ids"],
                },
            ],
            cursor: "JbFmyvUpaNKsfC1hoLSA4WlqkgkZXTWeKuStajR5BkP7OE0ETAbeWSi6U6u7sH",
        };
        server.mockEndpoint().get("/v2/gift-cards").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            giftCards: [
                {
                    id: "gftc:00113070ba5745f0b2377c1b9570cb03",
                    type: "DIGITAL",
                    ganSource: "SQUARE",
                    state: "ACTIVE",
                    balanceMoney: {
                        amount: BigInt("3900"),
                        currency: "USD",
                    },
                    gan: "7783320008524605",
                    createdAt: "2021-06-09T22:26:54.000Z",
                    customerIds: ["customer_ids"],
                },
                {
                    id: "gftc:00128a12725b41e58e0de1d20497a9dd",
                    type: "DIGITAL",
                    ganSource: "SQUARE",
                    state: "ACTIVE",
                    balanceMoney: {
                        amount: BigInt("2000"),
                        currency: "USD",
                    },
                    gan: "7783320002692465",
                    createdAt: "2021-05-20T22:26:54.000Z",
                    customerIds: ["customer_ids"],
                },
            ],
            cursor: "JbFmyvUpaNKsfC1hoLSA4WlqkgkZXTWeKuStajR5BkP7OE0ETAbeWSi6U6u7sH",
        };
        const page = await client.giftCards.list({
            type: "type",
            state: "state",
            limit: 1,
            cursor: "cursor",
            customerId: "customer_id",
        });

        expect(expected.giftCards).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.giftCards).toEqual(nextPage.data);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "NC9Tm69EjbjtConu",
            location_id: "81FN9BNFZTKS4",
            gift_card: { type: "DIGITAL" },
        };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            gift_card: {
                id: "gftc:6cbacbb64cf54e2ca9f573d619038059",
                type: "DIGITAL",
                gan_source: "SQUARE",
                state: "PENDING",
                balance_money: { amount: BigInt(0), currency: "USD" },
                gan: "7783320006753271",
                created_at: "2021-05-20T22:26:54.000Z",
                customer_ids: ["customer_ids"],
            },
        };
        server
            .mockEndpoint()
            .post("/v2/gift-cards")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.giftCards.create({
            idempotencyKey: "NC9Tm69EjbjtConu",
            locationId: "81FN9BNFZTKS4",
            giftCard: {
                type: "DIGITAL",
            },
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            giftCard: {
                id: "gftc:6cbacbb64cf54e2ca9f573d619038059",
                type: "DIGITAL",
                ganSource: "SQUARE",
                state: "PENDING",
                balanceMoney: {
                    amount: BigInt("0"),
                    currency: "USD",
                },
                gan: "7783320006753271",
                createdAt: "2021-05-20T22:26:54.000Z",
                customerIds: ["customer_ids"],
            },
        });
    });

    test("getFromGAN", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { gan: "7783320001001635" };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            gift_card: {
                id: "gftc:6944163553804e439d89adb47caf806a",
                type: "DIGITAL",
                gan_source: "SQUARE",
                state: "ACTIVE",
                balance_money: { amount: BigInt(5000), currency: "USD" },
                gan: "7783320001001635",
                created_at: "2021-05-20T22:26:54.000Z",
                customer_ids: ["customer_ids"],
            },
        };
        server
            .mockEndpoint()
            .post("/v2/gift-cards/from-gan")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.giftCards.getFromGan({
            gan: "7783320001001635",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            giftCard: {
                id: "gftc:6944163553804e439d89adb47caf806a",
                type: "DIGITAL",
                ganSource: "SQUARE",
                state: "ACTIVE",
                balanceMoney: {
                    amount: BigInt("5000"),
                    currency: "USD",
                },
                gan: "7783320001001635",
                createdAt: "2021-05-20T22:26:54.000Z",
                customerIds: ["customer_ids"],
            },
        });
    });

    test("getFromNonce", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { nonce: "cnon:7783322135245171" };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            gift_card: {
                id: "gftc:6944163553804e439d89adb47caf806a",
                type: "DIGITAL",
                gan_source: "SQUARE",
                state: "ACTIVE",
                balance_money: { amount: BigInt(5000), currency: "USD" },
                gan: "7783320001001635",
                created_at: "2021-05-20T22:26:54.000Z",
                customer_ids: ["customer_ids"],
            },
        };
        server
            .mockEndpoint()
            .post("/v2/gift-cards/from-nonce")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.giftCards.getFromNonce({
            nonce: "cnon:7783322135245171",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            giftCard: {
                id: "gftc:6944163553804e439d89adb47caf806a",
                type: "DIGITAL",
                ganSource: "SQUARE",
                state: "ACTIVE",
                balanceMoney: {
                    amount: BigInt("5000"),
                    currency: "USD",
                },
                gan: "7783320001001635",
                createdAt: "2021-05-20T22:26:54.000Z",
                customerIds: ["customer_ids"],
            },
        });
    });

    test("LinkCustomer", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { customer_id: "GKY0FZ3V717AH8Q2D821PNT2ZW" };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            gift_card: {
                id: "gftc:71ea002277a34f8a945e284b04822edb",
                type: "DIGITAL",
                gan_source: "SQUARE",
                state: "ACTIVE",
                balance_money: { amount: BigInt(2500), currency: "USD" },
                gan: "7783320005440920",
                created_at: "2021-03-25T05:13:01Z",
                customer_ids: ["GKY0FZ3V717AH8Q2D821PNT2ZW"],
            },
        };
        server
            .mockEndpoint()
            .post("/v2/gift-cards/gift_card_id/link-customer")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.giftCards.linkCustomer({
            giftCardId: "gift_card_id",
            customerId: "GKY0FZ3V717AH8Q2D821PNT2ZW",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            giftCard: {
                id: "gftc:71ea002277a34f8a945e284b04822edb",
                type: "DIGITAL",
                ganSource: "SQUARE",
                state: "ACTIVE",
                balanceMoney: {
                    amount: BigInt("2500"),
                    currency: "USD",
                },
                gan: "7783320005440920",
                createdAt: "2021-03-25T05:13:01Z",
                customerIds: ["GKY0FZ3V717AH8Q2D821PNT2ZW"],
            },
        });
    });

    test("UnlinkCustomer", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { customer_id: "GKY0FZ3V717AH8Q2D821PNT2ZW" };
        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            gift_card: {
                id: "gftc:71ea002277a34f8a945e284b04822edb",
                type: "DIGITAL",
                gan_source: "SQUARE",
                state: "ACTIVE",
                balance_money: { amount: BigInt(2500), currency: "USD" },
                gan: "7783320005440920",
                created_at: "2021-03-25T05:13:01Z",
                customer_ids: ["customer_ids"],
            },
        };
        server
            .mockEndpoint()
            .post("/v2/gift-cards/gift_card_id/unlink-customer")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.giftCards.unlinkCustomer({
            giftCardId: "gift_card_id",
            customerId: "GKY0FZ3V717AH8Q2D821PNT2ZW",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            giftCard: {
                id: "gftc:71ea002277a34f8a945e284b04822edb",
                type: "DIGITAL",
                ganSource: "SQUARE",
                state: "ACTIVE",
                balanceMoney: {
                    amount: BigInt("2500"),
                    currency: "USD",
                },
                gan: "7783320005440920",
                createdAt: "2021-03-25T05:13:01Z",
                customerIds: ["customer_ids"],
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            gift_card: {
                id: "gftc:00113070ba5745f0b2377c1b9570cb03",
                type: "DIGITAL",
                gan_source: "SQUARE",
                state: "ACTIVE",
                balance_money: { amount: BigInt(1000), currency: "USD" },
                gan: "7783320001001635",
                created_at: "2021-05-20T22:26:54.000Z",
                customer_ids: ["customer_ids"],
            },
        };
        server.mockEndpoint().get("/v2/gift-cards/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.giftCards.get({
            id: "id",
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            giftCard: {
                id: "gftc:00113070ba5745f0b2377c1b9570cb03",
                type: "DIGITAL",
                ganSource: "SQUARE",
                state: "ACTIVE",
                balanceMoney: {
                    amount: BigInt("1000"),
                    currency: "USD",
                },
                gan: "7783320001001635",
                createdAt: "2021-05-20T22:26:54.000Z",
                customerIds: ["customer_ids"],
            },
        });
    });
});
