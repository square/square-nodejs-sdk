// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("TransferOrders", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "65cc0586-3e82-384s-b524-3885cffd52",
            transfer_order: {
                source_location_id: "EXAMPLE_SOURCE_LOCATION_ID_123",
                destination_location_id: "EXAMPLE_DEST_LOCATION_ID_456",
                expected_at: "2025-11-09T05:00:00Z",
                notes: "Example transfer order for inventory redistribution between locations",
                tracking_number: "TRACK123456789",
                created_by_team_member_id: "EXAMPLE_TEAM_MEMBER_ID_789",
                line_items: [
                    { item_variation_id: "EXAMPLE_ITEM_VARIATION_ID_001", quantity_ordered: "5" },
                    { item_variation_id: "EXAMPLE_ITEM_VARIATION_ID_002", quantity_ordered: "3" },
                ],
            },
        };
        const rawResponseBody = {
            transfer_order: {
                id: "EXAMPLE_TRANSFER_ORDER_ID_123",
                source_location_id: "EXAMPLE_SOURCE_LOCATION_ID_123",
                destination_location_id: "EXAMPLE_DEST_LOCATION_ID_456",
                status: "DRAFT",
                created_at: "2025-01-15T10:30:00Z",
                updated_at: "2025-01-15T10:30:00Z",
                expected_at: "2025-11-09T05:00:00Z",
                completed_at: "completed_at",
                notes: "Example transfer order for inventory redistribution between locations",
                tracking_number: "TRACK123456789",
                created_by_team_member_id: "EXAMPLE_TEAM_MEMBER_ID_789",
                line_items: [
                    {
                        uid: "1",
                        item_variation_id: "EXAMPLE_ITEM_VARIATION_ID_001",
                        quantity_ordered: "5",
                        quantity_pending: "5",
                        quantity_received: "0",
                        quantity_damaged: "0",
                        quantity_canceled: "0",
                    },
                    {
                        uid: "2",
                        item_variation_id: "EXAMPLE_ITEM_VARIATION_ID_002",
                        quantity_ordered: "3",
                        quantity_pending: "3",
                        quantity_received: "0",
                        quantity_damaged: "0",
                        quantity_canceled: "0",
                    },
                ],
                version: BigInt(1753109537351),
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/transfer-orders")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.transferOrders.create({
            idempotencyKey: "65cc0586-3e82-384s-b524-3885cffd52",
            transferOrder: {
                sourceLocationId: "EXAMPLE_SOURCE_LOCATION_ID_123",
                destinationLocationId: "EXAMPLE_DEST_LOCATION_ID_456",
                expectedAt: "2025-11-09T05:00:00Z",
                notes: "Example transfer order for inventory redistribution between locations",
                trackingNumber: "TRACK123456789",
                createdByTeamMemberId: "EXAMPLE_TEAM_MEMBER_ID_789",
                lineItems: [
                    {
                        itemVariationId: "EXAMPLE_ITEM_VARIATION_ID_001",
                        quantityOrdered: "5",
                    },
                    {
                        itemVariationId: "EXAMPLE_ITEM_VARIATION_ID_002",
                        quantityOrdered: "3",
                    },
                ],
            },
        });
        expect(response).toEqual({
            transferOrder: {
                id: "EXAMPLE_TRANSFER_ORDER_ID_123",
                sourceLocationId: "EXAMPLE_SOURCE_LOCATION_ID_123",
                destinationLocationId: "EXAMPLE_DEST_LOCATION_ID_456",
                status: "DRAFT",
                createdAt: "2025-01-15T10:30:00Z",
                updatedAt: "2025-01-15T10:30:00Z",
                expectedAt: "2025-11-09T05:00:00Z",
                completedAt: "completed_at",
                notes: "Example transfer order for inventory redistribution between locations",
                trackingNumber: "TRACK123456789",
                createdByTeamMemberId: "EXAMPLE_TEAM_MEMBER_ID_789",
                lineItems: [
                    {
                        uid: "1",
                        itemVariationId: "EXAMPLE_ITEM_VARIATION_ID_001",
                        quantityOrdered: "5",
                        quantityPending: "5",
                        quantityReceived: "0",
                        quantityDamaged: "0",
                        quantityCanceled: "0",
                    },
                    {
                        uid: "2",
                        itemVariationId: "EXAMPLE_ITEM_VARIATION_ID_002",
                        quantityOrdered: "3",
                        quantityPending: "3",
                        quantityReceived: "0",
                        quantityDamaged: "0",
                        quantityCanceled: "0",
                    },
                ],
                version: BigInt("1753109537351"),
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("search", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            query: {
                filter: {
                    source_location_ids: ["EXAMPLE_SOURCE_LOCATION_ID_123"],
                    destination_location_ids: ["EXAMPLE_DEST_LOCATION_ID_456"],
                    statuses: ["STARTED", "PARTIALLY_RECEIVED"],
                },
                sort: { field: "UPDATED_AT", order: "DESC" },
            },
            cursor: "eyJsYXN0X3VwZGF0ZWRfYXQiOjE3NTMxMTg2NjQ4NzN9",
            limit: 10,
        };
        const rawResponseBody = {
            transfer_orders: [
                {
                    id: "EXAMPLE_TRANSFER_ORDER_ID_123",
                    source_location_id: "EXAMPLE_SOURCE_LOCATION_ID_123",
                    destination_location_id: "EXAMPLE_DEST_LOCATION_ID_456",
                    status: "STARTED",
                    created_at: "2025-01-15T10:30:00Z",
                    updated_at: "2025-01-15T10:32:00Z",
                    expected_at: "2025-11-09T05:00:00Z",
                    completed_at: "completed_at",
                    notes: "Inventory rebalance between stores",
                    tracking_number: "TRACK123456789",
                    created_by_team_member_id: "EXAMPLE_TEAM_MEMBER_ID_789",
                    line_items: [
                        {
                            uid: "1",
                            item_variation_id: "EXAMPLE_ITEM_VARIATION_ID_001",
                            quantity_ordered: "5",
                            quantity_pending: "5",
                            quantity_received: "0",
                            quantity_damaged: "0",
                            quantity_canceled: "0",
                        },
                    ],
                    version: BigInt(1753118664873),
                },
                {
                    id: "EXAMPLE_TRANSFER_ORDER_ID_456",
                    source_location_id: "EXAMPLE_SOURCE_LOCATION_ID_123",
                    destination_location_id: "EXAMPLE_DEST_LOCATION_ID_456",
                    status: "PARTIALLY_RECEIVED",
                    created_at: "2025-01-14T14:20:00Z",
                    updated_at: "2025-01-15T09:45:00Z",
                    expected_at: "2025-11-08T12:00:00Z",
                    completed_at: "completed_at",
                    notes: "Seasonal stock transfer",
                    tracking_number: "tracking_number",
                    created_by_team_member_id: "created_by_team_member_id",
                    line_items: [
                        {
                            uid: "1",
                            item_variation_id: "EXAMPLE_ITEM_VARIATION_ID_002",
                            quantity_ordered: "10",
                            quantity_pending: "3",
                            quantity_received: "7",
                            quantity_damaged: "0",
                            quantity_canceled: "0",
                        },
                    ],
                    version: BigInt(1753115540123),
                },
            ],
            cursor: "eyJsYXN0X3VwZGF0ZWRfYXQiOjE3NTMxMTU1NDBfMTIzfQ==",
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/transfer-orders/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            transferOrders: [
                {
                    id: "EXAMPLE_TRANSFER_ORDER_ID_123",
                    sourceLocationId: "EXAMPLE_SOURCE_LOCATION_ID_123",
                    destinationLocationId: "EXAMPLE_DEST_LOCATION_ID_456",
                    status: "STARTED",
                    createdAt: "2025-01-15T10:30:00Z",
                    updatedAt: "2025-01-15T10:32:00Z",
                    expectedAt: "2025-11-09T05:00:00Z",
                    completedAt: "completed_at",
                    notes: "Inventory rebalance between stores",
                    trackingNumber: "TRACK123456789",
                    createdByTeamMemberId: "EXAMPLE_TEAM_MEMBER_ID_789",
                    lineItems: [
                        {
                            uid: "1",
                            itemVariationId: "EXAMPLE_ITEM_VARIATION_ID_001",
                            quantityOrdered: "5",
                            quantityPending: "5",
                            quantityReceived: "0",
                            quantityDamaged: "0",
                            quantityCanceled: "0",
                        },
                    ],
                    version: BigInt("1753118664873"),
                },
                {
                    id: "EXAMPLE_TRANSFER_ORDER_ID_456",
                    sourceLocationId: "EXAMPLE_SOURCE_LOCATION_ID_123",
                    destinationLocationId: "EXAMPLE_DEST_LOCATION_ID_456",
                    status: "PARTIALLY_RECEIVED",
                    createdAt: "2025-01-14T14:20:00Z",
                    updatedAt: "2025-01-15T09:45:00Z",
                    expectedAt: "2025-11-08T12:00:00Z",
                    completedAt: "completed_at",
                    notes: "Seasonal stock transfer",
                    trackingNumber: "tracking_number",
                    createdByTeamMemberId: "created_by_team_member_id",
                    lineItems: [
                        {
                            uid: "1",
                            itemVariationId: "EXAMPLE_ITEM_VARIATION_ID_002",
                            quantityOrdered: "10",
                            quantityPending: "3",
                            quantityReceived: "7",
                            quantityDamaged: "0",
                            quantityCanceled: "0",
                        },
                    ],
                    version: BigInt("1753115540123"),
                },
            ],
            cursor: "eyJsYXN0X3VwZGF0ZWRfYXQiOjE3NTMxMTU1NDBfMTIzfQ==",
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        };
        const page = await client.transferOrders.search({
            query: {
                filter: {
                    sourceLocationIds: ["EXAMPLE_SOURCE_LOCATION_ID_123"],
                    destinationLocationIds: ["EXAMPLE_DEST_LOCATION_ID_456"],
                    statuses: ["STARTED", "PARTIALLY_RECEIVED"],
                },
                sort: {
                    field: "UPDATED_AT",
                    order: "DESC",
                },
            },
            cursor: "eyJsYXN0X3VwZGF0ZWRfYXQiOjE3NTMxMTg2NjQ4NzN9",
            limit: 10,
        });

        expect(expected.transferOrders).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.transferOrders).toEqual(nextPage.data);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            transfer_order: {
                id: "EXAMPLE_TRANSFER_ORDER_ID_123",
                source_location_id: "EXAMPLE_SOURCE_LOCATION_ID_123",
                destination_location_id: "EXAMPLE_DEST_LOCATION_ID_456",
                status: "STARTED",
                created_at: "2025-01-15T10:30:00Z",
                updated_at: "2025-01-15T10:35:00Z",
                expected_at: "2025-11-09T05:00:00Z",
                completed_at: "completed_at",
                notes: "Example transfer order for inventory redistribution between locations",
                tracking_number: "TRACK123456789",
                created_by_team_member_id: "EXAMPLE_TEAM_MEMBER_ID_789",
                line_items: [
                    {
                        uid: "1",
                        item_variation_id: "EXAMPLE_ITEM_VARIATION_ID_001",
                        quantity_ordered: "5",
                        quantity_pending: "5",
                        quantity_received: "0",
                        quantity_damaged: "0",
                        quantity_canceled: "0",
                    },
                    {
                        uid: "2",
                        item_variation_id: "EXAMPLE_ITEM_VARIATION_ID_002",
                        quantity_ordered: "3",
                        quantity_pending: "3",
                        quantity_received: "0",
                        quantity_damaged: "0",
                        quantity_canceled: "0",
                    },
                ],
                version: BigInt(1753117449752),
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/transfer-orders/transfer_order_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.transferOrders.get({
            transferOrderId: "transfer_order_id",
        });
        expect(response).toEqual({
            transferOrder: {
                id: "EXAMPLE_TRANSFER_ORDER_ID_123",
                sourceLocationId: "EXAMPLE_SOURCE_LOCATION_ID_123",
                destinationLocationId: "EXAMPLE_DEST_LOCATION_ID_456",
                status: "STARTED",
                createdAt: "2025-01-15T10:30:00Z",
                updatedAt: "2025-01-15T10:35:00Z",
                expectedAt: "2025-11-09T05:00:00Z",
                completedAt: "completed_at",
                notes: "Example transfer order for inventory redistribution between locations",
                trackingNumber: "TRACK123456789",
                createdByTeamMemberId: "EXAMPLE_TEAM_MEMBER_ID_789",
                lineItems: [
                    {
                        uid: "1",
                        itemVariationId: "EXAMPLE_ITEM_VARIATION_ID_001",
                        quantityOrdered: "5",
                        quantityPending: "5",
                        quantityReceived: "0",
                        quantityDamaged: "0",
                        quantityCanceled: "0",
                    },
                    {
                        uid: "2",
                        itemVariationId: "EXAMPLE_ITEM_VARIATION_ID_002",
                        quantityOrdered: "3",
                        quantityPending: "3",
                        quantityReceived: "0",
                        quantityDamaged: "0",
                        quantityCanceled: "0",
                    },
                ],
                version: BigInt("1753117449752"),
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            transfer_order: {
                source_location_id: "EXAMPLE_SOURCE_LOCATION_ID_789",
                destination_location_id: "EXAMPLE_DEST_LOCATION_ID_101",
                expected_at: "2025-11-10T08:00:00Z",
                notes: "Updated: Priority transfer due to low stock at destination",
                tracking_number: "TRACK987654321",
                line_items: [
                    { uid: "1", quantity_ordered: "7" },
                    { item_variation_id: "EXAMPLE_NEW_ITEM_VARIATION_ID_003", quantity_ordered: "2" },
                    { uid: "2", remove: true },
                ],
            },
            version: BigInt(1753109537351),
        };
        const rawResponseBody = {
            transfer_order: {
                id: "EXAMPLE_TRANSFER_ORDER_ID_123",
                source_location_id: "EXAMPLE_SOURCE_LOCATION_ID_789",
                destination_location_id: "EXAMPLE_DEST_LOCATION_ID_101",
                status: "DRAFT",
                created_at: "2025-01-15T10:30:00Z",
                updated_at: "2025-01-15T11:15:00Z",
                expected_at: "2025-11-10T08:00:00Z",
                completed_at: "completed_at",
                notes: "Updated: Priority transfer due to low stock at destination",
                tracking_number: "TRACK987654321",
                created_by_team_member_id: "EXAMPLE_TEAM_MEMBER_ID_789",
                line_items: [
                    {
                        uid: "1",
                        item_variation_id: "EXAMPLE_ITEM_VARIATION_ID_001",
                        quantity_ordered: "7",
                        quantity_pending: "7",
                        quantity_received: "0",
                        quantity_damaged: "0",
                        quantity_canceled: "0",
                    },
                    {
                        uid: "3",
                        item_variation_id: "EXAMPLE_NEW_ITEM_VARIATION_ID_003",
                        quantity_ordered: "2",
                        quantity_pending: "2",
                        quantity_received: "0",
                        quantity_damaged: "0",
                        quantity_canceled: "0",
                    },
                ],
                version: BigInt(1753122900456),
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .put("/v2/transfer-orders/transfer_order_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.transferOrders.update({
            transferOrderId: "transfer_order_id",
            idempotencyKey: "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            transferOrder: {
                sourceLocationId: "EXAMPLE_SOURCE_LOCATION_ID_789",
                destinationLocationId: "EXAMPLE_DEST_LOCATION_ID_101",
                expectedAt: "2025-11-10T08:00:00Z",
                notes: "Updated: Priority transfer due to low stock at destination",
                trackingNumber: "TRACK987654321",
                lineItems: [
                    {
                        uid: "1",
                        quantityOrdered: "7",
                    },
                    {
                        itemVariationId: "EXAMPLE_NEW_ITEM_VARIATION_ID_003",
                        quantityOrdered: "2",
                    },
                    {
                        uid: "2",
                        remove: true,
                    },
                ],
            },
            version: BigInt("1753109537351"),
        });
        expect(response).toEqual({
            transferOrder: {
                id: "EXAMPLE_TRANSFER_ORDER_ID_123",
                sourceLocationId: "EXAMPLE_SOURCE_LOCATION_ID_789",
                destinationLocationId: "EXAMPLE_DEST_LOCATION_ID_101",
                status: "DRAFT",
                createdAt: "2025-01-15T10:30:00Z",
                updatedAt: "2025-01-15T11:15:00Z",
                expectedAt: "2025-11-10T08:00:00Z",
                completedAt: "completed_at",
                notes: "Updated: Priority transfer due to low stock at destination",
                trackingNumber: "TRACK987654321",
                createdByTeamMemberId: "EXAMPLE_TEAM_MEMBER_ID_789",
                lineItems: [
                    {
                        uid: "1",
                        itemVariationId: "EXAMPLE_ITEM_VARIATION_ID_001",
                        quantityOrdered: "7",
                        quantityPending: "7",
                        quantityReceived: "0",
                        quantityDamaged: "0",
                        quantityCanceled: "0",
                    },
                    {
                        uid: "3",
                        itemVariationId: "EXAMPLE_NEW_ITEM_VARIATION_ID_003",
                        quantityOrdered: "2",
                        quantityPending: "2",
                        quantityReceived: "0",
                        quantityDamaged: "0",
                        quantityCanceled: "0",
                    },
                ],
                version: BigInt("1753122900456"),
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .delete("/v2/transfer-orders/transfer_order_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.transferOrders.delete({
            transferOrderId: "transfer_order_id",
            version: BigInt("1000000"),
        });
        expect(response).toEqual({
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("cancel", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "65cc0586-3e82-4d08-b524-3885cffd52",
            version: BigInt(1753117449752),
        };
        const rawResponseBody = {
            transfer_order: {
                id: "EXAMPLE_TRANSFER_ORDER_ID_123",
                source_location_id: "EXAMPLE_SOURCE_LOCATION_ID_123",
                destination_location_id: "EXAMPLE_DEST_LOCATION_ID_456",
                status: "CANCELED",
                created_at: "2025-01-15T10:30:00Z",
                updated_at: "2025-01-15T10:45:00Z",
                expected_at: "2025-11-09T05:00:00Z",
                completed_at: "2025-01-15T10:45:00Z",
                notes: "Example transfer order for inventory redistribution between locations",
                tracking_number: "TRACK123456789",
                created_by_team_member_id: "EXAMPLE_TEAM_MEMBER_ID_789",
                line_items: [
                    {
                        uid: "1",
                        item_variation_id: "EXAMPLE_ITEM_VARIATION_ID_001",
                        quantity_ordered: "5",
                        quantity_pending: "0",
                        quantity_received: "0",
                        quantity_damaged: "0",
                        quantity_canceled: "5",
                    },
                    {
                        uid: "2",
                        item_variation_id: "EXAMPLE_ITEM_VARIATION_ID_002",
                        quantity_ordered: "3",
                        quantity_pending: "0",
                        quantity_received: "0",
                        quantity_damaged: "0",
                        quantity_canceled: "3",
                    },
                ],
                version: BigInt(1753117461842),
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/transfer-orders/transfer_order_id/cancel")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.transferOrders.cancel({
            transferOrderId: "transfer_order_id",
            idempotencyKey: "65cc0586-3e82-4d08-b524-3885cffd52",
            version: BigInt("1753117449752"),
        });
        expect(response).toEqual({
            transferOrder: {
                id: "EXAMPLE_TRANSFER_ORDER_ID_123",
                sourceLocationId: "EXAMPLE_SOURCE_LOCATION_ID_123",
                destinationLocationId: "EXAMPLE_DEST_LOCATION_ID_456",
                status: "CANCELED",
                createdAt: "2025-01-15T10:30:00Z",
                updatedAt: "2025-01-15T10:45:00Z",
                expectedAt: "2025-11-09T05:00:00Z",
                completedAt: "2025-01-15T10:45:00Z",
                notes: "Example transfer order for inventory redistribution between locations",
                trackingNumber: "TRACK123456789",
                createdByTeamMemberId: "EXAMPLE_TEAM_MEMBER_ID_789",
                lineItems: [
                    {
                        uid: "1",
                        itemVariationId: "EXAMPLE_ITEM_VARIATION_ID_001",
                        quantityOrdered: "5",
                        quantityPending: "0",
                        quantityReceived: "0",
                        quantityDamaged: "0",
                        quantityCanceled: "5",
                    },
                    {
                        uid: "2",
                        itemVariationId: "EXAMPLE_ITEM_VARIATION_ID_002",
                        quantityOrdered: "3",
                        quantityPending: "0",
                        quantityReceived: "0",
                        quantityDamaged: "0",
                        quantityCanceled: "3",
                    },
                ],
                version: BigInt("1753117461842"),
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("receive", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            idempotency_key: "EXAMPLE_IDEMPOTENCY_KEY_101",
            receipt: {
                line_items: [
                    {
                        transfer_order_line_uid: "transfer_order_line_uid",
                        quantity_received: "3",
                        quantity_damaged: "1",
                        quantity_canceled: "1",
                    },
                    {
                        transfer_order_line_uid: "transfer_order_line_uid",
                        quantity_received: "2",
                        quantity_canceled: "1",
                    },
                ],
            },
            version: BigInt(1753118664873),
        };
        const rawResponseBody = {
            transfer_order: {
                id: "EXAMPLE_TRANSFER_ORDER_ID_123",
                source_location_id: "EXAMPLE_SOURCE_LOCATION_ID_123",
                destination_location_id: "EXAMPLE_DEST_LOCATION_ID_456",
                status: "COMPLETED",
                created_at: "2025-01-15T10:30:00Z",
                updated_at: "2025-01-15T10:55:00Z",
                expected_at: "2025-11-09T05:00:00Z",
                completed_at: "2025-01-15T10:55:00Z",
                notes: "Example transfer order for inventory redistribution between locations",
                tracking_number: "TRACK123456789",
                created_by_team_member_id: "EXAMPLE_TEAM_MEMBER_ID_789",
                line_items: [
                    {
                        uid: "1",
                        item_variation_id: "EXAMPLE_ITEM_VARIATION_ID_001",
                        quantity_ordered: "5",
                        quantity_pending: "0",
                        quantity_received: "3",
                        quantity_damaged: "1",
                        quantity_canceled: "1",
                    },
                    {
                        uid: "2",
                        item_variation_id: "EXAMPLE_ITEM_VARIATION_ID_002",
                        quantity_ordered: "3",
                        quantity_pending: "0",
                        quantity_received: "2",
                        quantity_damaged: "0",
                        quantity_canceled: "1",
                    },
                ],
                version: BigInt(1753118667248),
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/transfer-orders/transfer_order_id/receive")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.transferOrders.receive({
            transferOrderId: "transfer_order_id",
            idempotencyKey: "EXAMPLE_IDEMPOTENCY_KEY_101",
            receipt: {
                lineItems: [
                    {
                        transferOrderLineUid: "transfer_order_line_uid",
                        quantityReceived: "3",
                        quantityDamaged: "1",
                        quantityCanceled: "1",
                    },
                    {
                        transferOrderLineUid: "transfer_order_line_uid",
                        quantityReceived: "2",
                        quantityCanceled: "1",
                    },
                ],
            },
            version: BigInt("1753118664873"),
        });
        expect(response).toEqual({
            transferOrder: {
                id: "EXAMPLE_TRANSFER_ORDER_ID_123",
                sourceLocationId: "EXAMPLE_SOURCE_LOCATION_ID_123",
                destinationLocationId: "EXAMPLE_DEST_LOCATION_ID_456",
                status: "COMPLETED",
                createdAt: "2025-01-15T10:30:00Z",
                updatedAt: "2025-01-15T10:55:00Z",
                expectedAt: "2025-11-09T05:00:00Z",
                completedAt: "2025-01-15T10:55:00Z",
                notes: "Example transfer order for inventory redistribution between locations",
                trackingNumber: "TRACK123456789",
                createdByTeamMemberId: "EXAMPLE_TEAM_MEMBER_ID_789",
                lineItems: [
                    {
                        uid: "1",
                        itemVariationId: "EXAMPLE_ITEM_VARIATION_ID_001",
                        quantityOrdered: "5",
                        quantityPending: "0",
                        quantityReceived: "3",
                        quantityDamaged: "1",
                        quantityCanceled: "1",
                    },
                    {
                        uid: "2",
                        itemVariationId: "EXAMPLE_ITEM_VARIATION_ID_002",
                        quantityOrdered: "3",
                        quantityPending: "0",
                        quantityReceived: "2",
                        quantityDamaged: "0",
                        quantityCanceled: "1",
                    },
                ],
                version: BigInt("1753118667248"),
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("start", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { idempotency_key: "EXAMPLE_IDEMPOTENCY_KEY_789", version: BigInt(1753109537351) };
        const rawResponseBody = {
            transfer_order: {
                id: "EXAMPLE_TRANSFER_ORDER_ID_123",
                source_location_id: "EXAMPLE_SOURCE_LOCATION_ID_123",
                destination_location_id: "EXAMPLE_DEST_LOCATION_ID_456",
                status: "STARTED",
                created_at: "2025-01-15T10:30:00Z",
                updated_at: "2025-01-15T10:32:00Z",
                expected_at: "2025-11-09T05:00:00Z",
                completed_at: "completed_at",
                notes: "Example transfer order for inventory redistribution between locations",
                tracking_number: "TRACK123456789",
                created_by_team_member_id: "EXAMPLE_TEAM_MEMBER_ID_789",
                line_items: [
                    {
                        uid: "1",
                        item_variation_id: "EXAMPLE_ITEM_VARIATION_ID_001",
                        quantity_ordered: "5",
                        quantity_pending: "5",
                        quantity_received: "0",
                        quantity_damaged: "0",
                        quantity_canceled: "0",
                    },
                    {
                        uid: "2",
                        item_variation_id: "EXAMPLE_ITEM_VARIATION_ID_002",
                        quantity_ordered: "3",
                        quantity_pending: "3",
                        quantity_received: "0",
                        quantity_damaged: "0",
                        quantity_canceled: "0",
                    },
                ],
                version: BigInt(1753118664873),
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/transfer-orders/transfer_order_id/start")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.transferOrders.start({
            transferOrderId: "transfer_order_id",
            idempotencyKey: "EXAMPLE_IDEMPOTENCY_KEY_789",
            version: BigInt("1753109537351"),
        });
        expect(response).toEqual({
            transferOrder: {
                id: "EXAMPLE_TRANSFER_ORDER_ID_123",
                sourceLocationId: "EXAMPLE_SOURCE_LOCATION_ID_123",
                destinationLocationId: "EXAMPLE_DEST_LOCATION_ID_456",
                status: "STARTED",
                createdAt: "2025-01-15T10:30:00Z",
                updatedAt: "2025-01-15T10:32:00Z",
                expectedAt: "2025-11-09T05:00:00Z",
                completedAt: "completed_at",
                notes: "Example transfer order for inventory redistribution between locations",
                trackingNumber: "TRACK123456789",
                createdByTeamMemberId: "EXAMPLE_TEAM_MEMBER_ID_789",
                lineItems: [
                    {
                        uid: "1",
                        itemVariationId: "EXAMPLE_ITEM_VARIATION_ID_001",
                        quantityOrdered: "5",
                        quantityPending: "5",
                        quantityReceived: "0",
                        quantityDamaged: "0",
                        quantityCanceled: "0",
                    },
                    {
                        uid: "2",
                        itemVariationId: "EXAMPLE_ITEM_VARIATION_ID_002",
                        quantityOrdered: "3",
                        quantityPending: "3",
                        quantityReceived: "0",
                        quantityDamaged: "0",
                        quantityCanceled: "0",
                    },
                ],
                version: BigInt("1753118664873"),
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
