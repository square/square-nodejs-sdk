// This file was auto-generated by Fern from our API Definition.

import { SquareClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("OAuth", () => {
    test("revokeToken", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { client_id: "CLIENT_ID", access_token: "ACCESS_TOKEN" };
        const rawResponseBody = {
            success: true,
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/oauth2/revoke")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oAuth.revokeToken({
            clientId: "CLIENT_ID",
            accessToken: "ACCESS_TOKEN",
        });
        expect(response).toEqual({
            success: true,
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("obtainToken", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            client_id: "sq0idp-uaPHILoPzWZk3tlJqlML0g",
            client_secret: "sq0csp-30a-4C_tVOnTh14Piza2BfTPBXyLafLPWSzY1qAjeBfM",
            code: "sq0cgb-l0SBqxs4uwxErTVyYOdemg",
            grant_type: "authorization_code",
        };
        const rawResponseBody = {
            access_token: "EAAl3ikZIe18J-2-cHlV2bL4-EaZHGoJUhtEBT7QA6-7AgwIHw8Xe1IoUvGsNxA",
            token_type: "bearer",
            expires_at: "2025-04-03T18:31:06Z",
            merchant_id: "MLQW2MYBY81PZ",
            subscription_id: "subscription_id",
            plan_id: "plan_id",
            id_token: "id_token",
            refresh_token: "EQAAl0OcByu3IYJYScGGg-8E5YNf0r0b6jCTCMy5nOcRZ4ok0wbWAL8vY3tZWNcc",
            short_lived: false,
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
            refresh_token_expires_at: "refresh_token_expires_at",
        };
        server
            .mockEndpoint()
            .post("/oauth2/token")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oAuth.obtainToken({
            clientId: "sq0idp-uaPHILoPzWZk3tlJqlML0g",
            clientSecret: "sq0csp-30a-4C_tVOnTh14Piza2BfTPBXyLafLPWSzY1qAjeBfM",
            code: "sq0cgb-l0SBqxs4uwxErTVyYOdemg",
            grantType: "authorization_code",
        });
        expect(response).toEqual({
            accessToken: "EAAl3ikZIe18J-2-cHlV2bL4-EaZHGoJUhtEBT7QA6-7AgwIHw8Xe1IoUvGsNxA",
            tokenType: "bearer",
            expiresAt: "2025-04-03T18:31:06Z",
            merchantId: "MLQW2MYBY81PZ",
            subscriptionId: "subscription_id",
            planId: "plan_id",
            idToken: "id_token",
            refreshToken: "EQAAl0OcByu3IYJYScGGg-8E5YNf0r0b6jCTCMy5nOcRZ4ok0wbWAL8vY3tZWNcc",
            shortLived: false,
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
            refreshTokenExpiresAt: "refresh_token_expires_at",
        });
    });

    test("RetrieveTokenStatus", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            scopes: ["PAYMENTS_READ", "PAYMENTS_WRITE"],
            expires_at: "2022-10-14T14:44:00Z",
            client_id: "CLIENT_ID",
            merchant_id: "MERCHANT_ID",
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/oauth2/token/status")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oAuth.retrieveTokenStatus();
        expect(response).toEqual({
            scopes: ["PAYMENTS_READ", "PAYMENTS_WRITE"],
            expiresAt: "2022-10-14T14:44:00Z",
            clientId: "CLIENT_ID",
            merchantId: "MERCHANT_ID",
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("authorize", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().get("/oauth2/authorize").respondWith().statusCode(200).build();

        const response = await client.oAuth.authorize();
        expect(response).toEqual(undefined);
    });
});
