/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SquareClient } from "../../src/Client";

describe("Team", () => {
    test("ListJobs", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            jobs: [
                {
                    id: "VDNpRv8da51NU8qZFC5zDWpF",
                    title: "Cashier",
                    is_tip_eligible: true,
                    created_at: "2021-06-11T22:55:45Z",
                    updated_at: "2021-06-11T22:55:45Z",
                    version: 2,
                },
                {
                    id: "FjS8x95cqHiMenw4f1NAUH4P",
                    title: "Chef",
                    is_tip_eligible: false,
                    created_at: "2021-06-11T22:55:45Z",
                    updated_at: "2021-06-11T22:55:45Z",
                    version: 1,
                },
            ],
            cursor: "cursor",
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/team-members/jobs")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.team.listJobs();
        expect(response).toEqual({
            jobs: [
                {
                    id: "VDNpRv8da51NU8qZFC5zDWpF",
                    title: "Cashier",
                    isTipEligible: true,
                    createdAt: "2021-06-11T22:55:45Z",
                    updatedAt: "2021-06-11T22:55:45Z",
                    version: 2,
                },
                {
                    id: "FjS8x95cqHiMenw4f1NAUH4P",
                    title: "Chef",
                    isTipEligible: false,
                    createdAt: "2021-06-11T22:55:45Z",
                    updatedAt: "2021-06-11T22:55:45Z",
                    version: 1,
                },
            ],
            cursor: "cursor",
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("CreateJob", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            job: { title: "Cashier", is_tip_eligible: true },
            idempotency_key: "idempotency-key-0",
        };
        const rawResponseBody = {
            job: {
                id: "1yJlHapkseYnNPETIU1B",
                title: "Cashier",
                is_tip_eligible: true,
                created_at: "2021-06-11T22:55:45Z",
                updated_at: "2021-06-11T22:55:45Z",
                version: 1,
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .post("/v2/team-members/jobs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.team.createJob({
            job: {
                title: "Cashier",
                isTipEligible: true,
            },
            idempotencyKey: "idempotency-key-0",
        });
        expect(response).toEqual({
            job: {
                id: "1yJlHapkseYnNPETIU1B",
                title: "Cashier",
                isTipEligible: true,
                createdAt: "2021-06-11T22:55:45Z",
                updatedAt: "2021-06-11T22:55:45Z",
                version: 1,
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("RetrieveJob", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            job: {
                id: "1yJlHapkseYnNPETIU1B",
                title: "Cashier 1",
                is_tip_eligible: true,
                created_at: "2021-06-11T22:55:45Z",
                updated_at: "2021-06-11T22:55:45Z",
                version: 2,
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .get("/v2/team-members/jobs/job_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.team.retrieveJob({
            jobId: "job_id",
        });
        expect(response).toEqual({
            job: {
                id: "1yJlHapkseYnNPETIU1B",
                title: "Cashier 1",
                isTipEligible: true,
                createdAt: "2021-06-11T22:55:45Z",
                updatedAt: "2021-06-11T22:55:45Z",
                version: 2,
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });

    test("UpdateJob", async () => {
        const server = mockServerPool.createServer();
        const client = new SquareClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { job: { title: "Cashier 1", is_tip_eligible: true } };
        const rawResponseBody = {
            job: {
                id: "1yJlHapkseYnNPETIU1B",
                title: "Cashier 1",
                is_tip_eligible: true,
                created_at: "2021-06-11T22:55:45Z",
                updated_at: "2021-06-13T12:55:45Z",
                version: 2,
            },
            errors: [{ category: "API_ERROR", code: "INTERNAL_SERVER_ERROR", detail: "detail", field: "field" }],
        };
        server
            .mockEndpoint()
            .put("/v2/team-members/jobs/job_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.team.updateJob({
            jobId: "job_id",
            job: {
                title: "Cashier 1",
                isTipEligible: true,
            },
        });
        expect(response).toEqual({
            job: {
                id: "1yJlHapkseYnNPETIU1B",
                title: "Cashier 1",
                isTipEligible: true,
                createdAt: "2021-06-11T22:55:45Z",
                updatedAt: "2021-06-13T12:55:45Z",
                version: 2,
            },
            errors: [
                {
                    category: "API_ERROR",
                    code: "INTERNAL_SERVER_ERROR",
                    detail: "detail",
                    field: "field",
                },
            ],
        });
    });
});
